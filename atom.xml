<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Opportunities are reserved for those who are prepared</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-08T06:22:49.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>蒙长圆</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test</title>
    <link href="http://yoursite.com/2017/12/02/text/"/>
    <id>http://yoursite.com/2017/12/02/text/</id>
    <published>2017-12-02T05:17:02.000Z</published>
    <updated>2017-12-08T06:22:49.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>Vue实例详解与生命周期</code></center></p>
<hr>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="number">111</span>);</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">这里是最终敲完的正确代码，可用于比对</div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"test.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">WhoisE</span> (<span class="params"></span>) </span>&#123;</div><div class="line">				<span class="keyword">var</span> e;</div><div class="line">				e = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"classA"</span>);</div><div class="line">				e = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>);</div><div class="line">				e = <span class="built_in">document</span>.getElementById(<span class="string">"d1"</span>);</div><div class="line">				e.setAttribute(<span class="string">"align"</span>,<span class="string">"center"</span>);</div><div class="line">				e.setAttribute(<span class="string">"data-test"</span>,<span class="string">"2"</span>);</div><div class="line">				e.style.fontFamily=<span class="string">"微软雅黑"</span>;</div><div class="line">				e.style.backgroundImage=<span class="string">"url(img/HBuilder.png)"</span>;</div><div class="line">				e.style.cssText=<span class="string">"background-image: url(img/HBuilder.png);"</span>;</div><div class="line">				<span class="keyword">switch</span> (e.style.display)&#123;</div><div class="line">					<span class="keyword">case</span> <span class="string">"-webkit-box"</span>:</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">					<span class="keyword">default</span>:</div><div class="line">						<span class="keyword">break</span>;</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">if</span> (e.getAttribute(<span class="string">"class"</span>)!=<span class="string">"classA"</span>) &#123;</div><div class="line">					e.className=<span class="string">"classA"</span>;</div><div class="line">				&#125;</div><div class="line">				e.innerHTML=<span class="string">"&lt;font color='#CCCCCC'&gt;&lt;/font&gt;"</span>;</div><div class="line">				e = <span class="built_in">document</span>.getElementById(<span class="string">"a1"</span>);</div><div class="line">				e.href=<span class="string">"#a1"</span>;</div><div class="line">				e.target=<span class="string">"_blank"</span>;</div><div class="line">				e = <span class="keyword">new</span> Image();</div><div class="line">				e.src=<span class="string">"img/HBuilder.png"</span>;</div><div class="line">				e = <span class="built_in">window</span>.indexedDB || <span class="built_in">window</span>.webkitIndexedDB || <span class="built_in">window</span>.msIndexedDB || <span class="built_in">window</span>.mozIndexedDB;</div><div class="line">				<span class="keyword">if</span> (<span class="keyword">typeof</span>(e)!=<span class="string">"undefined"</span>) &#123;</div><div class="line">					e.open(<span class="string">"test"</span>);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>];</div><div class="line">				<span class="keyword">with</span> (head)&#123;</div><div class="line">					<span class="keyword">var</span> l = lastElementChild;</div><div class="line">					removeChild(l);</div><div class="line">				&#125;</div><div class="line">				e = <span class="built_in">document</span>.createElement(<span class="string">"link"</span>);</div><div class="line">				e.rel=<span class="string">"stylesheet"</span>;</div><div class="line">				e.type=<span class="string">"text/css"</span>;</div><div class="line">				e.href=<span class="string">"test.css"</span>;</div><div class="line">				head.appendChild(e);</div><div class="line">				<span class="keyword">var</span> ss=<span class="string">"e is "</span>;</div><div class="line">				<span class="keyword">if</span> (e.getAttribute(<span class="string">"data-test"</span>)==<span class="literal">null</span>) &#123;</div><div class="line">					ss=ss+e.outerHTML;</div><div class="line">				&#125; <span class="keyword">else</span>&#123;</div><div class="line">					ss=ss+<span class="string">"unknow"</span>;</div><div class="line">				&#125;</div><div class="line">				alert(ss)</div><div class="line">			&#125;</div><div class="line">			addEventListener(<span class="string">"DOMContentLoaded"</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">				finishLesson(<span class="number">1</span>)</div><div class="line">			&#125;)</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">			body&#123;</div><div class="line">				text-align: center;</div><div class="line">				-webkit-user-select: none;</div><div class="line">			&#125;</div><div class="line">			input[type=button]&#123;</div><div class="line">				width: 90px;</div><div class="line">			&#125;</div><div class="line">			ul&#123;display: none&#125;</div><div class="line">			#d1&#123;</div><div class="line">				font-family: "微软雅黑";</div><div class="line">				background-image: url(img/HBuilder.png)</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"test.css"</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/HBuilder.png"</span>/&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1"</span> <span class="attr">class</span>=<span class="string">"classA"</span> <span class="attr">data-test</span> = <span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#a1"</span> <span class="attr">id</span>=<span class="string">"a1"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">nav</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"who is e"</span> <span class="attr">onclick</span>=<span class="string">"WhoisE()"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>哈哈哈哈哈哈</p>
<h3 id="二级标题子标题"><a href="#二级标题子标题" class="headerlink" title="二级标题子标题"></a>二级标题子标题</h3><p><code>呵呵呵呵呵呵呵</code><br><a href="http://www.baidu.com" target="_blank" rel="external">百度</a></p>
<h1 id="222"><a href="#222" class="headerlink" title="222"></a>222</h1><p><img src="http://p0mpsm12s.bkt.clouddn.com/WechatIMG9.jpeg" alt="“图片描述”"></p>
]]></content>
    
    <summary type="html">
    
      蒙长圆
    
    </summary>
    
      <category term="油田" scheme="http://yoursite.com/categories/%E6%B2%B9%E7%94%B0/"/>
    
    
      <category term="任丘" scheme="http://yoursite.com/tags/%E4%BB%BB%E4%B8%98/"/>
    
  </entry>
  
  <entry>
    <title>Airbnb JavaScript风格指南（）</title>
    <link href="http://yoursite.com/2017/11/06/javascript%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2017/11/06/javascript风格指南/</id>
    <published>2017-11-06T02:11:26.000Z</published>
    <updated>2017-11-06T07:00:48.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文部分"><a href="#正文部分" class="headerlink" title="正文部分"></a><code>正文部分</code></h1><center style="font-size: 30px; font-weight:700; color:blue;"><code>JavaScript风格指南</code></center>

<hr>
<p>一种最合理的JavaScript方法</p>
<p>其他风格指南</p>
<ul>
<li>ES5</li>
<li>React</li>
<li>CSS和Sass</li>
<li>Ruby</li>
</ul>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>1.1.1 基本数据类型：当你访问一个基本数据类型时，你直接使用它的值。</p>
<ul>
<li>string</li>
</ul>
<ul>
<li>number</li>
</ul>
<ul>
<li>boolean</li>
</ul>
<ul>
<li>null</li>
</ul>
<ul>
<li>undefined</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> foo = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> bar = foo;</div><div class="line"></div><div class="line">bar = <span class="number">9</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo, bar); <span class="comment">// =&gt; 1, 9</span></div></pre></td></tr></table></figure>
<p>1.1.2 复杂：当你访问一个复杂的类型时，你需要引用它的值。</p>
<ul>
<li>object</li>
<li>array</li>
<li>function</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> foo = [<span class="number">1</span>, <span class="number">2</span>];</div><div class="line"><span class="keyword">const</span> bar = foo;</div><div class="line"></div><div class="line">bar[<span class="number">0</span>] = <span class="number">9</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(foo[<span class="number">0</span>], bar[<span class="number">0</span>]); <span class="comment">// =&gt; 9, 9</span></div></pre></td></tr></table></figure>
<p><a href="#正文部分">⬆回到顶部</a></p>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><ul>
<li>1.2.1使用<code>const</code>您的所有引用的; 避免使用<code>var</code>。<em>eslint</em>： prefer-const，no-const-assign<br>为什么？这可以确保您不能重新分配您的引用，这可能会导致错误和难以理解的代码。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</div></pre></td></tr></table></figure>
<ul>
<li>1.2.2如果您必须重新分配引用，请使用<code>let</code>而不是<code>var</code>。<em>eslint</em>：no-varjscs：disallowVar<br>为什么？<code>let</code>是块范围的而不是函数范围的<code>var</code>。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> count = <span class="number">1</span>;</div><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  count += <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>1.2.3注意，两个let和const是块作用域。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// const and let only exist in the blocks they are defined in.</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line">  <span class="keyword">const</span> b = <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// ReferenceError</span></div><div class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError</span></div></pre></td></tr></table></figure>
<p><a href="#正文部分">⬆回到顶部</a></p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><ul>
<li>1.3.1使用文字语法创建对象。<em>eslint</em>：no-new-object</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> item = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> item = &#123;&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>1.3.2如果您的代码将在脚本上下文中的浏览器中执行，请不要使用保留字作为键。它不会在IE8中工作。更多信息。在ES6模块和服务器端代码中使用它们是可以的。<em>JSCS</em>：disallowIdentifierNames</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> superman = &#123;</div><div class="line">  <span class="attr">default</span>: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</div><div class="line">  <span class="attr">private</span>: <span class="literal">true</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> superman = &#123;</div><div class="line">  <span class="attr">defaults</span>: &#123; <span class="attr">clark</span>: <span class="string">'kent'</span> &#125;,</div><div class="line">  <span class="attr">hidden</span>: <span class="literal">true</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>1.3.3使用可读的同义词代替保留字。<em>JSCS</em>：disallowIdentifierNames</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> superman = &#123;</div><div class="line">  <span class="attr">class</span>: <span class="string">'alien'</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> superman = &#123;</div><div class="line">  <span class="attr">klass</span>: <span class="string">'alien'</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> superman = &#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">'alien'</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>1.3.4使用动态属性名称创建对象时使用计算的属性名称。<br>为什么？它们允许你在一个地方定义一个对象的所有属性。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getKey</span>(<span class="params">k</span>) </span>&#123; <span class="keyword">return</span> a key named $&#123;k&#125;; &#125;</div><div class="line"></div><div class="line"><span class="comment">// bad </span></div><div class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">'San Francisco'</span>&#125;; </div><div class="line">obj[getKey(<span class="string">'enabled'</span>)] = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"> <span class="keyword">const</span> obj = &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">'San Francisco'</span>, [getKey(<span class="string">'enabled'</span>)]: <span class="literal">true</span>&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>1.3.5使用对象方法速记。<em>eslint</em>：object-shorthandjscs：requireEnhancedObjectLiterals</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> atom = &#123;</div><div class="line">  <span class="attr">value</span>: <span class="number">1</span>,</div><div class="line"></div><div class="line">  <span class="attr">addValue</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> atom = &#123;</div><div class="line">  <span class="attr">value</span>: <span class="number">1</span>,</div><div class="line"></div><div class="line">  addValue(value) &#123;</div><div class="line">    <span class="keyword">return</span> atom.value + value;</div><div class="line">  &#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>1.3.6使用属性值速记。<em>eslint</em>：object-shorthandjscs：requireEnhancedObjectLiterals<br>为什么？写和描述性较短。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">'Luke Skywalker'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  <span class="attr">lukeSkywalker</span>: lukeSkywalker,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  lukeSkywalker,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>1.3.7 在你的对象声明的开头分组你的速记属性。<br>为什么？判断哪些属性使用简写更容易。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> anakinSkywalker = <span class="string">'Anakin Skywalker'</span>;</div><div class="line"><span class="keyword">const</span> lukeSkywalker = <span class="string">'Luke Skywalker'</span>;</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  <span class="attr">episodeOne</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">twoJediWalkIntoACantina</span>: <span class="number">2</span>,</div><div class="line">  lukeSkywalker,</div><div class="line">  <span class="attr">episodeThree</span>: <span class="number">3</span>,</div><div class="line">  <span class="attr">mayTheFourth</span>: <span class="number">4</span>,</div><div class="line">  anakinSkywalker,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  lukeSkywalker,</div><div class="line">  anakinSkywalker,</div><div class="line">  <span class="attr">episodeOne</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">twoJediWalkIntoACantina</span>: <span class="number">2</span>,</div><div class="line">  <span class="attr">episodeThree</span>: <span class="number">3</span>,</div><div class="line">  <span class="attr">mayTheFourth</span>: <span class="number">4</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>1.3.8 只引用无效标识符的属性。<em>eslint</em>：quote-propsjscs：disallowQuotedKeysInObjects<br>为什么？一般来说，我们认为它在主观上更容易阅读。它提高了语法高亮度，并且也被许多JS引擎更容易地优化。</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> bad = &#123;</div><div class="line"><span class="string">'foo'</span>: <span class="number">3</span>,</div><div class="line"><span class="string">'bar'</span>: <span class="number">4</span>,</div><div class="line"><span class="string">'data-blah'</span>: <span class="number">5</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> good = &#123;</div><div class="line"><span class="attr">foo</span>: <span class="number">3</span>,</div><div class="line"><span class="attr">bar</span>: <span class="number">4</span>,</div><div class="line"><span class="string">'data-blah'</span>: <span class="number">5</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>1.3.9不要叫<code>Object.prototype</code>直接的方法，如<code>hasOwnProperty</code>，<code>propertyIsEnumerable</code>和<code>isPrototypeOf</code>。</li>
</ul>
<p>为什么？这些方法可能被所讨论的对象的属性所遮蔽 - 考虑<code>{ hasOwnProperty: false }</code>- 或者，对象可能是一个空对象<code>（Object.create(null)）</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="built_in">console</span>.log(object.hasOwnProperty(key));</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.hasOwnProperty.call(object, key));</div><div class="line"></div><div class="line"><span class="comment">// best</span></div><div class="line"><span class="keyword">const</span> has = <span class="built_in">Object</span>.prototype.hasOwnProperty; <span class="comment">// cache the lookup once, in module scope.</span></div><div class="line"><span class="comment">/* or */</span></div><div class="line"><span class="keyword">const</span> has = <span class="built_in">require</span>(<span class="string">'has'</span>);</div><div class="line">…</div><div class="line"><span class="built_in">console</span>.log(has.call(object, key));</div></pre></td></tr></table></figure>
<p><a href="#正文部分">⬆回到顶部</a></p>
]]></content>
    
    <summary type="html">
    
      一种最合理的JavaScript方法
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="javaScript指南" scheme="http://yoursite.com/tags/javaScript%E6%8C%87%E5%8D%97/"/>
    
      <category term="ES6语法" scheme="http://yoursite.com/tags/ES6%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>webpack：从入门到真实项目配置</title>
    <link href="http://yoursite.com/2017/09/20/webpack%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%9C%9F%E5%AE%9E%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2017/09/20/webpack从入门到真实项目配置/</id>
    <published>2017-09-20T15:42:26.000Z</published>
    <updated>2017-09-20T02:57:00.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文部分"><a href="#正文部分" class="headerlink" title="正文部分"></a><code>正文部分</code></h1><left style="font-size: 30px; font-weight:700"><code>webpack：从入门到真实项目配置</code></left>

<hr>
<blockquote>
<p>该文使用的 Webpack 版本为 3.6.0，本文分两部分。第一步是简单的使用 webpack，第二部分通过一个真实项目来配置 webpack，没有使用任何的 CLI，都是一步步配置直到完成生产代码的打包。<a href="https://github.com/Modify01/webpack" target="_blank" rel="external">这是本项目对应的仓库</a>，每个小节基本都对应了一次 commit。</p>
</blockquote>
<p>这是本文的大纲，如果觉得有兴趣你就可以往下看了</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/webpack%E4%BB%8B%E7%BB%8D.png" alt="webpack介绍"></p>
<h2 id="Webpack-到底是什么"><a href="#Webpack-到底是什么" class="headerlink" title="Webpack 到底是什么"></a>Webpack 到底是什么</h2><p>自从出现模块化以后，大家可以将原本一坨代码分离到个个模块中，但是由此引发了一个问题。每个 JS 文件都需要从服务器去拿，由此会导致加载速度变慢。Webpack 最主要的目的就是为了解决这个问题，将所有小文件打包成一个或多个大文件，官网的图片很好的诠释了这个事情，除此之外，Webpack 也是一个能让你使用各种前端新技术的工具。</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/webpack%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88.png" alt="webpack到底是什么"></p>
<h2 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h2><p>安装</p>
<p>在命令行中依次输入</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mkdir  webpack-demo</div><div class="line">cd webpack-demo</div><div class="line"><span class="comment">// 创建 package.json，这里会问一些问题，直接回车跳过就行</span></div><div class="line">npm init </div><div class="line"><span class="comment">//  推荐这个安装方式，当然你也安装在全局环境下</span></div><div class="line"><span class="comment">// 这种安装方式会将 webpack 放入 devDependencies 依赖中</span></div><div class="line">npm install --save-dev webpack</div></pre></td></tr></table></figure>
<p>然后按照下图创建文件</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/webpack%E6%96%87%E4%BB%B6%E5%A4%B9%E7%BB%93%E6%9E%84.png" alt="webpack文件夹结构"></p>
<p>在以下文件写入代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sum.js</span></div><div class="line"><span class="comment">// 这个模块化写法是 node 环境独有的，浏览器原生不支持使用</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line">&#125;</div><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="keyword">var</span> sum = <span class="built_in">require</span>(<span class="string">'./sum'</span>)</div><div class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>))</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./build/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>现在我们开始配置最简单的 webpack，首先创建 <code>webpack.config.js</code> 文件，然后写入如下代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 自带的库</span></div><div class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>:  <span class="string">'./app/index.js'</span>, <span class="comment">// 入口文件</span></div><div class="line">    output: &#123;</div><div class="line">      <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'build'</span>), <span class="comment">// 必须使用绝对地址，输出文件夹</span></div><div class="line">      filename: <span class="string">"bundle.js"</span> <span class="comment">// 打包后输出文件的文件名</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>现在我们可以开始使用 webpack 了，在命令行中输入</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node_modules/.bin/webpack</div></pre></td></tr></table></figure>
<p>没问题的话你应该可以看到类似的样子</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/webpack%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" alt="webpack运行结果"></p>
<p>可以发现原本两个 JS 文件只有 100B，但是打包后却增长到 2.66KB，这之中 webpack 肯定做了什么事情，我们去 bundle.js 文件中看看。</p>
<p>把代码简化以后，核心思路是这样的</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> array = [(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> sum = array[<span class="number">1</span>]</div><div class="line">        <span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>))</div><div class="line">    &#125;),</div><div class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> a + b</div><div class="line">    &#125;)</div><div class="line">]</div><div class="line">array[<span class="number">0</span>]() <span class="comment">// -&gt; 3</span></div></pre></td></tr></table></figure>
<p>因为 <code>module.export</code> 浏览器是不支持的，所以 <code>webpack</code> 将代码改成浏览器能识别的样子。现在将 <code>index.html</code> 文件在浏览器中打开，应该也可以看到正确的 <code>log</code>。</p>
<p>我们之前是在文件夹中安装的 <code>webpack</code>，每次要输入 <code>node_modules/.bin/webpack</code> 过于繁琐，可以在 <code>package.json</code> 如下修改</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"start"</span>: <span class="string">"webpack"</span></div><div class="line">  &#125;,</div></pre></td></tr></table></figure>
<p>然后再次执行 <code>npm run start</code>，可以发现和之前的效果是相同的。简单的使用到此为止，接下来我们来探索 <code>webpack</code> 更多的功能。</p>
<h2 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h2><p>Loader 是 webpack 一个很强大功能，这个功能可以让你使用很多新的技术。</p>
<h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>Babel 可以让你使用 ES2015/16/17 写代码而不用顾忌浏览器的问题，Babel 可以帮你转换代码。首先安装必要的几个 Babel 库</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev babel-loader babel-core babel-preset-env</div></pre></td></tr></table></figure>
<p>先介绍下我们安装的三个库</p>
<ul>
<li>babel-loader 用于让 webpack 知道如何运行 babel</li>
<li>babel-core 可以看做编译器，这个库知道如何解析代码</li>
<li>babel-preset-env 这个库可以根据环境的不同转换代码</li>
</ul>
<p>接下来更改 <code>webpack-config.js</code> 中的代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"><span class="comment">// ......</span></div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        <span class="attr">rules</span>: [</div><div class="line">            &#123;</div><div class="line">            <span class="comment">// js 文件才使用 babel</span></div><div class="line">                test: <span class="regexp">/\.js$/</span>,</div><div class="line">             <span class="comment">// 使用哪个 loader</span></div><div class="line">                use: <span class="string">'babel-loader'</span>,</div><div class="line">            <span class="comment">// 不包括路径</span></div><div class="line">                exclude: <span class="regexp">/node_modules/</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置 Babel 有很多方式，这里推荐使用 .babelrc 文件管理。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ..babelrc</span></div><div class="line">&#123;</div><div class="line">    <span class="string">"presets"</span>: [<span class="string">"babel-preset-env"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在将之前 JS 的代码改成 ES6 的写法</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sum.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> (a, b) =&gt; &#123;</div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line">&#125;</div><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">'./sum'</span></div><div class="line"><span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>))</div></pre></td></tr></table></figure>
<p>执行 <code>npm run start</code>，再观察 <code>bundle.js</code> 中的代码，可以发现代码被转换过了，并且同样可以正常 输出3。</p>
<p>当然 Babel 远不止这些功能，有兴趣的可以前往官网自己探索。</p>
<h3 id="处理图片"><a href="#处理图片" class="headerlink" title="处理图片"></a>处理图片</h3><p>这一小节我们将使用 <code>url-loader</code> 和 <code>file-loader</code>，这两个库不仅可以处理图片，还有其他的功能，有兴趣的可以自行学习。</p>
<p>先安装库</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev url-loader file-loader</div></pre></td></tr></table></figure>
<p>创建一个 <code>images</code> 文件夹，放入两张图片，并且在 <code>app</code> 文件夹下创建一个 js 文件处理图片<br>，目前的文件夹结构如图</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/webpack%E5%A4%84%E7%90%86%E5%9B%BE%E7%89%87%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E7%BB%93%E6%9E%84.png" alt="webpack图片文件夹结构"></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// addImage.js</span></div><div class="line"><span class="keyword">let</span> smallImg = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</div><div class="line"><span class="comment">// 必须 require 进来</span></div><div class="line">smallImg.src = <span class="built_in">require</span>(<span class="string">'../images/small.jpeg'</span>)</div><div class="line"><span class="built_in">document</span>.body.appendChild(smallImg)</div><div class="line"></div><div class="line"><span class="keyword">let</span> bigImg = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</div><div class="line">bigImg.src = <span class="built_in">require</span>(<span class="string">'../images/big.jpeg'</span>)</div><div class="line"><span class="built_in">document</span>.body.appendChild(bigImg)</div></pre></td></tr></table></figure>
<p>接下来修改 <code>webpack.config.js</code> 代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"><span class="comment">// ...</span></div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">        <span class="attr">rules</span>: [</div><div class="line">            <span class="comment">// ...</span></div><div class="line">            &#123;</div><div class="line">            <span class="comment">// 图片格式正则</span></div><div class="line">                test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</div><div class="line">                <span class="attr">use</span>: [</div><div class="line">                  &#123;</div><div class="line">                    <span class="attr">loader</span>: <span class="string">'url-loader'</span>,</div><div class="line">                    <span class="comment">// 配置 url-loader 的可选项</span></div><div class="line">                    options: &#123;</div><div class="line">                    <span class="comment">// 限制 图片大小 10000B，小于限制会将图片转换为 base64格式</span></div><div class="line">                      limit: <span class="number">10000</span>,</div><div class="line">                    <span class="comment">// 超出限制，创建的文件格式</span></div><div class="line">                    <span class="comment">// build/images/[图片名].[hash].[图片格式]</span></div><div class="line">                      name: <span class="string">'images/[name].[hash].[ext]'</span></div><div class="line">                   &#125;</div><div class="line">                  &#125;</div><div class="line">                ]</div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>运行 <code>npm run start</code>，打包成功如下图</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/webpack%E5%AF%B9%E4%BA%8E%E5%9B%BE%E7%89%87%E7%9A%84%E5%A4%84%E7%90%86%E7%BB%93%E6%9E%9C.png" alt="webpack对于图片处理结果"></p>
<p>可以发现大的图片被单独提取了出来，小的图片打包进了 <code>bundle.js</code> 中。</p>
<p>在浏览器中打开 HTML 文件，发现小图确实显示出来了，但是却没有看到大图，打开开发者工具栏，可以发现我们大图的图片路径是有问题的，所以我们又要修改 <code>webpack.config.js</code> 代码了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>:  <span class="string">'./app/index.js'</span>, <span class="comment">// 入口文件</span></div><div class="line">    output: &#123;</div><div class="line">      <span class="attr">path</span>: path.resolve(__dirname, <span class="string">'build'</span>), <span class="comment">// 必须使用绝对地址，输出文件夹</span></div><div class="line">      filename: <span class="string">"bundle.js"</span>, <span class="comment">// 打包后输出文件的文件名</span></div><div class="line">      publicPath: <span class="string">'build/'</span> <span class="comment">// 知道如何寻找资源</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>最后运行下 <code>npm run start</code>，编译成功了，再次刷新下页面，可以发现这次大图被正确的显示了。下一小节我们将介绍如何处理 CSS 文件。</p>
<h3 id="处理-CSS-文件"><a href="#处理-CSS-文件" class="headerlink" title="处理 CSS 文件"></a>处理 CSS 文件</h3><p>添加 <code>styles</code> 文件夹，新增 <code>addImage.css</code> 文件，然后在该文件中新增代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">img &#123;</div><div class="line">    <span class="attr">border</span>: <span class="number">5</span>px black solid;</div><div class="line">&#125;</div><div class="line">.test &#123;<span class="attr">border</span>: <span class="number">5</span>px black solid;&#125;</div></pre></td></tr></table></figure>
<p>这一小节我们先使用 <code>css-loader</code> 和 <code>style-loader</code> 库。前者可以让 CSS 文件也支持 <code>impost</code>，并且会解析 CSS 文件，后者可以将解析出来的 CSS 通过标签的形式插入到 HTML 中，所以后面依赖前者。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev css-loader style-loader</div></pre></td></tr></table></figure>
<p>首先修改 <code>addImage.js</code> 文件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'../styles/addImage.css'</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> smallImg = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>)</div><div class="line">smallImg.src = <span class="built_in">require</span>(<span class="string">'../images/small.jpeg'</span>)</div><div class="line"><span class="built_in">document</span>.body.appendChild(smallImg)</div><div class="line"></div><div class="line"><span class="comment">// let bigImg = document.createElement('img')</span></div><div class="line"><span class="comment">// bigImg.src = require('../images/big.jpeg')</span></div><div class="line"><span class="comment">// document.body.appendChild(bigImg)</span></div></pre></td></tr></table></figure>
<p>然后修改 <code>webpack.config.js</code> 代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"><span class="comment">// ...</span></div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">      <span class="attr">rules</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">            <span class="attr">use</span>: [<span class="string">'style-loader'</span>,</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">loader</span>: <span class="string">'css-loader'</span>,</div><div class="line">                    <span class="attr">options</span>: &#123;</div><div class="line">                        <span class="attr">modules</span>: <span class="literal">true</span></div><div class="line">                       &#125;</div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;,</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>运行下 <code>npm run start</code>，然后刷新页面，可以发现图片被正确的加上了边框，现在我们来看一下 HTML 的文件结构</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/webpack%E5%A4%84%E7%90%86css%E8%BF%87%E7%A8%8B.png" alt="webpack处理css过程"></p>
<p>从上图可以看到，我们在 <code>addImage.css</code> 文件中写的代码被加入到了 <code>style</code> 标签中，并且因为我们开启了 CSS 模块化的选项，所以 <code>.test</code> 被转成了唯一的哈希值，这样就解决了 CSS 的变量名重复问题。</p>
<p>但是将 CSS 代码整合进 JS 文件也是有弊端的，大量的 CSS 代码会造成 JS 文件的大小变大，操作 DOM 也会造成性能上的问题，所以接下来我们将使用 <code>extract-text-webpack-plugin</code> 插件将 CSS 文件打包为一个单独文件</p>
<p>首先安装 <code>npm i --save-dev extract-text-webpack-plugin</code></p>
<p>然后修改 <code>webpack.config.js</code> 代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"><span class="comment">// ....</span></div><div class="line">    <span class="built_in">module</span>: &#123;</div><div class="line">      <span class="attr">rules</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">          <span class="comment">// 写法和之前基本一致</span></div><div class="line">          loader: ExtractTextPlugin.extract(&#123;</div><div class="line">          <span class="comment">// 必须这样写，否则会报错</span></div><div class="line">                fallback: <span class="string">'style-loader'</span>,</div><div class="line">                <span class="attr">use</span>: [&#123;</div><div class="line">                    <span class="attr">loader</span>: <span class="string">'css-loader'</span>,</div><div class="line">                    <span class="attr">options</span>: &#123; </div><div class="line">                        <span class="attr">modules</span>: <span class="literal">true</span></div><div class="line">                    &#125;</div><div class="line">                &#125;]</div><div class="line">            &#125;)</div><div class="line">        ]</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 插件列表</span></div><div class="line">    plugins: [</div><div class="line">    <span class="comment">// 输出的文件路径</span></div><div class="line">      <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"css/[name].[hash].css"</span>)</div><div class="line">    ]</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>运行下 <code>npm run start</code>，可以发现 CSS 文件被单独打包出来了</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/webpack%E7%9A%84css%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85.png" alt="webpack的css文件打包"></p>
<p>但是这时候刷新页面会发现图片的边框消失了，那是因为我们的 HTML 文件没有引用新的 CSS 文件，所以这里需要我们手动引入下，在下面的章节我们会通过插件的方式自动引入新的文件。</p>
<p>接下来，会用一个项目来继续我们的 webpack 学习，在这之前，先 clone 一下项目。该项目原地址是 <a href="https://github.com/StephenGrider/WebpackProject" target="_blank" rel="external">这里</a>，因为使用的 webpack 版本太低，并且依赖的库也有点问题，故我将项目拷贝了过来并修改了几个库的版本号。</p>
<p>请依次按照以下代码操作</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git clone https:<span class="comment">//github.com/KieSun/webpack-demo.git</span></div><div class="line">cd webpack-demo</div><div class="line"><span class="comment">// 切换到 0.1 标签上并创建一个新分支</span></div><div class="line">git checkout -b demo <span class="number">0.1</span></div><div class="line">cd project</div><div class="line">npm i </div><div class="line"><span class="comment">// 查看分支是否为 demo，没问题的话就可以进行下一步</span></div></pre></td></tr></table></figure>
<h2 id="如何在项目中使用-webpack"><a href="#如何在项目中使用-webpack" class="headerlink" title="如何在项目中使用 webpack"></a>如何在项目中使用 webpack</h2><p>项目中已经配置了很简单的 babel 和 webpack，直接运行 <code>npm run start</code> 即可</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/%E5%A6%82%E4%BD%95%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8webpack.png" alt="如何在项目中使用webpack"></p>
<p>这时候你会发现这个 bundle.js 居然有这么大，这肯定是不能接受的，所以接下来章节的主要目的就是将单个文件拆分为多个文件，优化项目。</p>
<h2 id="分离代码"><a href="#分离代码" class="headerlink" title="分离代码"></a>分离代码</h2><p>先让我们考虑下缓存机制。对于代码中依赖的库很少会去主动升级版本，但是我们自己的代码却每时每刻都在变更，所以我们可以考虑将依赖的库和自己的代码分割开来，这样用户在下一次使用应用时就可以尽量避免重复下载没有变更的代码，那么既然要将依赖代码提取出来，我们需要变更下入口和出口的部分代码。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这是 packet.json 中 dependencies 下的</span></div><div class="line"><span class="keyword">const</span> VENOR = [<span class="string">"faker"</span>,</div><div class="line">  <span class="string">"lodash"</span>,</div><div class="line">  <span class="string">"react"</span>,</div><div class="line">  <span class="string">"react-dom"</span>,</div><div class="line">  <span class="string">"react-input-range"</span>,</div><div class="line">  <span class="string">"react-redux"</span>,</div><div class="line">  <span class="string">"redux"</span>,</div><div class="line">  <span class="string">"redux-form"</span>,</div><div class="line">  <span class="string">"redux-thunk"</span></div><div class="line">]</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"><span class="comment">// 之前我们都是使用了单文件入口</span></div><div class="line"><span class="comment">// entry 同时也支持多文件入口，现在我们有两个入口</span></div><div class="line"><span class="comment">// 一个是我们自己的代码，一个是依赖库的代码</span></div><div class="line">  entry: &#123;</div><div class="line">  <span class="comment">// bundle 和 vendor 都是自己随便取名的，会映射到 [name] 中</span></div><div class="line">    bundle: <span class="string">'./src/index.js'</span>,</div><div class="line">    <span class="attr">vendor</span>: VENOR</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: path.join(__dirname, <span class="string">'dist'</span>),</div><div class="line">    <span class="attr">filename</span>: <span class="string">'[name].js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// ...</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>现在我们 build 一下，看看是否有惊喜出现</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/webpack%E9%A1%B9%E7%9B%AE%E5%88%86%E7%A6%BB.png" alt="webpack项目分离"></p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/webpack%E9%A1%B9%E7%9B%AE%E5%88%86%E7%A6%BB%EF%BC%882%EF%BC%89.png" alt=""></p>
<p>真的有惊喜。。为什么 bundle 文件大小压根没变。这是因为 bundle 中也引入了依赖库的代码,刚才的步骤并没有抽取 bundle 中引入的代码，接下来让我们学习如何将共同的代码抽取出来。</p>
<h3 id="抽取共同代码"><a href="#抽取共同代码" class="headerlink" title="抽取共同代码"></a>抽取共同代码</h3><p>在这小节我们使用 webpack 自带的插件 <code>CommonsChunkPlugin</code>。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"><span class="comment">//...</span></div><div class="line">  output: &#123;</div><div class="line">    <span class="attr">path</span>: path.join(__dirname, <span class="string">'dist'</span>),</div><div class="line">    <span class="comment">// 既然我们希望缓存生效，就应该每次在更改代码以后修改文件名</span></div><div class="line">    <span class="comment">// [chunkhash]会自动根据文件是否更改而更换哈希</span></div><div class="line">    filename: <span class="string">'[name].[chunkhash].js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">    <span class="comment">// vendor 的意义和之前相同</span></div><div class="line">    <span class="comment">// manifest文件是将每次打包都会更改的东西单独提取出来，保证没有更改的代码无需重新打包，这样可以加快打包速度</span></div><div class="line">      names: [<span class="string">'vendor'</span>, <span class="string">'manifest'</span>],</div><div class="line">      <span class="comment">// 配合 manifest 文件使用</span></div><div class="line">      minChunks: <span class="literal">Infinity</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>当我们重新 build 以后，会发现 bundle 文件很明显的减小了体积</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/webpack%E6%8A%BD%E5%8F%96%E5%85%B1%E5%90%8C%E4%BB%A3%E7%A0%81.png" alt="webpack抽取公共代码"></p>
<p>但是我们使用哈希来保证缓存的同时会发现每次 build 都会生成不一样的文件，这时候我们引入另一个插件来帮助我们删除不需要的文件。</p>
<blockquote>
<p>npm install –save-dev clean-webpack-plugin</p>
</blockquote>
<p>然后修改配置文件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"><span class="comment">//...</span></div><div class="line">  plugins: [</div><div class="line">  <span class="comment">// 只删除 dist 文件夹下的 bundle 和 manifest 文件</span></div><div class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist/bundle.*.js'</span>,<span class="string">'dist/manifest.*.js'</span>], &#123;</div><div class="line">    <span class="comment">// 打印 log</span></div><div class="line">      verbose: <span class="literal">true</span>,</div><div class="line">      <span class="comment">// 删除文件</span></div><div class="line">      dry: <span class="literal">false</span></div><div class="line">    &#125;),</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后 build 的时候会发现以上文件被删除了。</p>
<p>因为我们现在将文件已经打包成三个 JS 了，以后也许会更多，每次新增 JS 文件我们都需要手动在 HTML 中新增标签，现在我们可以通过一个插件来自动完成这个功能。</p>
<blockquote>
<p>npm install html-webpack-plugin –save-dev</p>
</blockquote>
<p>然后修改配置文件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"><span class="comment">//...</span></div><div class="line">  plugins: [</div><div class="line">  <span class="comment">// 我们这里将之前的 HTML 文件当做模板</span></div><div class="line">  <span class="comment">// 注意在之前 HTML 文件中请务必删除之前引入的 JS 文件</span></div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">      <span class="attr">template</span>: <span class="string">'index.html'</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>执行 build 操作会发现同时生成了 HTML 文件，并且已经自动引入了 JS 文件</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/webpack%E5%88%A0%E9%99%A4%E5%A4%9A%E4%BD%99%E7%9A%84%E4%BB%A3%E7%A0%81.png" alt=""></p>
<h3 id="按需加载代码"><a href="#按需加载代码" class="headerlink" title="按需加载代码"></a>按需加载代码</h3><p>在这一小节我们将学习如何按需加载代码，在这之前的 vendor 入口我发现忘记加入 router 这个库了，大家可以加入这个库并且重新 build 下，会发现 bundle 只有不到 300KB 了。</p>
<p>现在我们的 bundle 文件包含了我们全部的自己代码。但是当用户访问我们的首页时，其实我们根本无需让用户加载除了首页以外的代码，这个优化我们可以通过路由的异步加载来完成。</p>
<p>现在修改 <code>src/router.js</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注意在最新版的 V4路由版本中，更改了按需加载的方式，如果安装了 V4版，可以自行前往官网学习</span></div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Router, Route, IndexRoute, hashHistory &#125; <span class="keyword">from</span> <span class="string">'react-router'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home'</span>;</div><div class="line"><span class="keyword">import</span> ArtistMain <span class="keyword">from</span> <span class="string">'./components/artists/ArtistMain'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> rootRoute = &#123;</div><div class="line">  <span class="attr">component</span>: Home,</div><div class="line">  <span class="attr">path</span>: <span class="string">'/'</span>,</div><div class="line">  <span class="attr">indexRoute</span>: &#123; <span class="attr">component</span>: ArtistMain &#125;,</div><div class="line">  <span class="attr">childRoutes</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'artists/new'</span>,</div><div class="line">      getComponent(location, cb) &#123;</div><div class="line">        System.import(<span class="string">'./components/artists/ArtistCreate'</span>)</div><div class="line">          .then(<span class="function"><span class="params">module</span> =&gt;</span> cb(<span class="literal">null</span>, <span class="built_in">module</span>.default))</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'artists/:id/edit'</span>,</div><div class="line">      getComponent(location, cb) &#123;</div><div class="line">        System.import(<span class="string">'./components/artists/ArtistEdit'</span>)</div><div class="line">          .then(<span class="function"><span class="params">module</span> =&gt;</span> cb(<span class="literal">null</span>, <span class="built_in">module</span>.default))</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'artists/:id'</span>,</div><div class="line">      getComponent(location, cb) &#123;</div><div class="line">        System.import(<span class="string">'./components/artists/ArtistDetail'</span>)</div><div class="line">          .then(<span class="function"><span class="params">module</span> =&gt;</span> cb(<span class="literal">null</span>, <span class="built_in">module</span>.default))</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> Routes = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Router</span> <span class="attr">history</span>=<span class="string">&#123;hashHistory&#125;</span> <span class="attr">routes</span>=<span class="string">&#123;rootRoute&#125;</span> /&gt;</span></span></div><div class="line">  );</div><div class="line">&#125;;</div><div class="line"></div><div class="line">export default Routes;</div></pre></td></tr></table></figure>
<p>然后执行 build 命令，可以发现我们的 bundle 文件又瘦身了，并且新增了几个文件</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/webpack%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BD.png" alt="webpack按需加载代码"></p>
<p>将 HTML 文件在浏览器中打开，当点击路由跳转时，可以在开发者工具中的 Network 一栏中看到加载了一个 JS 文件。</p>
<p>首页</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/9/17/a5a9c677fc770d8a99bbed9e79fdd730?imageView2/0/w/1280/h/960" alt="webpack首页加载"></p>
<p>点击右上角 Random Artist 以后</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/9/17/93e7c9d86eeb7076b6f5e7434b0012e9?imageView2/0/w/1280/h/960" alt="点击右上角 Random Artist 以后"></p>
<h2 id="自动刷新"><a href="#自动刷新" class="headerlink" title="自动刷新"></a>自动刷新</h2><p>每次更新代码都需要执行依次 build，并且还要等上一会很麻烦，这一小节介绍如何使用自动刷新的功能。</p>
<p>首先安装插件</p>
<blockquote>
<p>npm i –save-dev webpack-dev-server</p>
</blockquote>
<p>然后修改 packet.json 文件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"build"</span>: <span class="string">"webpack"</span>,</div><div class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --open"</span></div><div class="line">  &#125;,</div></pre></td></tr></table></figure>
<p>现在直接执行 <code>npm run dev</code> 可以发现浏览器自动打开了一个空的页面，并且在命令行中也多了新的输出</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/9/17/43f5b70bd82152ce21379120dfab8d71?imageView2/0/w/1280/h/960" alt=""></p>
<p>等待编译完成以后，修改 JS 或者 CSS 文件，可以发现 webpack 自动帮我们完成了编译，并且只更新了需要更新的代码</p>
<p><img src="https://user-gold-cdn.xitu.io/2017/9/17/7a5769363d0782abc59902d370c52472?imageView2/0/w/1280/h/960" alt=""></p>
<p>但是每次重新刷新页面对于 debug 来说很不友好，这时候就需要用到模块热替换了。但是因为项目中使用了 React，并且 Vue 或者其他框架都有自己的一套 hot-loader，所以这里就略过了，有兴趣的可以自己学习下。</p>
<h2 id="生成生产环境代码"><a href="#生成生产环境代码" class="headerlink" title="生成生产环境代码"></a>生成生产环境代码</h2><p>现在我们可以将之前所学和一些新加的插件整合在一起，build 生产环境代码。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i --save-dev url-loader optimize-css-assets-webpack-plugin file-loader extract-text-webpack-plugin</div></pre></td></tr></table></figure>
<p>修改 webpack 配置</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</div><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</div><div class="line"><span class="keyword">var</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</div><div class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</div><div class="line"><span class="keyword">var</span> OptimizeCSSPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> VENOR = [<span class="string">"faker"</span>,</div><div class="line">  <span class="string">"lodash"</span>,</div><div class="line">  <span class="string">"react"</span>,</div><div class="line">  <span class="string">"react-dom"</span>,</div><div class="line">  <span class="string">"react-input-range"</span>,</div><div class="line">  <span class="string">"react-redux"</span>,</div><div class="line">  <span class="string">"redux"</span>,</div><div class="line">  <span class="string">"redux-form"</span>,</div><div class="line">  <span class="string">"redux-thunk"</span>,</div><div class="line">  <span class="string">"react-router"</span></div><div class="line">]</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>: &#123;</div><div class="line">    <span class="attr">bundle</span>: <span class="string">'./src/index.js'</span>,</div><div class="line">    <span class="attr">vendor</span>: VENOR</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// 如果想修改 webpack-dev-server 配置，在这个对象里面修改</span></div><div class="line">  devServer: &#123;</div><div class="line">    <span class="attr">port</span>: <span class="number">8081</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: path.join(__dirname, <span class="string">'dist'</span>),</div><div class="line">    <span class="attr">filename</span>: <span class="string">'[name].[chunkhash].js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: [&#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</div><div class="line">        <span class="attr">use</span>: <span class="string">'babel-loader'</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</div><div class="line">        <span class="attr">use</span>: [&#123;</div><div class="line">            <span class="attr">loader</span>: <span class="string">'url-loader'</span>,</div><div class="line">            <span class="attr">options</span>: &#123;</div><div class="line">                <span class="attr">limit</span>: <span class="number">10000</span>,</div><div class="line">                <span class="attr">name</span>: <span class="string">'images/[name].[hash:7].[ext]'</span></div><div class="line">            &#125;</div><div class="line">        &#125;]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">        <span class="attr">loader</span>: ExtractTextPlugin.extract(&#123;</div><div class="line">            <span class="attr">fallback</span>: <span class="string">'style-loader'</span>,</div><div class="line">            <span class="attr">use</span>: [&#123;</div><div class="line">            <span class="comment">// 这边其实还可以使用 postcss 先处理下 CSS 代码</span></div><div class="line">                loader: <span class="string">'css-loader'</span></div><div class="line">            &#125;]</div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">    ]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</div><div class="line">      <span class="attr">name</span>: [<span class="string">'vendor'</span>, <span class="string">'manifest'</span>],</div><div class="line">      <span class="attr">minChunks</span>: <span class="literal">Infinity</span></div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist/*.js'</span>], &#123;</div><div class="line">      <span class="attr">verbose</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">dry</span>: <span class="literal">false</span></div><div class="line">    &#125;),</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">      <span class="attr">template</span>: <span class="string">'index.html'</span></div><div class="line">    &#125;),</div><div class="line">    <span class="comment">// 生成全局变量</span></div><div class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</div><div class="line">      <span class="string">"process.env.NODE_ENV"</span>: <span class="built_in">JSON</span>.stringify(<span class="string">"process.env.NODE_ENV"</span>)</div><div class="line">    &#125;),</div><div class="line">    <span class="comment">// 分离 CSS 代码</span></div><div class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"css/[name].[contenthash].css"</span>),</div><div class="line">    <span class="comment">// 压缩提取出的 CSS，并解决ExtractTextPlugin分离出的 JS 重复问题</span></div><div class="line">    <span class="keyword">new</span> OptimizeCSSPlugin(&#123;</div><div class="line">      <span class="attr">cssProcessorOptions</span>: &#123;</div><div class="line">        <span class="attr">safe</span>: <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line">    &#125;),</div><div class="line">    <span class="comment">// 压缩 JS 代码</span></div><div class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</div><div class="line">      <span class="attr">compress</span>: &#123;</div><div class="line">        <span class="attr">warnings</span>: <span class="literal">false</span></div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>修改 packet.json 文件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"build"</span>: <span class="string">"NODE_ENV=production webpack -p"</span>,</div><div class="line">    <span class="string">"dev"</span>: <span class="string">"webpack-dev-server --open"</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>执行 <code>npm run build</code></p>
<p><img src="https://user-gold-cdn.xitu.io/2017/9/17/ff8acf374946ee6db118117f22ec48f5?imageView2/0/w/1280/h/960" alt=""></p>
<p>可以看到我们在经历了这么多步以后，将 bundle 缩小到了只有 27.1KB，像 vendor 这种常用的库我们一般可以使用 CDN 的方式外链进来。</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>webpack 配置上有些实用的小点在上文没有提到，统一在这里提一下。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">resolve</span>: &#123;</div><div class="line">  <span class="comment">// 文件扩展名，写明以后就不需要每个文件写后缀</span></div><div class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.css'</span>, <span class="string">'.json'</span>],</div><div class="line"> <span class="comment">// 路径别名，比如这里可以使用 css 指向 static/css 路径</span></div><div class="line">    alias: &#123;</div><div class="line">      <span class="string">'@'</span>: resolve(<span class="string">'src'</span>),</div><div class="line">      <span class="string">'css'</span>: resolve(<span class="string">'static/css'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// 生成 source-map，用于打断点，这里有好几个选项</span></div><div class="line">  devtool: <span class="string">'#cheap-module-eval-source-map'</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>如果你是跟着本文一个个步骤敲下来的，那么大部分的 webpack 配置你应该都是可以看懂了，并且自己应该也知道如何去配置。谢谢大家看到这里，<a href="https://github.com/Modify01/webpack" target="_blank" rel="external">这是本项目对应的仓库</a>，每个小节基本都对应了一次 commit。</p>
<p>文章较长，有错误也难免，如果你发现了任何问题或者我有任何表述的不明白的地方，都可以留言给我。</p>
]]></content>
    
    <summary type="html">
    
      该文使用的 Webpack 版本为 3.6.0，本文分两部分。第一步是简单的使用 webpack，第二部分通过一个真实项目来配置 webpack，没有使用任何的 CLI，都是一步步配置直到完成生产代码的打包
    
    </summary>
    
      <category term="webpack" scheme="http://yoursite.com/categories/webpack/"/>
    
    
      <category term="前端构建工具" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>js 的正则表达式</title>
    <link href="http://yoursite.com/2017/09/11/js%20%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/09/11/js 的正则表达式/</id>
    <published>2017-09-11T02:17:02.000Z</published>
    <updated>2017-09-11T03:55:18.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><center style="font-size: 30px"><code>js 的正则表达式</code></center>

<hr>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><blockquote>
<p>一种几乎可以在所有的程序设计语言里和所有的计算机平台上使用的文字处理工具。它可以用来查找特定的信息（搜索），也可以用来查找并编辑特定的信息（替换）。<br>核心是 匹配，匹配位置或者匹配字符</p>
</blockquote>
<p>先简单的介绍一下语法:</p>
<h2 id="基本元字符"><a href="#基本元字符" class="headerlink" title="基本元字符"></a>基本元字符</h2><p>1, <code>.</code>： 匹配除了换行符之外的任何单个字符</p>
<p>2,  <code>\</code>： 在非特殊字符之前的反斜杠表示下一个字符是特殊的，不能从字面上解释。例如，没有前<code>\</code>的<code>&#39;b&#39;</code>通常匹配小写<code>&#39;b&#39;</code>，无论它们出现在哪里。如果加了’\’,这个字符变成了一个特殊意义的字符，反斜杠也可以将其后的特殊字符，转义为字面量。例如，模式 <code>/a*/</code> 代表会匹配 0 个或者多个 a。相反，模式 <code>/a\*/</code> 将 <code>&#39;*&#39;</code> 的特殊性移除，从而可以匹配像 <code>&quot;a*&quot;</code> 这样的字符串。</p>
<p>3,  <code>|</code> ： 逻辑或操作符</p>
<p>4,  <code>[]</code> ：定义一个字符集合，匹配字符集合中的一个字符，在字符集合里面像 .，\这些字符都表示其本身</p>
<p>5,  <code>[^]</code>：对上面一个集合取非</p>
<p>6,  <code>-</code> ：定义一个区间，例如<code>[A-Z]</code>，其首尾字符在 ASCII 字符集里面</p>
<h2 id="数量元字符"><a href="#数量元字符" class="headerlink" title="数量元字符"></a>数量元字符</h2><p>1, <code>{m,n}</code> ：匹配前面一个字符至少 m 次至多 n 次重复，还有<code>{m}</code>表示匹配 m 次，<code>{m,}</code>表示至少 m 次</p>
<p>2, <code>+</code> ： 匹配前面一个表达式一次或者多次，相当于 <code>{1,}</code>，记忆方式追加<code>(+)</code>，起码得有一次</p>
<p>3, <code>*</code>： 匹配前面一个表达式零次或者多次，相当于 <code>{0,}</code>，记忆方式乘法<code>(*)</code>，可以一次都没有</p>
<p>4, <code>?</code> ： 单独使用匹配前面一个表达式零次或者一次，相当于 <code>{0,1}</code>，记忆方式，有吗？，有<code>(1)</code>或者没有<code>(1)</code>，如果跟在任何量词<code>*,+,?,{}</code>后面的时候将会使量词变为非贪婪模式（尽量匹配少的字符），默认是使用贪婪模式。比如对 “123abc” 应用 <code>/\d+/</code> 将会返回 “123”，如果使用 <code>/\d+?/</code>,那么就只会匹配到 “1”。</p>
<h2 id="位置元字符"><a href="#位置元字符" class="headerlink" title="位置元字符"></a>位置元字符</h2><p>1, <code>^</code>： 单独使用匹配表达式的开始</p>
<p>2, <code>\$</code> ： 匹配表达式的结束</p>
<p>3, <code>\b</code>：匹配单词边界</p>
<p>4, <code>\B</code>：匹配非单词边界</p>
<p>5, <code>(?=p)</code>：匹配 p 前面的位置</p>
<p>6, <code>(?!p)</code>：匹配不是 p 前面的位置</p>
<h2 id="特殊元字符"><a href="#特殊元字符" class="headerlink" title="特殊元字符"></a>特殊元字符</h2><p>1, <code>\d</code>：<code>[0-9]</code>，表示一位数字，记忆方式 digit</p>
<p>2, <code>\D</code>：<code>[^0-9]</code>，表示一位非数字</p>
<p>3, <code>\s</code>：<code>[\t\v\n\r\f]</code>，表示空白符，包括空格，水平制表符<code>（\t）</code>，垂直制表符<code>（\v）</code>，换行符<code>（\n）</code>，回车符<code>（\r）</code>，换页符<code>（\f）</code>，记忆方式 space character</p>
<p>4, <code>\S</code>：<code>[^\t\v\n\r\f]</code>，表示非空白符</p>
<p>5, <code>\w</code>：<code>[0-9a-zA-Z]</code>，表示数字大小写字母和下划线，记忆方式 word</p>
<p>6, <code>\W</code>：<code>[^0-9a-zA-Z]</code>，表示非单词字符</p>
<h2 id="标志字符"><a href="#标志字符" class="headerlink" title="标志字符"></a>标志字符</h2><p>1, <code>g</code> : 全局搜索 记忆方式global<br>2, <code>i</code> ：不区分大小写 记忆方式 ignore<br>3, <code>m</code> ：多行搜索</p>
<h2 id="在-js-中的使用"><a href="#在-js-中的使用" class="headerlink" title="在 js 中的使用"></a><center style="font-size: 30px"><code>在 js 中的使用</code></center></h2><hr>
<h3 id="支持正则的-String-对象的方法"><a href="#支持正则的-String-对象的方法" class="headerlink" title="支持正则的 String 对象的方法"></a>支持正则的 String 对象的方法</h3><h4 id="1-search"><a href="#1-search" class="headerlink" title="1. search"></a>1. search</h4><p>search 接受一个正则作为参数，如果参入的参数不是正则会隐式的使用 <code>new RegExp(obj)</code>将其转换成一个正则，返回匹配到子串的起始位置，匹配不到返回-1</p>
<h4 id="2-match"><a href="#2-match" class="headerlink" title="2. match"></a>2. match</h4><p>接受参数和上面的方法一致。返回值是依赖传入的正则是否包含 g ，如果没有 g 标识，那么 match 方法对 string 做一次匹配，如果没有找到任何匹配的文本时，match 会返回 null ，否则，会返回一个数组，数组第 0 个元素包含匹配到的文本，其余元素放的是正则捕获的文本，数组还包含两个对象，index 表示匹配文本在字符串中的位置，input 表示被解析的原始字符串。如果有 g 标识，则返回一个数组，包含每一次的匹配结果。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'For more information, see Chapter 3.4.5.1'</span>;</div><div class="line"><span class="keyword">var</span> re = <span class="regexp">/see (chapter \d+(\.\d)*)/i</span>;</div><div class="line"><span class="keyword">var</span> found = str.match(re);</div><div class="line"><span class="built_in">console</span>.log(found);</div><div class="line"><span class="comment">// (3) ["see Chapter 3.4.5.1", "Chapter 3.4.5.1", ".1", index: 22, input: "For more information, see Chapter 3.4.5.1"]</span></div><div class="line"><span class="comment">// 0:"see Chapter 3.4.5.1"</span></div><div class="line"><span class="comment">// 1:"Chapter 3.4.5.1"</span></div><div class="line"><span class="comment">// 2:".1"</span></div><div class="line"><span class="comment">// index:22</span></div><div class="line"><span class="comment">// input:"For more information, see Chapter 3.4.5.1"</span></div><div class="line"><span class="comment">// length:3</span></div><div class="line"><span class="comment">// __proto__:Array(0)</span></div><div class="line"></div><div class="line"><span class="comment">// 'see Chapter 3.4.5.1' 是整个匹配。</span></div><div class="line"><span class="comment">// 'Chapter 3.4.5.1' 被'(chapter \d+(\.\d)*)'捕获。</span></div><div class="line"><span class="comment">// '.1' 是被'(\.\d)'捕获的最后一个值。</span></div><div class="line"><span class="comment">// 'index' 属性(22) 是整个匹配从零开始的索引。</span></div><div class="line"><span class="comment">// 'input' 属性是被解析的原始字符串。</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'</span>;</div><div class="line"><span class="keyword">var</span> regexp = <span class="regexp">/[A-E]/gi</span>;</div><div class="line"><span class="keyword">var</span> matches_array = str.match(regexp);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(matches_array);</div><div class="line"><span class="comment">// ['A', 'B', 'C', 'D', 'E', 'a', 'b', 'c', 'd', 'e']</span></div></pre></td></tr></table></figure>
<h4 id="3-replace"><a href="#3-replace" class="headerlink" title="3. replace"></a>3. replace</h4><p>接受两个参数，第一个是要被替换的文本，可以是正则也可以是字符串，如果是字符串的时候不会被转换成正则，而是作为检索的直接量文本。第二个是替换成的文本，可以是字符串或者函数，字符串可以使用一些特殊的变量来替代前面捕获到的子串</p>
<table>
<thead>
<tr>
<th style="text-align:center">变量名</th>
<th style="text-align:center">代表的值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">  $$</td>
<td style="text-align:center">插入一个 “$”。                          </td>
</tr>
<tr>
<td style="text-align:center">  $&amp;</td>
<td style="text-align:center">插入匹配的子串。                         </td>
</tr>
<tr>
<td style="text-align:center">  $`</td>
<td style="text-align:center">插入当前匹配的子串左边的内容。                         </td>
</tr>
<tr>
<td style="text-align:center">  $’</td>
<td style="text-align:center">插入当前匹配的子串右边的内容。                          </td>
</tr>
<tr>
<td style="text-align:center">  $n</td>
<td style="text-align:center">第一个参数是RegExp对象,n是个小于100的非负整数,那么插入第n个括号匹配的字符串。</td>
</tr>
</tbody>
</table>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> re = <span class="regexp">/(\w+)\s(\w+)/</span>;</div><div class="line"><span class="keyword">var</span> str = <span class="string">"John Smith"</span>;</div><div class="line"><span class="keyword">var</span> newstr = str.replace(re, <span class="string">"$2, $1"</span>);</div><div class="line"><span class="comment">// Smith, John</span></div><div class="line"><span class="built_in">console</span>.log(newstr);</div></pre></td></tr></table></figure>
<p>如果是函数的话，函数入参如下，返回替换成的文本</p>
<table>
<thead>
<tr>
<th style="text-align:left">变量名</th>
<th style="text-align:center">代表的值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">  match</td>
<td style="text-align:center">匹配的子串。（对应于上述的$&amp;。）                          </td>
</tr>
<tr>
<td style="text-align:left">  p1,p2,…</td>
<td style="text-align:center">假如replace()方法的第一个参数是一个RegExp 对象，则代表第n个括号匹配的字符串。（对应于上述的$1，$2等。）                         </td>
</tr>
<tr>
<td style="text-align:left">  offset</td>
<td style="text-align:center">匹配到的子字符串在原字符串中的偏移量。（比如，如果原字符串是“abcd”，匹配到的子字符串是“bc”，那么这个参数将是1）                                                 </td>
</tr>
<tr>
<td style="text-align:left">  string</td>
<td style="text-align:center">被匹配的原字符串。</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      js中的正则表达式使用教程
    
    </summary>
    
      <category term="正则表达式" scheme="http://yoursite.com/categories/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>剖析Vue原理&amp;实现双向绑定MVVM</title>
    <link href="http://yoursite.com/2017/09/07/%E5%89%96%E6%9E%90Vue%E5%8E%9F%E7%90%86&amp;%E5%AE%9E%E7%8E%B0%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9AMVVM/"/>
    <id>http://yoursite.com/2017/09/07/剖析Vue原理&amp;实现双向绑定MVVM/</id>
    <published>2017-09-07T06:36:02.000Z</published>
    <updated>2017-09-07T08:55:08.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><center style="font-size: 30px"><code>剖析Vue原理&amp;实现双向绑定MVVM</code></center>

<blockquote>
<p>本文能帮你做什么？<br>1、了解vue的双向数据绑定原理以及核心代码模块<br>2、缓解好奇心的同时了解如何实现双向绑定<br>为了便于说明原理与实现，本文相关代码主要摘自<a href="https://github.com/vuejs/vue" target="_blank" rel="external">vue</a>源码, 并进行了简化改造，相对较简陋，并未考虑到数组的处理、数据的循环依赖等，也难免存在一些问题，欢迎大家指正。不过这些并不会影响大家的阅读和理解，相信看完本文后对大家在阅读vue源码的时候会更有帮助&lt;<br>本文所有相关代码均在github上面可找到 <a href="https://github.com/DMQ/mvvm" target="_blank" rel="external">https://github.com/DMQ/mvvm</a></p>
</blockquote>
<p>相信大家对mvvm双向绑定应该都不陌生了，一言不合上代码，下面先看一个本文最终实现的效果吧，和vue一样的语法，如果还不了解双向绑定，猛戳<a href="https://www.google.com.hk/search?q=%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A" target="_blank" rel="external">Google</a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mvvm-app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"word"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;word&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sayHi"</span>&gt;</span>change model<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/observer.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/watcher.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/compile.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./js/mvvm.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> MVVM(&#123;</div><div class="line">        <span class="attr">el</span>: <span class="string">'#mvvm-app'</span>,</div><div class="line">        <span class="attr">data</span>: &#123;</div><div class="line">            <span class="attr">word</span>: <span class="string">'Hello World!'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">methods</span>: &#123;</div><div class="line">            <span class="attr">sayHi</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">this</span>.word = <span class="string">'Hi, everybody!'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>效果:<br><img src="http://orzuutv5f.bkt.clouddn.com/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E6%95%88%E6%9E%9C.gif" alt=""></p>
<h2 id="几种实现双向绑定的做法"><a href="#几种实现双向绑定的做法" class="headerlink" title="几种实现双向绑定的做法"></a>几种实现双向绑定的做法</h2><p>目前几种主流的mvc(vm)框架都实现了单向数据绑定，而我所理解的双向数据绑定无非就是在单向绑定的基础上给可输入元素（input、textare等）添加了change(input)事件，来动态修改model和 view，并没有多高深。所以无需太过介怀是实现的单向或双向绑定。</p>
<p>实现数据绑定的做法有大致如下几种：</p>
<blockquote>
<p>发布者-订阅者模式（backbone.js）</p>
<p>脏值检查（angular.js） </p>
<p>数据劫持（vue.js）</p>
</blockquote>
 <left style="font-size: 14px;font-weight: bold;">发布者-订阅者模式:</left>一般通过sub, pub的方式实现数据和视图的绑定监听，更新数据方式通常做法是<code>vm.set(&#39;property&#39;, value)</code>，这里有篇文章讲的比较详细，有兴趣可点<a href="http://www.html-js.com/article/Study-of-twoway-data-binding-JavaScript-talk-about-JavaScript-every-day" target="_blank" rel="external">这里</a><br><br>这种方式现在毕竟太low了，我们更希望通过 <code>vm.property = value</code> 这种方式更新数据，同时自动更新视图，于是有了下面两种方式<br><br><left style="font-size: 14px;font-weight: bold;">脏值检查:</left> angular.js 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 <code>setInterval()</code> 定时轮询检测数据变动，当然Google不会这么low，angular只有在指定的事件触发时进入脏值检测，大致如下：<br><br>- DOM事件，譬如用户输入文本，点击按钮等。( ng-click )<br>- XHR响应事件 ( $http )<br>- 浏览器Location变更事件 ( $location )<br>- Timer事件( $timeout , $interval )<br>- 执行 $digest() 或 $apply()<br>- 数据劫持: vue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。<br><br><left style="font-size: 14px;font-weight: bold;">数据劫持:</left> vue.js 则是采用数据劫持结合发布者-订阅者模式的方式，通过<code>Object.defineProperty()</code>来劫持各个属性的<code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调。<br><br>## 思路整理<br><br>已经了解到vue是通过数据劫持的方式来做数据绑定的，其中最核心的方法便是通过<code>Object.defineProperty()</code>来实现对属性的劫持，达到监听数据变动的目的，无疑这个方法是本文中最重要、最基础的内容之一，如果不熟悉defineProperty，猛戳<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">这里</a><br><left style="font-size: 16px;font-weight: bold;">整理了一下，要实现mvvm的双向绑定，就必须要实现以下几点：</left>

<p>1, 实现一个数据监听器Observer，能够对数据对象的所有属性进行监听，如有变动可拿到最新值并通知订阅者<br>2, 实现一个指令解析器Compile，对每个元素节点的指令进行扫描和解析，根据指令模板替换数据，以及绑定相应的更新函数<br>3, 实现一个Watcher，作为连接Observer和Compile的桥梁，能够订阅并收到每个属性变动的通知，执行指令绑定的相应回调函数，从而更新视图<br>4, mvvm入口函数，整合以上三者</p>
<p>上述流程如图所示：<br><img src="http://orzuutv5f.bkt.clouddn.com/mvvm%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="数据绑定流程图"></p>
<h2 id="实现Observer"><a href="#实现Observer" class="headerlink" title="实现Observer"></a>实现Observer</h2><p>ok, 思路已经整理完毕，也已经比较明确相关逻辑和模块功能了，let’s do it<br>我们知道可以利用<code>Obeject.defineProperty()</code>来监听属性变动<br>那么将需要observe的数据对象进行递归遍历，包括子属性对象的属性，都加上<code>setter</code>和<code>getter</code><br>这样的话，给这个对象的某个值赋值，就会触发<code>setter</code>，那么就能监听到了数据变化。。相关代码可以是这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = &#123;<span class="attr">name</span>: <span class="string">'kindeng'</span>&#125;;</div><div class="line">observe(data);</div><div class="line">data.name = <span class="string">'dmq'</span>; <span class="comment">// 哈哈哈，监听到值变化了 kindeng --&gt; dmq</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!data || <span class="keyword">typeof</span> data !== <span class="string">'object'</span>) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 取出所有属性遍历</span></div><div class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">        defineReactive(data, key, data[key]);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</div><div class="line">    observe(val); <span class="comment">// 监听子属性</span></div><div class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</div><div class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">// 可枚举</span></div><div class="line">        configurable: <span class="literal">false</span>, <span class="comment">// 不能再define</span></div><div class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> val;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">set</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'哈哈哈，监听到值变化了 '</span>, val, <span class="string">' --&gt; '</span>, newVal);</div><div class="line">            val = newVal;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样我们已经可以监听每个数据的变化了，那么监听到变化之后就是怎么通知订阅者了，所以接下来我们需要实现一个消息订阅器，很简单，维护一个数组，用来收集订阅者，数据变动触发notify，再调用订阅者的update方法，代码改善之后是这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ... 省略</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">data, key, val</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> dep = <span class="keyword">new</span> Dep();</div><div class="line">    observe(val); <span class="comment">// 监听子属性</span></div><div class="line"></div><div class="line">    <span class="built_in">Object</span>.defineProperty(data, key, &#123;</div><div class="line">        <span class="comment">// ... 省略</span></div><div class="line">        set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (val === newVal) <span class="keyword">return</span>;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'哈哈哈，监听到值变化了 '</span>, val, <span class="string">' --&gt; '</span>, newVal);</div><div class="line">            val = newVal;</div><div class="line">            dep.notify(); <span class="comment">// 通知所有订阅者</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Dep</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.subs = [];</div><div class="line">&#125;</div><div class="line">Dep.prototype = &#123;</div><div class="line">    <span class="attr">addSub</span>: <span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.subs.push(sub);</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">notify</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</div><div class="line">            sub.update();</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>那么问题来了，谁是订阅者？怎么往订阅器添加订阅者？<br>没错，上面的思路整理中我们已经明确订阅者应该是Watcher, 而且<code>var dep = new Dep();</code>是在 <code>defineReactive</code>方法内部定义的，所以想通过dep添加订阅者，就必须要在闭包内操作，所以我们可以在 <code>getter</code>里面动手脚：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Observer.js</span></div><div class="line"><span class="comment">// ...省略</span></div><div class="line"><span class="built_in">Object</span>.defineProperty(data, key, &#123;</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 由于需要在闭包内添加watcher，所以通过Dep定义一个全局target属性，暂存watcher, 添加完移除</span></div><div class="line">        Dep.target &amp;&amp; dep.addDep(Dep.target);</div><div class="line">        <span class="keyword">return</span> val;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ... 省略</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// Watcher.js</span></div><div class="line">Watcher.prototype = &#123;</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">        Dep.target = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">this</span>.value = data[key];    <span class="comment">// 这里会触发属性的getter，从而添加订阅者</span></div><div class="line">        Dep.target = <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里已经实现了一个Observer了，已经具备了监听数据和数据变化通知订阅者的功能，完整代码。那么接下来就是实现Compile了</p>
<h2 id="实现Compile"><a href="#实现Compile" class="headerlink" title="实现Compile"></a>实现Compile</h2><p>compile主要做的事情是解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图，如图所示：</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/Compile%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A.png" alt="实现Compile"></p>
<p>因为遍历解析的过程有多次操作dom节点，为提高性能和效率，会先将跟节点<code>el</code>转换成文档碎片<code>fragment</code>进行解析编译操作，解析完成，再将<code>fragment</code>添加回原来的真实dom节点中</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Compile</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.$el = <span class="keyword">this</span>.isElementNode(el) ? el : <span class="built_in">document</span>.querySelector(el);</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.$el) &#123;</div><div class="line">        <span class="keyword">this</span>.$fragment = <span class="keyword">this</span>.node2Fragment(<span class="keyword">this</span>.$el);</div><div class="line">        <span class="keyword">this</span>.init();</div><div class="line">        <span class="keyword">this</span>.$el.appendChild(<span class="keyword">this</span>.$fragment);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Compile.prototype = &#123;</div><div class="line">    <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.compileElement(<span class="keyword">this</span>.$fragment); &#125;,</div><div class="line">    <span class="attr">node2Fragment</span>: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment(), child;</div><div class="line">        <span class="comment">// 将原生节点拷贝到fragment</span></div><div class="line">        <span class="keyword">while</span> (child = el.firstChild) &#123;</div><div class="line">            fragment.appendChild(child);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> fragment;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>compileElement方法将遍历所有节点及其子节点，进行扫描解析编译，调用对应的指令渲染函数进行数据渲染，并调用对应的指令更新函数进行绑定，详看代码及注释说明：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">Compile.prototype = &#123;</div><div class="line">    <span class="comment">// ... 省略</span></div><div class="line">    compileElement: <span class="function"><span class="keyword">function</span>(<span class="params">el</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> childNodes = el.childNodes, me = <span class="keyword">this</span>;</div><div class="line">        [].slice.call(childNodes).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> text = node.textContent;</div><div class="line">            <span class="keyword">var</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;    <span class="comment">// 表达式文本</span></div><div class="line">            <span class="comment">// 按元素节点方式编译</span></div><div class="line">            <span class="keyword">if</span> (me.isElementNode(node)) &#123;</div><div class="line">                me.compile(node);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (me.isTextNode(node) &amp;&amp; reg.test(text)) &#123;</div><div class="line">                me.compileText(node, <span class="built_in">RegExp</span>.$<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 遍历编译子节点</span></div><div class="line">            <span class="keyword">if</span> (node.childNodes &amp;&amp; node.childNodes.length) &#123;</div><div class="line">                me.compileElement(node);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">compile</span>: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> nodeAttrs = node.attributes, me = <span class="keyword">this</span>;</div><div class="line">        [].slice.call(nodeAttrs).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">attr</span>) </span>&#123;</div><div class="line">            <span class="comment">// 规定：指令以 v-xxx 命名</span></div><div class="line">            <span class="comment">// 如 &lt;span v-text="content"&gt;&lt;/span&gt; 中指令为 v-text</span></div><div class="line">            <span class="keyword">var</span> attrName = attr.name;    <span class="comment">// v-text</span></div><div class="line">            <span class="keyword">if</span> (me.isDirective(attrName)) &#123;</div><div class="line">                <span class="keyword">var</span> exp = attr.value; <span class="comment">// content</span></div><div class="line">                <span class="keyword">var</span> dir = attrName.substring(<span class="number">2</span>);    <span class="comment">// text</span></div><div class="line">                <span class="keyword">if</span> (me.isEventDirective(dir)) &#123;</div><div class="line">                    <span class="comment">// 事件指令, 如 v-on:click</span></div><div class="line">                    compileUtil.eventHandler(node, me.$vm, exp, dir);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// 普通指令</span></div><div class="line">                    compileUtil[dir] &amp;&amp; compileUtil[dir](node, me.$vm, exp);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 指令处理集合</span></div><div class="line"><span class="keyword">var</span> compileUtil = &#123;</div><div class="line">    <span class="attr">text</span>: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.bind(node, vm, exp, <span class="string">'text'</span>);</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// ...省略</span></div><div class="line">    bind: <span class="function"><span class="keyword">function</span>(<span class="params">node, vm, exp, dir</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> updaterFn = updater[dir + <span class="string">'Updater'</span>];</div><div class="line">        <span class="comment">// 第一次初始化视图</span></div><div class="line">        updaterFn &amp;&amp; updaterFn(node, vm[exp]);</div><div class="line">        <span class="comment">// 实例化订阅者，此操作会在对应的属性消息订阅器中添加了该订阅者watcher</span></div><div class="line">        <span class="keyword">new</span> Watcher(vm, exp, <span class="function"><span class="keyword">function</span>(<span class="params">value, oldValue</span>) </span>&#123;</div><div class="line">            <span class="comment">// 一旦属性值有变化，会收到通知执行此更新函数，更新视图</span></div><div class="line">            updaterFn &amp;&amp; updaterFn(node, value, oldValue);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 更新函数</span></div><div class="line"><span class="keyword">var</span> updater = &#123;</div><div class="line">    <span class="attr">textUpdater</span>: <span class="function"><span class="keyword">function</span>(<span class="params">node, value</span>) </span>&#123;</div><div class="line">        node.textContent = <span class="keyword">typeof</span> value == <span class="string">'undefined'</span> ? <span class="string">''</span> : value;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ...省略</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里通过递归遍历保证了每个节点及子节点都会解析编译到，包括了{ { } }表达式声明的文本节点。指令的声明规定是通过特定前缀的节点属性来标记，如<code>&lt;span v-text=\&quot;content\&quot; other-attr</code>中<code>v-text</code>便是指令，而<code>other-attr</code>不是指令，只是普通的属性。<br>监听数据、绑定更新函数的处理是在<code>compileUtil.bind()</code>这个方法中，通过<code>new Watcher()</code>添加回调来接收数据变化的通知</p>
<p>至此，一个简单的Compile就完成了，<a href="https://github.com/DMQ/mvvm/blob/master/js/compile.js" target="_blank" rel="external">完整代码</a>。接下来要看看Watcher这个订阅者的具体实现了</p>
<h2 id="实现Watcher"><a href="#实现Watcher" class="headerlink" title="实现Watcher"></a>实现Watcher</h2><p>Watcher订阅者作为Observer和Compile之间通信的桥梁，主要做的事情是:<br>1、在自身实例化时往属性订阅器(dep)里面添加自己<br>2、自身必须有一个update()方法<br>3、待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。<br>如果有点乱，可以回顾下前面的思路整理</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">vm, exp, cb</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.cb = cb;</div><div class="line">    <span class="keyword">this</span>.vm = vm;</div><div class="line">    <span class="keyword">this</span>.exp = exp;</div><div class="line">    <span class="comment">// 此处为了触发属性的getter，从而在dep添加自己，结合Observer更易理解</span></div><div class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.get(); </div><div class="line">&#125;</div><div class="line">Watcher.prototype = &#123;</div><div class="line">    <span class="attr">update</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.run();    <span class="comment">// 属性值变化收到通知</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">run</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> value = <span class="keyword">this</span>.get(); <span class="comment">// 取到最新值</span></div><div class="line">        <span class="keyword">var</span> oldVal = <span class="keyword">this</span>.value;</div><div class="line">        <span class="keyword">if</span> (value !== oldVal) &#123;</div><div class="line">            <span class="keyword">this</span>.value = value;</div><div class="line">            <span class="keyword">this</span>.cb.call(<span class="keyword">this</span>.vm, value, oldVal); <span class="comment">// 执行Compile中绑定的回调，更新视图</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        Dep.target = <span class="keyword">this</span>;    <span class="comment">// 将当前订阅者指向自己</span></div><div class="line">        <span class="keyword">var</span> value = <span class="keyword">this</span>.vm[exp];    <span class="comment">// 触发getter，添加自己到属性订阅器中</span></div><div class="line">        Dep.target = <span class="literal">null</span>;    <span class="comment">// 添加完毕，重置</span></div><div class="line">        <span class="keyword">return</span> value;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 这里再次列出Observer和Dep，方便理解</span></div><div class="line"><span class="built_in">Object</span>.defineProperty(data, key, &#123;</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 由于需要在闭包内添加watcher，所以可以在Dep定义一个全局target属性，暂存watcher, 添加完移除</span></div><div class="line">        Dep.target &amp;&amp; dep.addDep(Dep.target);</div><div class="line">        <span class="keyword">return</span> val;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// ... 省略</span></div><div class="line">&#125;);</div><div class="line">Dep.prototype = &#123;</div><div class="line">    <span class="attr">notify</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sub</span>) </span>&#123;</div><div class="line">            sub.update(); <span class="comment">// 调用订阅者的update方法，通知变化</span></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>实例化<code>Watcher</code>的时候，调用<code>get()</code>方法，通过<code>Dep.target = watcherInstance</code>标记订阅者是当前watcher实例，强行触发属性定义的<code>getter</code>方法，<code>getter</code>方法执行的时候，就会在属性的订阅器<code>dep</code>添加当前watcher实例，从而在属性值有变化的时候，watcherInstance就能收到更新通知。</p>
<p>ok, Watcher也已经实现了，<a href="https://github.com/DMQ/mvvm/blob/master/js/watcher.js" target="_blank" rel="external">完整代码</a>。<br>基本上vue中数据绑定相关比较核心的几个模块也是这几个，<a href="https://github.com/vuejs/vue" target="_blank" rel="external">猛戳这里</a> , 在src 目录可找到vue源码。</p>
<p>最后来讲讲MVVM入口文件的相关逻辑和实现吧，相对就比较简单了~</p>
<h2 id="实现MVVM"><a href="#实现MVVM" class="headerlink" title="实现MVVM"></a>实现MVVM</h2><p>MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据model变更的双向绑定效果。</p>
<p>一个简单的MVVM构造器是这样子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MVVM</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.$options = options;</div><div class="line">    <span class="keyword">var</span> data = <span class="keyword">this</span>._data = <span class="keyword">this</span>.$options.data;</div><div class="line">    observe(data, <span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.$compile = <span class="keyword">new</span> Compile(options.el || <span class="built_in">document</span>.body, <span class="keyword">this</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但是这里有个问题，从代码中可看出监听的数据对象是options.data，每次需要更新视图，则必须通过<code>var vm = new MVVM({data:{name: &#39;kindeng&#39;}}); vm._data.name = &#39;dmq&#39;</code>; 这样的方式来改变数据。</p>
<p>显然不符合我们一开始的期望，我们所期望的调用方式应该是这样的：<br><code>var vm = new MVVM({data: {name: &#39;kindeng&#39;}}); vm.name = &#39;dmq&#39;;</code></p>
<p>所以这里需要给MVVM实例添加一个属性代理的方法，使访问vm的属性代理为访问vm._data的属性，改造后的代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MVVM</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.$options = options;</div><div class="line">    <span class="keyword">var</span> data = <span class="keyword">this</span>._data = <span class="keyword">this</span>.$options.data, me = <span class="keyword">this</span>;</div><div class="line">    <span class="comment">// 属性代理，实现 vm.xxx -&gt; vm._data.xxx</span></div><div class="line">    <span class="built_in">Object</span>.keys(data).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">        me._proxy(key);</div><div class="line">    &#125;);</div><div class="line">    observe(data, <span class="keyword">this</span>);</div><div class="line">    <span class="keyword">this</span>.$compile = <span class="keyword">new</span> Compile(options.el || <span class="built_in">document</span>.body, <span class="keyword">this</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">MVVM.prototype = &#123;</div><div class="line">    <span class="attr">_proxy</span>: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> me = <span class="keyword">this</span>;</div><div class="line">        <span class="built_in">Object</span>.defineProperty(me, key, &#123;</div><div class="line">            <span class="attr">configurable</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">enumerable</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> <span class="title">proxyGetter</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> me._data[key];</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> <span class="title">proxySetter</span>(<span class="params">newVal</span>) </span>&#123;</div><div class="line">                me._data[key] = newVal;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这里主要还是利用了<code>Object.defineProperty()</code>这个方法来劫持了vm实例对象的属性的读写权，使读写vm实例的属性转成读写了<code>vm._data</code>的属性值，达到鱼目混珠的效果，哈哈</p>
<p>至此，全部模块和功能已经完成了，如本文开头所承诺的两点。一个简单的MVVM模块已经实现，其思想和原理大部分来自经过简化改造的<a href="https://github.com/vuejs/vue" target="_blank" rel="external">vue源码</a>，<a href="https://github.com/DMQ/mvvm" target="_blank" rel="external">猛戳这里</a>可以看到本文的所有相关代码。<br>由于本文内容偏实践，所以代码量较多，且不宜列出大篇幅代码，所以建议想深入了解的童鞋可以再次结合本文源代码来进行阅读，这样会更加容易理解和掌握。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文主要围绕“几种实现双向绑定的做法”、“实现Observer”、“实现Compile”、“实现Watcher”、“实现MVVM”这几个模块来阐述了双向绑定的原理和实现。并根据思路流程渐进梳理讲解了一些细节思路和比较关键的内容点，以及通过展示部分关键代码讲述了怎样一步步实现一个双向绑定MVVM。文中肯定会有一些不够严谨的思考和错误，欢迎大家指正，有兴趣欢迎一起探讨和改进~</p>
<p>最后，感谢您的阅读！</p>
]]></content>
    
    <summary type="html">
    
      剖析Vue原理&amp;实现双向绑定MVVM
    
    </summary>
    
      <category term="双向数据绑定" scheme="http://yoursite.com/categories/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    
    
      <category term="Vuejs" scheme="http://yoursite.com/tags/Vuejs/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="双向数据绑定" scheme="http://yoursite.com/tags/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>关于eslint使用规则，和各种报错对应规则</title>
    <link href="http://yoursite.com/2017/09/07/%E5%85%B3%E4%BA%8Eeslint%E4%BD%BF%E7%94%A8%E8%A7%84%E5%88%99%EF%BC%8C%E5%92%8C%E5%90%84%E7%A7%8D%E6%8A%A5%E9%94%99%E5%AF%B9%E5%BA%94%E8%A7%84%E5%88%99/"/>
    <id>http://yoursite.com/2017/09/07/关于eslint使用规则，和各种报错对应规则/</id>
    <published>2017-09-07T02:03:02.000Z</published>
    <updated>2017-09-07T02:41:50.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>关于eslint使用规则，和各种报错对应规则</code></center></p>
<hr>
<p><img src="http://orzuutv5f.bkt.clouddn.com/eslint.png" alt="eslint"></p>
<blockquote>
<p>在用vue2.0写项目时，由于vue-cli脚 架自动带了带了代码规范监测，稍微不小心就会出现一些Warning,这时就需要，根据自己习惯的代码规范，用一下代码进行对Eslint规范的一些忽略。下面详细介绍一下：</p>
</blockquote>
<p>ESLint 由 JavaScript 红宝书 作者 Nicholas C. Zakas 编写， 2013 年发布第一个版本。 NCZ 的初衷不是重复造一个轮子，而是在实际需求得不到 JSHint 团队响应 的情况下做出的选择：以可扩展、每条规则独立、不内置编码风格为理念编写一个 lint 工具。</p>
<hr>
<h2 id="ESLint-主要有以下特点"><a href="#ESLint-主要有以下特点" class="headerlink" title="ESLint 主要有以下特点:"></a>ESLint 主要有以下特点:</h2><ul>
<li>默认规则包含所有 JSLint、JSHint 中存在的规则，易迁移；</li>
<li>规则可配置性高：可设置「警告」、「错误」两个 error 等级，或者直接禁用；</li>
<li>包含代码风格检测的规则（可以丢掉 JSCS 了）；</li>
<li>支持插件扩展、自定义规则。</li>
</ul>
<p>下面说一下如何配置：<br>比如，我写vue过程中，出现了下面的<code>warning</code>:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WARNING Compiled <span class="keyword">with</span> <span class="number">1</span> warnings11:<span class="number">26</span>:<span class="number">30</span>http:<span class="comment">//eslint.org/docs/rules/quotes Strings must use singlequote</span></div></pre></td></tr></table></figure>
<p>警告的意思就是字符串必须用单引号<br>如下图：</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/eslint%E8%AD%A6%E5%91%8A1.png" alt=""></p>
<p>这时候，你就可以在.eslintrc.js配置你的规则rule</p>
<blockquote>
<p>“quotes”: [1, “single”],//引号类型 `` “” ‘’<br>Use /<em> eslint-disable </em>/ to ignore all warnings in a file.</p>
</blockquote>
<p>还有一种万能方法，就是在报错的JS文件中第一行写上</p>
<blockquote>
<p>/<em> eslint-disable </em>/</p>
</blockquote>
<p>如下图</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/elint%E8%AD%A6%E5%91%8A%E6%BA%90%E7%A0%811.png" alt=""></p>
<p>这样就可以和Eslint携手并进了</p>
<p><em><em>配置(我主要用第三种方法,为了方便查看，特记录如下:)</em></em></p>
<p>可以通过以下三种方式配置 ESLint:</p>
<ul>
<li><p>使用 .eslintrc 文件（支持 JSON 和 YAML 两种语法）；</p>
</li>
<li><p>在 package.json 中添加 eslintConfig 配置块；直接在代码文件中定义。</p>
</li>
<li><p>以下是<code>.eslintrc</code> 文件示例和解释：<code>为了方便查看，特记录如下,需要用的规则，到时候直接搜索就可以了，简直开心极了：</code></p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div></pre></td><td class="code"><pre><div class="line">&#123;  </div><div class="line">  <span class="string">"env"</span>: &#123;  </div><div class="line">    <span class="string">"browser"</span>: <span class="literal">true</span>,  </div><div class="line">    <span class="string">"node"</span>: <span class="literal">true</span>,  </div><div class="line">    <span class="string">"commonjs"</span>: <span class="literal">true</span>  </div><div class="line">  &#125;,  </div><div class="line">  <span class="string">"ecmaFeatures"</span>: &#123;  </div><div class="line">    <span class="comment">// lambda表达式  </span></div><div class="line">    <span class="string">"arrowFunctions"</span>: <span class="literal">true</span>,  </div><div class="line">    <span class="comment">// 解构赋值  </span></div><div class="line">    <span class="string">"destructuring"</span>: <span class="literal">true</span>,  </div><div class="line">    <span class="comment">// class  </span></div><div class="line">    <span class="string">"classes"</span>: <span class="literal">true</span>,  </div><div class="line">    <span class="comment">// http://es6.ruanyifeng.com/#docs/function#函数参数的默认值  </span></div><div class="line">    <span class="string">"defaultParams"</span>: <span class="literal">true</span>,  </div><div class="line">    <span class="comment">// 块级作用域，允许使用let const  </span></div><div class="line">    <span class="string">"blockBindings"</span>: <span class="literal">true</span>,  </div><div class="line">    <span class="comment">// 允许使用模块，模块内默认严格模式  </span></div><div class="line">    <span class="string">"modules"</span>: <span class="literal">true</span>,  </div><div class="line">    <span class="comment">// 允许字面量定义对象时，用表达式做属性名  </span></div><div class="line">    <span class="comment">// http://es6.ruanyifeng.com/#docs/object#属性名表达式  </span></div><div class="line">    <span class="string">"objectLiteralComputedProperties"</span>: <span class="literal">true</span>,  </div><div class="line">    <span class="comment">// 允许对象字面量方法名简写  </span></div><div class="line">    <span class="comment">/*var o = &#123; </span></div><div class="line">        method() &#123; </div><div class="line">          return "Hello!"; </div><div class="line">        &#125; </div><div class="line">     &#125;; </div><div class="line"> </div><div class="line">     等同于 </div><div class="line"> </div><div class="line">     var o = &#123; </div><div class="line">       method: function() &#123; </div><div class="line">         return "Hello!"; </div><div class="line">       &#125; </div><div class="line">     &#125;; </div><div class="line">    */  </div><div class="line">    <span class="string">"objectLiteralShorthandMethods"</span>: <span class="literal">true</span>,  </div><div class="line">    <span class="comment">/* </span></div><div class="line">      对象字面量属性名简写 </div><div class="line">      var foo = 'bar'; </div><div class="line">      var baz = &#123;foo&#125;; </div><div class="line">      baz // &#123;foo: "bar"&#125; </div><div class="line"> </div><div class="line">      // 等同于 </div><div class="line">      var baz = &#123;foo: foo&#125;; </div><div class="line">    */  </div><div class="line">    <span class="string">"objectLiteralShorthandProperties"</span>: <span class="literal">true</span>,  </div><div class="line">    <span class="comment">// http://es6.ruanyifeng.com/#docs/function#rest参数  </span></div><div class="line">    <span class="string">"restParams"</span>: <span class="literal">true</span>,  </div><div class="line">    <span class="comment">// http://es6.ruanyifeng.com/#docs/function#扩展运算符  </span></div><div class="line">    <span class="string">"spread"</span>: <span class="literal">true</span>,  </div><div class="line">    <span class="comment">// http://es6.ruanyifeng.com/#docs/iterator#for---of循环  </span></div><div class="line">    <span class="string">"forOf"</span>: <span class="literal">true</span>,  </div><div class="line">    <span class="comment">// http://es6.ruanyifeng.com/#docs/generator  </span></div><div class="line">    <span class="string">"generators"</span>: <span class="literal">true</span>,  </div><div class="line">    <span class="comment">// http://es6.ruanyifeng.com/#docs/string#模板字符串  </span></div><div class="line">    <span class="string">"templateStrings"</span>: <span class="literal">true</span>,  </div><div class="line">    <span class="string">"superInFunctions"</span>: <span class="literal">true</span>,  </div><div class="line">    <span class="comment">// http://es6.ruanyifeng.com/#docs/object#对象的扩展运算符  </span></div><div class="line">    <span class="string">"experimentalObjectRestSpread"</span>: <span class="literal">true</span>  </div><div class="line">  &#125;,  </div><div class="line">  </div><div class="line">  <span class="string">"rules"</span>: &#123;  </div><div class="line">    <span class="comment">// 定义对象的set存取器属性时，强制定义get  </span></div><div class="line">    <span class="string">"accessor-pairs"</span>: <span class="number">2</span>,  </div><div class="line">    <span class="comment">// 指定数组的元素之间要以空格隔开(,后面)， never参数：[ 之前和 ] 之后不能带空格，always参数：[ 之前和 ] 之后必须带空格  </span></div><div class="line">    <span class="string">"array-bracket-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],  </div><div class="line">    <span class="comment">// 在块级作用域外访问块内定义的变量是否报错提示  </span></div><div class="line">    <span class="string">"block-scoped-var"</span>: <span class="number">0</span>,  </div><div class="line">    <span class="comment">// if while function 后面的&#123;必须与if在同一行，java风格。  </span></div><div class="line">    <span class="string">"brace-style"</span>: [<span class="number">2</span>, <span class="string">"1tbs"</span>, &#123; <span class="string">"allowSingleLine"</span>: <span class="literal">true</span> &#125;],  </div><div class="line">    <span class="comment">// 双峰驼命名格式  </span></div><div class="line">    <span class="string">"camelcase"</span>: <span class="number">2</span>,  </div><div class="line">    <span class="comment">// 数组和对象键值对最后一个逗号， never参数：不能带末尾的逗号, always参数：必须带末尾的逗号，  </span></div><div class="line">    <span class="comment">// always-multiline：多行模式必须带逗号，单行模式不能带逗号  </span></div><div class="line">    <span class="string">"comma-dangle"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],  </div><div class="line">    <span class="comment">// 控制逗号前后的空格  </span></div><div class="line">    <span class="string">"comma-spacing"</span>: [<span class="number">2</span>, &#123; <span class="string">"before"</span>: <span class="literal">false</span>, <span class="string">"after"</span>: <span class="literal">true</span> &#125;],  </div><div class="line">    <span class="comment">// 控制逗号在行尾出现还是在行首出现  </span></div><div class="line">    <span class="comment">// http://eslint.org/docs/rules/comma-style  </span></div><div class="line">    <span class="string">"comma-style"</span>: [<span class="number">2</span>, <span class="string">"last"</span>],  </div><div class="line">    <span class="comment">// 圈复杂度  </span></div><div class="line">    <span class="string">"complexity"</span>: [<span class="number">2</span>,<span class="number">9</span>],  </div><div class="line">    <span class="comment">// 以方括号取对象属性时，[ 后面和 ] 前面是否需要空格, 可选参数 never, always  </span></div><div class="line">    <span class="string">"computed-property-spacing"</span>: [<span class="number">2</span>,<span class="string">"never"</span>],  </div><div class="line">    <span class="comment">// 强制方法必须返回值，TypeScript强类型，不配置  </span></div><div class="line">    <span class="string">"consistent-return"</span>: <span class="number">0</span>,  </div><div class="line">    <span class="comment">// 用于指统一在回调函数中指向this的变量名，箭头函数中的this已经可以指向外层调用者，应该没卵用了  </span></div><div class="line">    <span class="comment">// e.g [0,"that"] 指定只能 var that = this. that不能指向其他任何值，this也不能赋值给that以外的其他值  </span></div><div class="line">    <span class="string">"consistent-this"</span>: <span class="number">0</span>,  </div><div class="line">    <span class="comment">// 强制在子类构造函数中用super()调用父类构造函数，TypeScrip的编译器也会提示  </span></div><div class="line">    <span class="string">"constructor-super"</span>: <span class="number">0</span>,  </div><div class="line">    <span class="comment">// if else while for do后面的代码块是否需要&#123; &#125;包围，参数：  </span></div><div class="line">    <span class="comment">//    multi  只有块中有多行语句时才需要&#123; &#125;包围  </span></div><div class="line">    <span class="comment">//    multi-line  只有块中有多行语句时才需要&#123; &#125;包围, 但是块中的执行语句只有一行时，  </span></div><div class="line">    <span class="comment">//                   块中的语句只能跟和if语句在同一行。if (foo) foo++; else doSomething();  </span></div><div class="line">    <span class="comment">//    multi-or-nest 只有块中有多行语句时才需要&#123; &#125;包围, 如果块中的执行语句只有一行，执行语句可以零另起一行也可以跟在if语句后面  </span></div><div class="line">    <span class="comment">//    [2, "multi", "consistent"] 保持前后语句的&#123; &#125;一致  </span></div><div class="line">    <span class="comment">//    default: [2, "all"] 全都需要&#123; &#125;包围  </span></div><div class="line">    <span class="string">"curly"</span>: [<span class="number">2</span>, <span class="string">"all"</span>],  </div><div class="line">    <span class="comment">// switch语句强制default分支，也可添加 // no default 注释取消此次警告  </span></div><div class="line">    <span class="string">"default-case"</span>: <span class="number">2</span>,  </div><div class="line">    <span class="comment">// 强制object.key 中 . 的位置，参数:  </span></div><div class="line">    <span class="comment">//      property，'.'号应与属性在同一行  </span></div><div class="line">    <span class="comment">//      object, '.' 号应与对象名在同一行  </span></div><div class="line">    <span class="string">"dot-location"</span>: [<span class="number">2</span>, <span class="string">"property"</span>],  </div><div class="line">    <span class="comment">// 强制使用.号取属性  </span></div><div class="line">    <span class="comment">//    参数： allowKeywords：true 使用保留字做属性名时，只能使用.方式取属性  </span></div><div class="line">    <span class="comment">//                          false 使用保留字做属性名时, 只能使用[]方式取属性 e.g [2, &#123;"allowKeywords": false&#125;]  </span></div><div class="line">    <span class="comment">//           allowPattern:  当属性名匹配提供的正则表达式时，允许使用[]方式取值,否则只能用.号取值 e.g [2, &#123;"allowPattern": "^[a-z]+(_[a-z]+)+$"&#125;]  </span></div><div class="line">    <span class="string">"dot-notation"</span>: [<span class="number">2</span>, &#123;<span class="string">"allowKeywords"</span>: <span class="literal">true</span>&#125;],  </div><div class="line">    <span class="comment">// 文件末尾强制换行  </span></div><div class="line">    <span class="string">"eol-last"</span>: <span class="number">2</span>,  </div><div class="line">    <span class="comment">// 使用 === 替代 ==  </span></div><div class="line">    <span class="string">"eqeqeq"</span>: [<span class="number">2</span>, <span class="string">"allow-null"</span>],  </div><div class="line">    <span class="comment">// 方法表达式是否需要命名  </span></div><div class="line">    <span class="string">"func-names"</span>: <span class="number">0</span>,  </div><div class="line">    <span class="comment">// 方法定义风格，参数：  </span></div><div class="line">    <span class="comment">//    declaration: 强制使用方法声明的方式，function f()&#123;&#125; e.g [2, "declaration"]  </span></div><div class="line">    <span class="comment">//    expression：强制使用方法表达式的方式，var f = function() &#123;&#125;  e.g [2, "expression"]  </span></div><div class="line">    <span class="comment">//    allowArrowFunctions: declaration风格中允许箭头函数。 e.g [2, "declaration", &#123; "allowArrowFunctions": true &#125;]  </span></div><div class="line">    <span class="string">"func-style"</span>: <span class="number">0</span>,  </div><div class="line"><span class="string">"no-alert"</span>: <span class="number">0</span>,<span class="comment">//禁止使用alert confirm prompt</span></div><div class="line"><span class="string">"no-array-constructor"</span>: <span class="number">2</span>,<span class="comment">//禁止使用数组构造器</span></div><div class="line"><span class="string">"no-bitwise"</span>: <span class="number">0</span>,<span class="comment">//禁止使用按位运算符</span></div><div class="line"><span class="string">"no-caller"</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></div><div class="line"><span class="string">"no-catch-shadow"</span>: <span class="number">2</span>,<span class="comment">//禁止catch子句参数与外部作用域变量同名</span></div><div class="line"><span class="string">"no-class-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给类赋值</span></div><div class="line"><span class="string">"no-cond-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件表达式中使用赋值语句</span></div><div class="line"><span class="string">"no-console"</span>: <span class="number">2</span>,<span class="comment">//禁止使用console</span></div><div class="line"><span class="string">"no-const-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止修改const声明的变量</span></div><div class="line"><span class="string">"no-constant-condition"</span>: <span class="number">2</span>,<span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></div><div class="line"><span class="string">"no-continue"</span>: <span class="number">0</span>,<span class="comment">//禁止使用continue</span></div><div class="line"><span class="string">"no-control-regex"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式中使用控制字符</span></div><div class="line"><span class="string">"no-debugger"</span>: <span class="number">2</span>,<span class="comment">//禁止使用debugger</span></div><div class="line"><span class="string">"no-delete-var"</span>: <span class="number">2</span>,<span class="comment">//不能对var声明的变量使用delete操作符</span></div><div class="line"><span class="string">"no-div-regex"</span>: <span class="number">1</span>,<span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></div><div class="line"><span class="string">"no-dupe-keys"</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></div><div class="line"><span class="string">"no-dupe-args"</span>: <span class="number">2</span>,<span class="comment">//函数参数不能重复</span></div><div class="line"><span class="string">"no-duplicate-case"</span>: <span class="number">2</span>,<span class="comment">//switch中的case标签不能重复</span></div><div class="line"><span class="string">"no-else-return"</span>: <span class="number">2</span>,<span class="comment">//如果if语句里面有return,后面不能跟else语句</span></div><div class="line"><span class="string">"no-empty"</span>: <span class="number">2</span>,<span class="comment">//块语句中的内容不能为空</span></div><div class="line"><span class="string">"no-empty-character-class"</span>: <span class="number">2</span>,<span class="comment">//正则表达式中的[]内容不能为空</span></div><div class="line"><span class="string">"no-empty-label"</span>: <span class="number">2</span>,<span class="comment">//禁止使用空label</span></div><div class="line"><span class="string">"no-eq-null"</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></div><div class="line"><span class="string">"no-eval"</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></div><div class="line"><span class="string">"no-ex-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止给catch语句中的异常参数赋值</span></div><div class="line"><span class="string">"no-extend-native"</span>: <span class="number">2</span>,<span class="comment">//禁止扩展native对象</span></div><div class="line"><span class="string">"no-extra-bind"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的函数绑定</span></div><div class="line"><span class="string">"no-extra-boolean-cast"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的bool转换</span></div><div class="line"><span class="string">"no-extra-parens"</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></div><div class="line"><span class="string">"no-extra-semi"</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></div><div class="line"><span class="string">"no-fallthrough"</span>: <span class="number">1</span>,<span class="comment">//禁止switch穿透</span></div><div class="line"><span class="string">"no-floating-decimal"</span>: <span class="number">2</span>,<span class="comment">//禁止省略浮点数中的0 .5 3.</span></div><div class="line"><span class="string">"no-func-assign"</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></div><div class="line"><span class="string">"no-implicit-coercion"</span>: <span class="number">1</span>,<span class="comment">//禁止隐式转换</span></div><div class="line"><span class="string">"no-implied-eval"</span>: <span class="number">2</span>,<span class="comment">//禁止使用隐式eval</span></div><div class="line"><span class="string">"no-inline-comments"</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></div><div class="line"><span class="string">"no-inner-declarations"</span>: [<span class="number">2</span>, <span class="string">"functions"</span>],<span class="comment">//禁止在块语句中使用声明（变量或函数）</span></div><div class="line"><span class="string">"no-invalid-regexp"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的正则表达式</span></div><div class="line"><span class="string">"no-invalid-this"</span>: <span class="number">2</span>,<span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></div><div class="line"><span class="string">"no-irregular-whitespace"</span>: <span class="number">2</span>,<span class="comment">//不能有不规则的空格</span></div><div class="line"><span class="string">"no-iterator"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__iterator__ 属性</span></div><div class="line"><span class="string">"no-label-var"</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></div><div class="line"><span class="string">"no-labels"</span>: <span class="number">2</span>,<span class="comment">//禁止标签声明</span></div><div class="line"><span class="string">"no-lone-blocks"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套块</span></div><div class="line"><span class="string">"no-lonely-if"</span>: <span class="number">2</span>,<span class="comment">//禁止else语句内只有if语句</span></div><div class="line"><span class="string">"no-loop-func"</span>: <span class="number">1</span>,<span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></div><div class="line"><span class="string">"no-mixed-requires"</span>: [<span class="number">0</span>, <span class="literal">false</span>],<span class="comment">//声明时不能混用声明类型</span></div><div class="line"><span class="string">"no-mixed-spaces-and-tabs"</span>: [<span class="number">2</span>, <span class="literal">false</span>],<span class="comment">//禁止混用tab和空格</span></div><div class="line"><span class="string">"linebreak-style"</span>: [<span class="number">0</span>, <span class="string">"windows"</span>],<span class="comment">//换行风格</span></div><div class="line"><span class="string">"no-multi-spaces"</span>: <span class="number">1</span>,<span class="comment">//不能用多余的空格</span></div><div class="line"><span class="string">"no-multi-str"</span>: <span class="number">2</span>,<span class="comment">//字符串不能用\换行</span></div><div class="line"><span class="string">"no-multiple-empty-lines"</span>: [<span class="number">1</span>, &#123;<span class="string">"max"</span>: <span class="number">2</span>&#125;],<span class="comment">//空行最多不能超过2行</span></div><div class="line"><span class="string">"no-native-reassign"</span>: <span class="number">2</span>,<span class="comment">//不能重写native对象</span></div><div class="line"><span class="string">"no-negated-in-lhs"</span>: <span class="number">2</span>,<span class="comment">//in 操作符的左边不能有!</span></div><div class="line"><span class="string">"no-nested-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用嵌套的三目运算</span></div><div class="line"><span class="string">"no-new"</span>: <span class="number">1</span>,<span class="comment">//禁止在使用new构造一个实例后不赋值</span></div><div class="line"><span class="string">"no-new-func"</span>: <span class="number">1</span>,<span class="comment">//禁止使用new Function</span></div><div class="line"><span class="string">"no-new-object"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new Object()</span></div><div class="line"><span class="string">"no-new-require"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new require</span></div><div class="line"><span class="string">"no-new-wrappers"</span>: <span class="number">2</span>,<span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></div><div class="line"><span class="string">"no-obj-calls"</span>: <span class="number">2</span>,<span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></div><div class="line"><span class="string">"no-octal"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制数字</span></div><div class="line"><span class="string">"no-octal-escape"</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制转义序列</span></div><div class="line"><span class="string">"no-param-reassign"</span>: <span class="number">2</span>,<span class="comment">//禁止给参数重新赋值</span></div><div class="line"><span class="string">"no-path-concat"</span>: <span class="number">0</span>,<span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></div><div class="line"><span class="string">"no-plusplus"</span>: <span class="number">0</span>,<span class="comment">//禁止使用++，--</span></div><div class="line"><span class="string">"no-process-env"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.env</span></div><div class="line"><span class="string">"no-process-exit"</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.exit()</span></div><div class="line"><span class="string">"no-proto"</span>: <span class="number">2</span>,<span class="comment">//禁止使用__proto__属性</span></div><div class="line"><span class="string">"no-redeclare"</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></div><div class="line"><span class="string">"no-regex-spaces"</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></div><div class="line"><span class="string">"no-restricted-modules"</span>: <span class="number">0</span>,<span class="comment">//如果禁用了指定模块，使用就会报错</span></div><div class="line"><span class="string">"no-return-assign"</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></div><div class="line"><span class="string">"no-script-url"</span>: <span class="number">0</span>,<span class="comment">//禁止使用javascript:void(0)</span></div><div class="line"><span class="string">"no-self-compare"</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></div><div class="line"><span class="string">"no-sequences"</span>: <span class="number">0</span>,<span class="comment">//禁止使用逗号运算符</span></div><div class="line"><span class="string">"no-shadow"</span>: <span class="number">2</span>,<span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></div><div class="line"><span class="string">"no-shadow-restricted-names"</span>: <span class="number">2</span>,<span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></div><div class="line"><span class="string">"no-spaced-func"</span>: <span class="number">2</span>,<span class="comment">//函数调用时 函数名与()之间不能有空格</span></div><div class="line"><span class="string">"no-sparse-arrays"</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></div><div class="line"><span class="string">"no-sync"</span>: <span class="number">0</span>,<span class="comment">//nodejs 禁止同步方法</span></div><div class="line"><span class="string">"no-ternary"</span>: <span class="number">0</span>,<span class="comment">//禁止使用三目运算符</span></div><div class="line"><span class="string">"no-trailing-spaces"</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></div><div class="line"><span class="string">"no-this-before-super"</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></div><div class="line"><span class="string">"no-throw-literal"</span>: <span class="number">2</span>,<span class="comment">//禁止抛出字面量错误 throw "error";</span></div><div class="line"><span class="string">"no-undef"</span>: <span class="number">1</span>,<span class="comment">//不能有未定义的变量</span></div><div class="line"><span class="string">"no-undef-init"</span>: <span class="number">2</span>,<span class="comment">//变量初始化时不能直接给它赋值为undefined</span></div><div class="line"><span class="string">"no-undefined"</span>: <span class="number">2</span>,<span class="comment">//不能使用undefined</span></div><div class="line"><span class="string">"no-unexpected-multiline"</span>: <span class="number">2</span>,<span class="comment">//避免多行表达式</span></div><div class="line"><span class="string">"no-underscore-dangle"</span>: <span class="number">1</span>,<span class="comment">//标识符不能以_开头或结尾</span></div><div class="line"><span class="string">"no-unneeded-ternary"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></div><div class="line"><span class="string">"no-unreachable"</span>: <span class="number">2</span>,<span class="comment">//不能有无法执行的代码</span></div><div class="line"><span class="string">"no-unused-expressions"</span>: <span class="number">2</span>,<span class="comment">//禁止无用的表达式</span></div><div class="line"><span class="string">"no-unused-vars"</span>: [<span class="number">2</span>, &#123;<span class="string">"vars"</span>: <span class="string">"all"</span>, <span class="string">"args"</span>: <span class="string">"after-used"</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></div><div class="line"><span class="string">"no-use-before-define"</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></div><div class="line"><span class="string">"no-useless-call"</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的call和apply</span></div><div class="line"><span class="string">"no-void"</span>: <span class="number">2</span>,<span class="comment">//禁用void操作符</span></div><div class="line"><span class="string">"no-var"</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></div><div class="line"><span class="string">"no-warning-comments"</span>: [<span class="number">1</span>, &#123; <span class="string">"terms"</span>: [<span class="string">"todo"</span>, <span class="string">"fixme"</span>, <span class="string">"xxx"</span>], <span class="string">"location"</span>: <span class="string">"start"</span> &#125;],<span class="comment">//不能有警告备注</span></div><div class="line"><span class="string">"no-with"</span>: <span class="number">2</span>,<span class="comment">//禁用with</span></div><div class="line"><span class="string">"array-bracket-spacing"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></div><div class="line"><span class="string">"arrow-parens"</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></div><div class="line"><span class="string">"arrow-spacing"</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></div><div class="line"><span class="string">"accessor-pairs"</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></div><div class="line"><span class="string">"block-scoped-var"</span>: <span class="number">0</span>,<span class="comment">//块语句中使用var</span></div><div class="line"><span class="string">"brace-style"</span>: [<span class="number">1</span>, <span class="string">"1tbs"</span>],<span class="comment">//大括号风格</span></div><div class="line"><span class="string">"callback-return"</span>: <span class="number">1</span>,<span class="comment">//避免多次调用回调什么的</span></div><div class="line"><span class="string">"camelcase"</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></div><div class="line"><span class="string">"comma-dangle"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],<span class="comment">//对象字面量项尾不能有逗号</span></div><div class="line"><span class="string">"comma-spacing"</span>: <span class="number">0</span>,<span class="comment">//逗号前后的空格</span></div><div class="line"><span class="string">"comma-style"</span>: [<span class="number">2</span>, <span class="string">"last"</span>],<span class="comment">//逗号风格，换行时在行首还是行尾</span></div><div class="line"><span class="string">"complexity"</span>: [<span class="number">0</span>, <span class="number">11</span>],<span class="comment">//循环复杂度</span></div><div class="line"><span class="string">"computed-property-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//是否允许计算后的键名什么的</span></div><div class="line"><span class="string">"consistent-return"</span>: <span class="number">0</span>,<span class="comment">//return 后面是否允许省略</span></div><div class="line"><span class="string">"consistent-this"</span>: [<span class="number">2</span>, <span class="string">"that"</span>],<span class="comment">//this别名</span></div><div class="line"><span class="string">"constructor-super"</span>: <span class="number">0</span>,<span class="comment">//非派生类不能调用super，派生类必须调用super</span></div><div class="line"><span class="string">"curly"</span>: [<span class="number">2</span>, <span class="string">"all"</span>],<span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></div><div class="line"><span class="string">"default-case"</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></div><div class="line"><span class="string">"dot-location"</span>: <span class="number">0</span>,<span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></div><div class="line"><span class="string">"dot-notation"</span>: [<span class="number">0</span>, &#123; <span class="string">"allowKeywords"</span>: <span class="literal">true</span> &#125;],<span class="comment">//避免不必要的方括号</span></div><div class="line"><span class="string">"eol-last"</span>: <span class="number">0</span>,<span class="comment">//文件以单一的换行符结束</span></div><div class="line"><span class="string">"eqeqeq"</span>: <span class="number">2</span>,<span class="comment">//必须使用全等</span></div><div class="line"><span class="string">"func-names"</span>: <span class="number">0</span>,<span class="comment">//函数表达式必须有名字</span></div><div class="line"><span class="string">"func-style"</span>: [<span class="number">0</span>, <span class="string">"declaration"</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></div><div class="line"><span class="string">"generator-star-spacing"</span>: <span class="number">0</span>,<span class="comment">//生成器函数*的前后空格</span></div><div class="line"><span class="string">"guard-for-in"</span>: <span class="number">0</span>,<span class="comment">//for in循环要用if语句过滤</span></div><div class="line"><span class="string">"handle-callback-err"</span>: <span class="number">0</span>,<span class="comment">//nodejs 处理错误</span></div><div class="line"><span class="string">"id-length"</span>: <span class="number">0</span>,<span class="comment">//变量名长度</span></div><div class="line"><span class="string">"indent"</span>: [<span class="number">2</span>, <span class="number">4</span>],<span class="comment">//缩进风格</span></div><div class="line"><span class="string">"init-declarations"</span>: <span class="number">0</span>,<span class="comment">//声明时必须赋初值</span></div><div class="line"><span class="string">"key-spacing"</span>: [<span class="number">0</span>, &#123; <span class="string">"beforeColon"</span>: <span class="literal">false</span>, <span class="string">"afterColon"</span>: <span class="literal">true</span> &#125;],<span class="comment">//对象字面量中冒号的前后空格</span></div><div class="line"><span class="string">"lines-around-comment"</span>: <span class="number">0</span>,<span class="comment">//行前/行后备注</span></div><div class="line"><span class="string">"max-depth"</span>: [<span class="number">0</span>, <span class="number">4</span>],<span class="comment">//嵌套块深度</span></div><div class="line"><span class="string">"max-len"</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>],<span class="comment">//字符串最大长度</span></div><div class="line"><span class="string">"max-nested-callbacks"</span>: [<span class="number">0</span>, <span class="number">2</span>],<span class="comment">//回调嵌套深度</span></div><div class="line"><span class="string">"max-params"</span>: [<span class="number">0</span>, <span class="number">3</span>],<span class="comment">//函数最多只能有3个参数</span></div><div class="line"><span class="string">"max-statements"</span>: [<span class="number">0</span>, <span class="number">10</span>],<span class="comment">//函数内最多有几个声明</span></div><div class="line"><span class="string">"new-cap"</span>: <span class="number">2</span>,<span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></div><div class="line"><span class="string">"new-parens"</span>: <span class="number">2</span>,<span class="comment">//new时必须加小括号</span></div><div class="line"><span class="string">"newline-after-var"</span>: <span class="number">2</span>,<span class="comment">//变量声明后是否需要空一行</span></div><div class="line"><span class="string">"object-curly-spacing"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//大括号内是否允许不必要的空格</span></div><div class="line"><span class="string">"object-shorthand"</span>: <span class="number">0</span>,<span class="comment">//强制对象字面量缩写语法</span></div><div class="line"><span class="string">"one-var"</span>: <span class="number">1</span>,<span class="comment">//连续声明</span></div><div class="line"><span class="string">"operator-assignment"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//赋值运算符 += -=什么的</span></div><div class="line"><span class="string">"operator-linebreak"</span>: [<span class="number">2</span>, <span class="string">"after"</span>],<span class="comment">//换行时运算符在行尾还是行首</span></div><div class="line"><span class="string">"padded-blocks"</span>: <span class="number">0</span>,<span class="comment">//块语句内行首行尾是否要空行</span></div><div class="line"><span class="string">"prefer-const"</span>: <span class="number">0</span>,<span class="comment">//首选const</span></div><div class="line"><span class="string">"prefer-spread"</span>: <span class="number">0</span>,<span class="comment">//首选展开运算</span></div><div class="line"><span class="string">"prefer-reflect"</span>: <span class="number">0</span>,<span class="comment">//首选Reflect的方法</span></div><div class="line"><span class="string">"quotes"</span>: [<span class="number">1</span>, <span class="string">"single"</span>],<span class="comment">//引号类型 `` "" ''</span></div><div class="line"><span class="string">"quote-props"</span>:[<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//对象字面量中的属性名是否强制双引号</span></div><div class="line"><span class="string">"radix"</span>: <span class="number">2</span>,<span class="comment">//parseInt必须指定第二个参数</span></div><div class="line"><span class="string">"id-match"</span>: <span class="number">0</span>,<span class="comment">//命名检测</span></div><div class="line"><span class="string">"require-yield"</span>: <span class="number">0</span>,<span class="comment">//生成器函数必须有yield</span></div><div class="line"><span class="string">"semi"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],<span class="comment">//语句强制分号结尾</span></div><div class="line"><span class="string">"semi-spacing"</span>: [<span class="number">0</span>, &#123;<span class="string">"before"</span>: <span class="literal">false</span>, <span class="string">"after"</span>: <span class="literal">true</span>&#125;],<span class="comment">//分号前后空格</span></div><div class="line"><span class="string">"sort-vars"</span>: <span class="number">0</span>,<span class="comment">//变量声明时排序</span></div><div class="line"><span class="string">"space-after-keywords"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//关键字后面是否要空一格</span></div><div class="line"><span class="string">"space-before-blocks"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></div><div class="line"><span class="string">"space-before-function-paren"</span>: [<span class="number">0</span>, <span class="string">"always"</span>],<span class="comment">//函数定义时括号前面要不要有空格</span></div><div class="line"><span class="string">"space-in-parens"</span>: [<span class="number">0</span>, <span class="string">"never"</span>],<span class="comment">//小括号里面要不要有空格</span></div><div class="line"><span class="string">"space-infix-ops"</span>: <span class="number">0</span>,<span class="comment">//中缀操作符周围要不要有空格</span></div><div class="line"><span class="string">"space-return-throw-case"</span>: <span class="number">2</span>,<span class="comment">//return throw case后面要不要加空格</span></div><div class="line"><span class="string">"space-unary-ops"</span>: [<span class="number">0</span>, &#123; <span class="string">"words"</span>: <span class="literal">true</span>, <span class="string">"nonwords"</span>: <span class="literal">false</span> &#125;],<span class="comment">//一元运算符的前/后要不要加空格</span></div><div class="line"><span class="string">"spaced-comment"</span>: <span class="number">0</span>,<span class="comment">//注释风格不要有空格什么的</span></div><div class="line"><span class="string">"strict"</span>: <span class="number">2</span>,<span class="comment">//使用严格模式</span></div><div class="line"><span class="string">"use-isnan"</span>: <span class="number">2</span>,<span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></div><div class="line"><span class="string">"valid-jsdoc"</span>: <span class="number">0</span>,<span class="comment">//jsdoc规则</span></div><div class="line"><span class="string">"valid-typeof"</span>: <span class="number">2</span>,<span class="comment">//必须使用合法的typeof的值</span></div><div class="line"><span class="string">"vars-on-top"</span>: <span class="number">2</span>,<span class="comment">//var必须放在作用域顶部</span></div><div class="line"><span class="string">"wrap-iife"</span>: [<span class="number">2</span>, <span class="string">"inside"</span>],<span class="comment">//立即执行函数表达式的小括号风格</span></div><div class="line"><span class="string">"wrap-regex"</span>: <span class="number">0</span>,<span class="comment">//正则表达式字面量用小括号包起来</span></div><div class="line"><span class="string">"yoda"</span>: [<span class="number">2</span>, <span class="string">"never"</span>]<span class="comment">//禁止尤达条件</span></div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://segmentfault.com/a/1190000004468428" target="_blank" rel="external">ESLint配置参数介绍</a><br><a href="http://www.cnblogs.com/nklong/p/7233631.html" target="_blank" rel="external">关于eslint使用规则，和各种报错应对书写规则。</a></p>
<p> vue2.0</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了关于eslint使用规则，和各种报错对应规则
    
    </summary>
    
      <category term="eslint" scheme="http://yoursite.com/categories/eslint/"/>
    
    
      <category term="Vuejs" scheme="http://yoursite.com/tags/Vuejs/"/>
    
      <category term="eslint" scheme="http://yoursite.com/tags/eslint/"/>
    
      <category term="前端规范工具" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E8%A7%84%E8%8C%83%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Vue(Vue综合实战项目)</title>
    <link href="http://yoursite.com/2017/06/25/Vue%E4%B9%8B%E5%85%A5%E9%97%A8%E7%BB%BC%E5%90%88%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98/"/>
    <id>http://yoursite.com/2017/06/25/Vue之入门综合项目实战/</id>
    <published>2017-06-25T05:17:02.000Z</published>
    <updated>2017-06-25T09:19:36.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>Vue综合实战项目</code></center></p>
<hr>
<h1 id="Vue综合实战项目"><a href="#Vue综合实战项目" class="headerlink" title="Vue综合实战项目"></a>Vue综合实战项目</h1><h2 id="前置知识学习"><a href="#前置知识学习" class="headerlink" title="前置知识学习"></a>前置知识学习</h2><ul>
<li>npm 学习<ul>
<li><a href="https://docs.npmjs.com/" target="_blank" rel="external">官方文档</a></li>
<li>推荐资料<ul>
<li><a href="http://www.cnblogs.com/kelsen/p/4947859.html" target="_blank" rel="external">npm入门</a></li>
<li><a href="http://www.nodeclass.com/articles/810142" target="_blank" rel="external">npm介绍</a></li>
</ul>
</li>
<li>需要了解的知识点<ul>
<li><code>package.json</code> 文件相关配置选项</li>
<li>npm 本地安装、全局安装、本地开发安装等区别及相关命令</li>
<li>npm script脚步的基本编写能力</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>有时间专门写一个这样的专题，如果需要可以邮件我。modifywyx@gmail.com</p>
</blockquote>
<ul>
<li><p>webpack基础学习</p>
<ul>
<li><a href="https://webpack.js.org/" target="_blank" rel="external">官方文档</a></li>
<li>Webpack了解的知识点：<ul>
<li>webpack的基本配置</li>
<li>了解webpack常用的loader： less-loader、sass-loader、 vue-loader、style-loader、css-loader、eslint-loader、babel-loader等</li>
<li>熟悉Webpack的webpack-dev-server的基本配置和使用，会配置热更新</li>
</ul>
</li>
</ul>
</li>
<li><p>es6语法学习</p>
<ul>
<li>阮一峰老师的大作<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">《ECMAScript 6 入门》</a></li>
<li>需要学习的知识点<ul>
<li>es6的模块机制</li>
<li>各种最新语法糖，简写、geter、setter、箭头函数</li>
<li>类、继承的心机制<br>…</li>
</ul>
</li>
</ul>
</li>
<li><p>nodejs基础知识</p>
<ul>
<li>知识点学习：<ul>
<li>文件操作</li>
<li>http服务</li>
<li>express</li>
</ul>
</li>
</ul>
</li>
<li><p>组件化开发思想</p>
</li>
</ul>
<h2 id="Vue脚手架工具：vue-cli构建实战项目"><a href="#Vue脚手架工具：vue-cli构建实战项目" class="headerlink" title="Vue脚手架工具：vue-cli构建实战项目"></a>Vue脚手架工具：<code>vue-cli</code>构建实战项目</h2><p>其实如果编写Vue的前端项目，直接使用vue的官方vue-cli构建工具最好用，一个命令就可以直接生成项目的结构和目录。<br>而且官方需要依赖的包也可以自动配置好，只需要npm instal一下，然后就可以开发测试了。</p>
<h3 id="vue-cli安装"><a href="#vue-cli安装" class="headerlink" title="vue-cli安装"></a><code>vue-cli</code>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 安装vue-cli。  安装之前首先确保你已经安装好了nodejs 而且打开命令行</div><div class="line"><span class="meta">$</span> npm install -g vue-cli</div><div class="line"><span class="meta"></span></div><div class="line"># 校验一下是否安装成功</div><div class="line"><span class="meta">$</span> vue -V</div><div class="line"><span class="meta"></span></div><div class="line">#=&gt;  2.5.1  我当前的版本是这个，你的可能比这个新</div></pre></td></tr></table></figure>
<h3 id="使用vue-cli初始化项目"><a href="#使用vue-cli初始化项目" class="headerlink" title="使用vue-cli初始化项目"></a>使用<code>vue-cli</code>初始化项目</h3><p>通过以下命令的方式可以创建一个项目文件夹，并初始化对应的文件。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> vue init &lt;template-name&gt; &lt;project-name&gt;</div></pre></td></tr></table></figure>
<p>其中template-name可以取以下值，每个值对应不同的项目构建的模板。</p>
<ul>
<li><a href="https://github.com/vuejs-templates/webpack" target="_blank" rel="external">webpack</a>–全功能的Webpack + vueify，包括热加载，静态检测，单元测试</li>
<li><a href="https://github.com/vuejs-templates/webpack-simple" target="_blank" rel="external">webpack</a>-simple–一个简易的Webpack + vueify，以便于快速开始。</li>
<li><a href="https://github.com/vuejs-templates/browserify" target="_blank" rel="external">browserify</a>–全功能的Browserify + vueify，包括热加载，静态检测，单元测试</li>
<li><a href="https://github.com/vuejs-templates/browserify-simple" target="_blank" rel="external">browserify</a>-simple–一个简易的Browserify + vueify，以便于快速开始。</li>
</ul>
<p>安装和开发控制台的命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 如果已经安装，请省略</div><div class="line"><span class="meta">$</span> npm install -g vue-cli</div><div class="line"><span class="meta"></span></div><div class="line"># 初始化一个webpack全功能包的vue项目，请您把my-project换成你自己的项目名。</div><div class="line"><span class="meta">$</span> vue init webpack my-project</div><div class="line"><span class="meta"></span></div><div class="line"># 用命令行进入当前项目目录</div><div class="line"><span class="meta">$</span> cd my-project</div><div class="line"><span class="meta"></span></div><div class="line"># npm安装所有的依赖的包</div><div class="line"><span class="meta">$</span> npm install</div><div class="line"><span class="meta"></span></div><div class="line"># 运行测试的首页</div><div class="line"><span class="meta">$</span> npm run dev</div></pre></td></tr></table></figure>
<h3 id="综合实例开发记录"><a href="#综合实例开发记录" class="headerlink" title="综合实例开发记录"></a>综合实例开发记录</h3><ol>
<li>通过vue-cli构建工具初始化项目目录</li>
</ol>
<blockquote>
<p>安装过程，控制台会问你项目名称是什么？项目描述？项目作者，是否使用eslint校验，是否使用单元测试等….</p>
</blockquote>
<p>我的安装过程如下请参考：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> vue init webpack ttl                        # =&gt; 安装webpack模板的项目 ttl（项目名可以随便取）</div><div class="line"></div><div class="line">  A newer version of vue-cli is available.</div><div class="line"></div><div class="line">  latest:    2.6.0</div><div class="line">  installed: 2.5.1</div><div class="line"></div><div class="line">  This will install Vue 2.x version of template.</div><div class="line"></div><div class="line">  For Vue 1.x use: vue init webpack#1.0 ttl</div><div class="line"></div><div class="line">? Project name mydemovue                        # =&gt; 项目名称</div><div class="line">? Project description A Vue.js project          # =&gt; 项目描述</div><div class="line">? Author malun &lt;malun666@126.com&gt;               # =&gt; 作者</div><div class="line">? Vue build standalone                          # =&gt; 是否支持单文件组件</div><div class="line">? Use ESLint to lint your code? Yes             # =&gt; 是否支持ESLint代码校验</div><div class="line">? Pick an ESLint preset Standard                # =&gt; 校验的标准是什么？</div><div class="line">? Setup unit tests with Karma + Mocha? Yes      # =&gt; 是否使用单元测试</div><div class="line">? Setup e2e tests with Nightwatch? Yes          # =&gt; 是否使用e2e测试</div><div class="line"></div><div class="line">   vue-cli · Generated "ttl".</div><div class="line"></div><div class="line">   To get started:</div><div class="line"></div><div class="line">     cd ttl</div><div class="line">     npm install</div><div class="line">     npm run dev</div><div class="line"></div><div class="line">   Documentation can be found at https://vuejs-templates.github.io/webpack</div></pre></td></tr></table></figure>
<p>通过上面一系列的命令后，我们就会创建一个webpack配置好的项目包。目录结构如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ttl</div><div class="line">|--.babelrc           #=&gt; babel的配置文件，主要用于转换es6等最新的js语法。</div><div class="line">|--.editorconfig      #=&gt; 编辑器配置</div><div class="line">|--.eslintignore      #=&gt; eslint的忽略校验的配置文件</div><div class="line">|--.eslintrc.js       #=&gt; eslint的配置校验js是否规范的配置文件</div><div class="line">|--.gitignore         #=&gt; 设置git忽略的管理的文件</div><div class="line">|--README.md          #=&gt; readme说明文件</div><div class="line">|--build/             #=&gt; 自动构建存放的文件地方</div><div class="line">|--config/            #=&gt; 当前开发、测试等配置的文件，需要懂点nodejs了啊。</div><div class="line">|--index.html         #=&gt; 项目的主入口的模板</div><div class="line">|--package.json       #=&gt; npm的配置文件</div><div class="line">|--src/               #=&gt; 源码目录</div><div class="line">|--static/            #=&gt; 静态资源存放的目录</div><div class="line">|--test/              #=&gt; 测试相关目录</div></pre></td></tr></table></figure>
<ol>
<li>初始化依赖包</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> cd ttl              #=&gt; 进入上面创建好的项目目录</div><div class="line"><span class="meta">$</span> npm install         #=&gt; 安装所有的依赖包。  安装过程可能非常长，网络也可能有问题，请耐心等待。</div><div class="line"><span class="meta"></span></div><div class="line"># 安装完成后，可以直接运行测试,如果自动打开浏览器，并跳转到http://localhost:8080/ 说明一切都ok了。</div><div class="line"><span class="meta">$</span> npm run dev</div></pre></td></tr></table></figure>
<blockquote>
<p>npm 安装的时候经常网会断开，国内的网（哎，说多了都是泪）你懂的。最好能科学上网，或者是用淘宝的npm的镜像</p>
</blockquote>
<ol>
<li>安装<code>vue-router</code>组件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span> npm i -S vue-router</div></pre></td></tr></table></figure>
<ol>
<li>到项目的 <code>/src/components/</code> 目录下创建三个组件文件。</li>
</ol>
<p>分别是：</p>
<ul>
<li><p>首页组件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'home'</span>,     <span class="comment">// 组件可以有自己的名字。</span></div><div class="line">  data () &#123;         <span class="comment">// 组件的data必须是函数</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">msg</span>: <span class="string">'这里是Home视图'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></div><div class="line">h3 &#123;</div><div class="line">  background-color: #82c;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>用户首页组件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;    <span class="comment">// es6的模块导出定义语法，此模块导出默认的对象</span></div><div class="line">  name: <span class="string">'user'</span>,     <span class="comment">// 组件可以有自己的名字。</span></div><div class="line">  data () &#123;         <span class="comment">// 组件的data必须是函数</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">msg</span>: <span class="string">'这里是User视图'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></div><div class="line">h3 &#123;</div><div class="line">  background-color: red;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>产品组件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"product"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'product'</span>,     <span class="comment">// 组件可以有自己的名字。</span></div><div class="line">  data () &#123;         <span class="comment">// 组件的data必须是函数</span></div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">msg</span>: <span class="string">'这里是Home视图'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></div><div class="line">h3 &#123;</div><div class="line">  background-color: green;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>项目的目录结构为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ttl</div><div class="line">|-- src</div><div class="line">|--|-- Hello.vue</div><div class="line">|--|-- Home.vue</div><div class="line">|--|-- Product.vue</div><div class="line">|--|-- User.vue</div></pre></td></tr></table></figure>
<ol>
<li>创建router对象及配置路由</li>
</ol>
<p>在<code>src</code>目录下创建<code>approuter.js</code>文件。<br>然后添加如下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>              <span class="comment">// 导入路由模块</span></div><div class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home.vue'</span>        <span class="comment">// 导入Home组件</span></div><div class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">'./components/User.vue'</span></div><div class="line"><span class="keyword">import</span> Product <span class="keyword">from</span> <span class="string">'./components/Product.vue'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> VueRouter(&#123;                  <span class="comment">// 定义路由规则对象</span></div><div class="line">  routes: [</div><div class="line">    &#123;<span class="attr">path</span>: <span class="string">'/home'</span>, <span class="attr">component</span>: Home&#125;,</div><div class="line">    &#123;<span class="attr">path</span>: <span class="string">'/user/:id'</span>, <span class="attr">component</span>: User&#125;,</div><div class="line">    &#123;<span class="attr">path</span>: <span class="string">'/product/:id'</span>, <span class="attr">component</span>: Product&#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ol>
<li>修改main.js文件<br>找到<code>src/</code>目录下的main.js文件，<br>共修改4处，添加路由引用、添加路由规则对象导入、启用路由、将路由键入到Vue中。<br>修改此文件为：</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The Vue build version to load with the `import` command</span></div><div class="line"><span class="comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></div><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></div><div class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>      <span class="comment">// +++1、导入路由组件</span></div><div class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./approuter'</span>        <span class="comment">// +++2、导入我们自己写的路由配置文件</span></div><div class="line"></div><div class="line"><span class="comment">// +++ 3、使用路由组件</span></div><div class="line">Vue.use(VueRouter)</div><div class="line"></div><div class="line"><span class="comment">/* eslint-disable no-new */</span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">  <span class="attr">template</span>: <span class="string">'&lt;App/&gt;'</span>,</div><div class="line">  <span class="attr">components</span>: &#123; App &#125;,</div><div class="line">  <span class="attr">router</span>: router                        <span class="comment">// +++4、添加路由对象</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ol>
<li>在app.vue中添加路由导航</li>
</ol>
<p>最终代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"top-menu"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">ul</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in menuList"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"item.url"</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'app'</span>,</div><div class="line">  <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">menuList</span>: [</div><div class="line">        &#123; <span class="attr">name</span>: <span class="string">'首页'</span>, <span class="attr">url</span>: <span class="string">'/home'</span> &#125;,</div><div class="line">        &#123; <span class="attr">name</span>: <span class="string">'用户'</span>, <span class="attr">url</span>: <span class="string">'/user/19'</span> &#125;,</div><div class="line">        &#123; <span class="attr">name</span>: <span class="string">'产品'</span>, <span class="attr">url</span>: <span class="string">'/product/20'</span> &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">#app &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line">.top-menu ul, .top-menu li &#123;</div><div class="line">  list-style: none;</div><div class="line">&#125;</div><div class="line">.top-menu &#123;</div><div class="line">  overflow: hidden;</div><div class="line">&#125;</div><div class="line">.top-menu li &#123;</div><div class="line">  float: left;</div><div class="line">  width: 100px;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>刷新一下浏览器，你将会看到最终的运行结果。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Vue的入门系列基本都写完了，大部分内容是参考了官网的文档。</p>
<p>还有很多内容没有整理到这个系列中。比如：vue的过渡动画，vue的异步刷新队列，vue的过滤器等，我相信你通过本文档就能<br>实现vue的入门了，那些琐碎的知识点只要看一下官方的文档应该很容入门。</p>
<p>这一次整理过程，让我对Vue有了更深入的认识，之前不熟悉的东西，强迫自己把<br>文档写一遍后，认识比以前更清晰了。Vue确实带来很多的惊喜。希望这个文档对你有用。</p>
]]></content>
    
    <summary type="html">
    
      Vue综合实战项目
    
    </summary>
    
      <category term="VueJS" scheme="http://yoursite.com/categories/VueJS/"/>
    
    
      <category term="Vuejs" scheme="http://yoursite.com/tags/Vuejs/"/>
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue综合实战项目" scheme="http://yoursite.com/tags/Vue%E7%BB%BC%E5%90%88%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Vue入门之Vuex实战</title>
    <link href="http://yoursite.com/2017/06/25/vue%E5%85%A5%E9%97%A8%E4%B9%8Bvuex%E5%AE%9E%E6%88%98/"/>
    <id>http://yoursite.com/2017/06/25/vue入门之vuex实战/</id>
    <published>2017-06-25T05:17:02.000Z</published>
    <updated>2017-06-26T12:20:12.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>Vue入门之Vuex实战</code></center></p>
<hr>
<h1 id="Vue入门之Vuex实战"><a href="#Vue入门之Vuex实战" class="headerlink" title="Vue入门之Vuex实战"></a>Vue入门之Vuex实战</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>Vue组件化做的确实非常彻底，它独有的vue单文件组件也是做的非常有特色。组件化的同时带来的是：组件之间的数据共享和通信的难题。<br>尤其Vue组件设计的就是，父组件通过子组件的prop进行传递数据，而且数据传递是<code>单向</code>的。也就是说：父组件可以把数据传递给子组件，但是<br>反之则不同。如下图所示：</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/05vue.png" alt="vue父子传递"></p>
<h2 id="单向数据流动"><a href="#单向数据流动" class="headerlink" title="单向数据流动"></a>单向数据流动</h2><p>单方向的数据流动带来了非常简洁和清晰的数据流，纯展示性或者独立性较强的模块的开发确实非常方便和省事。<br>但是复杂的页面逻辑，组件之间的数据共享处理就会需要通过事件总线的方式解决或者使用Vue的Vuex框架了。</p>
<h2 id="子组件通知父组件数据更新：事件方式的实现"><a href="#子组件通知父组件数据更新：事件方式的实现" class="headerlink" title="子组件通知父组件数据更新：事件方式的实现"></a>子组件通知父组件数据更新：事件方式的实现</h2><p>子组件可以在子组件内触发事件，然后在父容器中添加子组件时绑定父容器的方法为事件响应方法的方式.如下图所示：</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/06vue.png" alt="vue父子传递"></p>
<ul>
<li>使用 v-on 绑定自定义事件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">每个 Vue 实例都实现了事件接口(Events interface)，即：</div><div class="line">使用 $on(eventName) 监听事件</div><div class="line">使用 $emit(eventName) 触发事件</div></pre></td></tr></table></figure>
<p>参考代码案例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之event message<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 新 Bootstrap 核心 CSS 文件 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap.min.css"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 可选的Bootstrap主题文件（一般不用引入） --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap-theme.min.css"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/jquery/1.11.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/bootstrap/3.3.0/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue-router/dist/vue-router.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>推荐次数：&#123;&#123; voteCount &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--绑定两个自定义事件，当组件内部触发了事件后，会自定调用父容器绑定的methods的方法，达到了子容器向父容器数据进行通信同步的方法--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">vote-btn</span> <span class="attr">v-on:vote</span>=<span class="string">"voteAction"</span> <span class="attr">v-on:sendmsg</span>=<span class="string">"sendMsgAction"</span>&gt;</span><span class="tag">&lt;/<span class="name">vote-btn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"o in msg"</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>&#123;&#123;o&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    Vue.component(<span class="string">'vote-btn'</span>, &#123;</div><div class="line">      <span class="attr">template</span>: <span class="string">`</span></div><div class="line">        &lt;div&gt;</div><div class="line">          &lt;button class="btn btn-success" v-on:click="voteArticle"&gt;推荐&lt;/button&gt;</div><div class="line">          &lt;hr/&gt;</div><div class="line">          &lt;input type="text" v-model="txtMsg" /&gt;</div><div class="line">          &lt;button v-on:click="sendMsg" class="btn btn-success"&gt;发送消息&lt;/button&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      `,</div><div class="line">      <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">          <span class="attr">txtMsg</span>: <span class="string">""</span></div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">voteArticle</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="comment">// 触发事件，vote</span></div><div class="line">          <span class="keyword">this</span>.$emit(<span class="string">'vote'</span>)</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">sendMsg</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="comment">// 触发事件，sendmsg，并</span></div><div class="line">          <span class="keyword">this</span>.$emit(<span class="string">'sendmsg'</span>, <span class="keyword">this</span>.txtMsg)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">voteCount</span>: <span class="number">0</span>,</div><div class="line">        <span class="attr">msg</span>: []</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">voteAction</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  <span class="comment">// 事件触发后，会直接执行此方法</span></div><div class="line">          <span class="keyword">this</span>.voteCount += <span class="number">1</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">sendMsgAction</span>: <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">          <span class="keyword">this</span>.msg.push(item)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="事件总线方式解决非父子组件数据同步"><a href="#事件总线方式解决非父子组件数据同步" class="headerlink" title="事件总线方式解决非父子组件数据同步"></a>事件总线方式解决非父子组件数据同步</h2><p>如果非父子组件怎么通过事件进行同步数据，或者同步消息呢？Vue中的事件触发和监听都是跟一个具体的Vue实例挂钩。<br>所以在不同的Vue实例中想进行事件的统一跟踪和触发，那就需要一个公共的Vue实例，这个实例就是公共的事件对象。</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/07eventbus.png" alt=""></p>
<p>参考下面做的一个购物车的案例的代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之event message<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 新 Bootstrap 核心 CSS 文件 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap.min.css"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 可选的Bootstrap主题文件（一般不用引入） --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"http://cdn.bootcss.com/bootstrap/3.3.0/css/bootstrap-theme.min.css"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/jquery/1.11.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://cdn.bootcss.com/bootstrap/3.3.0/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue-router/dist/vue-router.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">product-list</span> <span class="attr">:products</span>=<span class="string">"products"</span> <span class="attr">v-on:addpro</span>=<span class="string">"addToCarts"</span>&gt;</span> <span class="tag">&lt;/<span class="name">product-list</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">cart</span> <span class="attr">:cart-products</span>=<span class="string">"carts"</span>&gt;</span> <span class="tag">&lt;/<span class="name">cart</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> eventBus = <span class="keyword">new</span> Vue()</div><div class="line"></div><div class="line">    Vue.component(<span class="string">'cart'</span>, &#123;</div><div class="line">      <span class="attr">template</span>: <span class="string">`</span></div><div class="line">      &lt;table class="table table-borderd table-striped table-hover"&gt;</div><div class="line">      &lt;thead&gt;</div><div class="line">        &lt;tr&gt;</div><div class="line">          &lt;th&gt;商品编号&lt;/th&gt;</div><div class="line">          &lt;th&gt;商品名&lt;/th&gt;</div><div class="line">          &lt;th&gt;数量&lt;/th&gt;</div><div class="line">          &lt;th&gt;操作&lt;/th&gt;</div><div class="line">        &lt;/tr&gt;</div><div class="line">      &lt;/thead&gt;</div><div class="line">      &lt;tbody&gt;</div><div class="line">        &lt;tr v-for="item in cartProducts"&gt;</div><div class="line"></div><div class="line">          &lt;td&gt;&#123;&#123; item.id &#125;&#125;&lt;/td&gt;</div><div class="line">          &lt;td&gt;&#123;&#123; item.name &#125;&#125;&lt;/td&gt;</div><div class="line">          &lt;td&gt;</div><div class="line">            &#123;&#123; item.count &#125;&#125;</div><div class="line">          &lt;/td&gt;</div><div class="line">          &lt;td&gt;</div><div class="line">            &lt;button type="button" @click="removeCarts(item)" class="btn btn-success"&gt;&lt;i class="glyphicon glyphicon-remove"&gt;&lt;/i&gt;&lt;/button&gt;</div><div class="line">          &lt;/td&gt;</div><div class="line">        &lt;/tr&gt;</div><div class="line">      &lt;/tbody&gt;</div><div class="line">    &lt;/table&gt;</div><div class="line">      `,</div><div class="line">      <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">removeCarts</span>: <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">          eventBus.$emit(<span class="string">'remo'</span>, item)</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">props</span>: [<span class="string">'cartProducts'</span>]</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    Vue.component(<span class="string">'product-list'</span>, &#123;</div><div class="line">      <span class="attr">template</span>: <span class="string">`</span></div><div class="line">      &lt;table class="table table-borderd table-striped table-hover"&gt;</div><div class="line">      &lt;thead&gt;</div><div class="line">        &lt;tr&gt;</div><div class="line">          &lt;th&gt;商品编号&lt;/th&gt;</div><div class="line">          &lt;th&gt;商品名&lt;/th&gt;</div><div class="line">          &lt;th&gt;操作&lt;/th&gt;</div><div class="line">        &lt;/tr&gt;</div><div class="line">      &lt;/thead&gt;</div><div class="line">      &lt;tbody&gt;</div><div class="line">        &lt;tr v-for="item in products"&gt;</div><div class="line">          &lt;td&gt;&#123;&#123; item.id &#125;&#125;&lt;/td&gt;</div><div class="line">          &lt;td&gt;&#123;&#123; item.name &#125;&#125;&lt;/td&gt;</div><div class="line">          &lt;td&gt;</div><div class="line">            &lt;button type="button" v-on:click="addToCarts(item)" class="btn btn-success"&gt;&lt;i class="glyphicon glyphicon-shopping-cart"&gt;&lt;/i&gt;&lt;/button&gt;</div><div class="line">          &lt;/td&gt;</div><div class="line">        &lt;/tr&gt;</div><div class="line">      &lt;/tbody&gt;</div><div class="line">    &lt;/table&gt;</div><div class="line">      `,</div><div class="line">      <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">addToCarts</span>: <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">          <span class="keyword">this</span>.$emit(<span class="string">'addpro'</span>, item)</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">props</span>: [<span class="string">'products'</span>],</div><div class="line"></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">products</span>: [</div><div class="line">          &#123; <span class="attr">id</span>: <span class="string">'1'</span>, <span class="attr">name</span>: <span class="string">'鳄鱼'</span> &#125;,</div><div class="line">          &#123; <span class="attr">id</span>: <span class="string">'2'</span>, <span class="attr">name</span>: <span class="string">'蛇'</span> &#125;,</div><div class="line">          &#123; <span class="attr">id</span>: <span class="string">'3'</span>, <span class="attr">name</span>: <span class="string">'兔子'</span> &#125;,</div><div class="line">          &#123; <span class="attr">id</span>: <span class="string">'4'</span>, <span class="attr">name</span>: <span class="string">'驴'</span> &#125;,</div><div class="line">          &#123; <span class="attr">id</span>: <span class="string">'5'</span>, <span class="attr">name</span>: <span class="string">'孔雀'</span> &#125;</div><div class="line">        ],</div><div class="line">        <span class="attr">carts</span>: []</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="attr">addToCarts</span>: <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> isExist = <span class="literal">false</span></div><div class="line">          <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="keyword">this</span>.carts.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span>( item.id === <span class="keyword">this</span>.carts[i].id ) &#123;</div><div class="line">              item.count = <span class="keyword">this</span>.carts[i].count + <span class="number">1</span></div><div class="line">              Vue.set(<span class="keyword">this</span>.carts, i, item)</div><div class="line">              isExist = <span class="literal">true</span></div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">          !isExist &amp;&amp; (item.count = <span class="number">1</span>, <span class="keyword">this</span>.carts.push(item))</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">removeCarts</span>: <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">          <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">0</span>; i&lt;<span class="keyword">this</span>.carts.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span>( item.id === <span class="keyword">this</span>.carts[i].id) &#123;</div><div class="line">              <span class="keyword">this</span>.carts.splice(i,<span class="number">1</span>)</div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        self = <span class="keyword">this</span>;</div><div class="line">        eventBus.$on(<span class="string">'remo'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">          self.removeCarts(item)</div><div class="line">        &#125;)</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="Vuex解决复杂单页面应用"><a href="#Vuex解决复杂单页面应用" class="headerlink" title="Vuex解决复杂单页面应用"></a>Vuex解决复杂单页面应用</h2><p>上面的方式只能解决一些简单的页面中的组件的通信问题，但是如果是复杂的单页面应用就需要使用更强大的Vuex来帮我们进行状态的统一管理和同步。</p>
<p>当第一次接触Vuex的时候，眼前一亮，之前经过Redux之后，被它繁琐的使用令我痛苦不已，虽然思路很清晰，其实完全可以设计的更简单和高效。<br>当我接触到Vuex之后，发现这就是我想要的。的确简洁就是一种艺术。</p>
<p>其实本质上，Vuex就是一个大的EventBus对象的升级版本，相当于一个特定的仓库，所有数据都在统一的仓库中，进行统一的管理。</p>
<p>几个核心的概念：</p>
<ul>
<li>State： Vuex仓库中的数据。</li>
<li>Getter： 类似于Vue实例中的计算属性，Getter就是普通的获取state包装函数。</li>
<li>Mutations: Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutations 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。</li>
<li>Action: action可以触发Mutations，不能直接改变state。</li>
</ul>
<p>看下面一张图了解一下Vuex整体的数据流动：</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/04vuex%E6%A8%A1%E5%9E%8B.png" alt=""></p>
<h2 id="Vuex实例demo"><a href="#Vuex实例demo" class="headerlink" title="Vuex实例demo"></a>Vuex实例demo</h2><p>可能前面的图和概念都太多了，先看一个例子，简单了解一下Vuex中的仓库的数据 怎么整合到 Vue的实例中去。</p>
<p>创建Vuexdemo的项目</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 通过vue-cli创建vuexdemo的项目，注意首先cd到你的存放项目代码的目录</div><div class="line">vue init webpack vuexdemo</div><div class="line"><span class="meta"></span></div><div class="line"># 过程中，会有几个选项你可以选择输入Y或者n来开启或者关闭某些选项。</div><div class="line"><span class="meta"></span></div><div class="line"># 创建完成后，就可以通过以下命令，进行初始化和安装相关的依赖项了。</div><div class="line">cd vuexdemo</div><div class="line">npm install</div><div class="line">npm run dev</div><div class="line"><span class="meta"></span></div><div class="line"># 然后安装 vuex</div><div class="line">npm i vuex -S</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Vue入门之Vuex实战
    
    </summary>
    
      <category term="VueJS" scheme="http://yoursite.com/categories/VueJS/"/>
    
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="angularjs" scheme="http://yoursite.com/tags/angularjs/"/>
    
      <category term="Vue组件间通信" scheme="http://yoursite.com/tags/Vue%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Vue(Vue入门之路由详解)</title>
    <link href="http://yoursite.com/2017/06/25/vue%E5%85%A5%E9%97%A8%E4%B9%8B%E8%B7%AF%E7%94%B1/"/>
    <id>http://yoursite.com/2017/06/25/vue入门之路由/</id>
    <published>2017-06-25T05:17:02.000Z</published>
    <updated>2017-06-25T09:06:14.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>Vue入门之路由详解</code></center></p>
<hr>
<h1 id="Vue路由详解"><a href="#Vue路由详解" class="headerlink" title="Vue路由详解"></a>Vue路由详解</h1><blockquote>
<p>对于前端来说，其实浏览器配合超级连接就很好的实现了路由功能。但是对于单页面应用来说，浏览器和超级连接的跳转方式已经不能适用，<br>所以各大框架纷纷给出了单页面应用的解决路由跳转的方案。</p>
<p>Vue框架的兼容性非常好，可以很好的跟其他第三方的路由框架进行结合。当然官方也给出了路由的方案： <code>vue-router</code>;<br>建议还是用官方的最好，使用量也是最大，相对来说Vue框架的升级路由组件升级也会及时跟上，所以为了以后的维护和升级方便还是使用Vue自家的东西最好。</p>
</blockquote>
<h2 id="Vue-router的版本对应"><a href="#Vue-router的版本对应" class="headerlink" title="Vue-router的版本对应"></a>Vue-router的版本对应</h2><blockquote>
<p>注意: vue-router@2.x 只适用于 Vue 2.x 版本。<br>vue-router@1.x 对应于Vue1.x版本。</p>
</blockquote>
<ul>
<li>的Github地址：<a href="https://github.com/vuejs/vue-router" target="_blank" rel="external">vue-router</a></li>
<li><a href="https://router.vuejs.org/zh-cn/" target="_blank" rel="external">文档地址</a></li>
</ul>
<h2 id="vue-router的安装使用"><a href="#vue-router的安装使用" class="headerlink" title="vue-router的安装使用"></a>vue-router的安装使用</h2><ul>
<li>CDN连接方式</li>
</ul>
<p><code>https://unpkg.com/vue-router/dist/vue-router.js</code></p>
<ul>
<li>npm 安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install vue-router</div></pre></td></tr></table></figure>
<h2 id="vue-router-入门demo"><a href="#vue-router-入门demo" class="headerlink" title="vue-router 入门demo"></a>vue-router 入门demo</h2><p>vue-router开发的步骤：</p>
<ul>
<li>第一步： 引入vue和vue-router包。<blockquote>
<p>可以使用cdn的方式或者npm的方式。如果配合npm和webpack的话可以直接作为一个模块导入即可。但是作为初学入门的话建议还是<br>直接使用cdn包的形式，先学会怎么用路由。</p>
</blockquote>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue-router/dist/vue-router.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>第二步： 定义路由跳转的组件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 定义（路由）组件。</span></div><div class="line"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;foo&lt;/div&gt;'</span> &#125;</div><div class="line"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;bar&lt;/div&gt;'</span> &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>第三步： 定义路由规则对象</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 每个路由path应该映射一个组件。 其中"component" 可以是</span></div><div class="line"><span class="comment">// 通过 Vue.extend() 创建的组件构造器，</span></div><div class="line"><span class="comment">// 或者，只是一个组件配置对象。</span></div><div class="line"><span class="keyword">const</span> routes = [</div><div class="line">  &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;,</div><div class="line">  &#123; <span class="attr">path</span>: <span class="string">'/bar'</span>, <span class="attr">component</span>: Bar &#125;</div><div class="line">]</div><div class="line"></div><div class="line"><span class="comment">// 创建路由对象</span></div><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">  routes <span class="comment">// （缩写）相当于 routes: routes，es6的新语法</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>第四步： 创建Vue对象，并加重上面创建的路由对象</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 记得要通过 router 配置参数注入路由，</span></div><div class="line"><span class="comment">// 从而让整个应用都有路由功能</span></div><div class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  router</div><div class="line">&#125;).$mount(<span class="string">'#app'</span>)</div></pre></td></tr></table></figure>
<ul>
<li>第五步： 在模板中编写路由跳转链接</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/foo"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/bar"</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>最终的代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue-router/dist/vue-router.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello App!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 使用 router-link 组件来导航. --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 通过传入 `to` 属性指定链接. --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;router-link&gt; 默认会被渲染成一个 `&lt;a&gt;` 标签 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/foo"</span>&gt;</span>Go to Foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/bar"</span>&gt;</span>Go to Bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 路由出口 --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">// 1. 定义（路由）组件。</span></div><div class="line"><span class="comment">// 可以从其他文件 import 进来</span></div><div class="line"><span class="keyword">const</span> Foo = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;foo&lt;/div&gt;'</span> &#125;</div><div class="line"><span class="keyword">const</span> Bar = &#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;bar&lt;/div&gt;'</span> &#125;</div><div class="line"></div><div class="line"><span class="comment">// 2. 定义路由</span></div><div class="line"><span class="keyword">const</span> routes = [</div><div class="line">  &#123; <span class="attr">path</span>: <span class="string">'/foo'</span>, <span class="attr">component</span>: Foo &#125;,</div><div class="line">  &#123; <span class="attr">path</span>: <span class="string">'/bar'</span>, <span class="attr">component</span>: Bar &#125;</div><div class="line">]</div><div class="line"></div><div class="line"><span class="comment">// 3. 创建 router 实例，然后传 `routes` 配置</span></div><div class="line"><span class="comment">// 你还可以传别的配置参数, 不过先这么简单着吧。</span></div><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">  routes <span class="comment">// （缩写）相当于 routes: routes</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 4. 创建和挂载根实例。</span></div><div class="line"><span class="comment">// 记得要通过 router 配置参数注入路由，</span></div><div class="line"><span class="comment">// 从而让整个应用都有路由功能</span></div><div class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  router</div><div class="line">&#125;).$mount(<span class="string">'#app'</span>)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="使用vue-router的综合实例"><a href="#使用vue-router的综合实例" class="headerlink" title="使用vue-router的综合实例"></a>使用vue-router的综合实例</h2><p>下面是一个综合的例子, 页面上有几个导航的按钮，然后通过点击不同的按钮，可以在当前页面切换不同的组件。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之extend全局方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue-router/dist/vue-router.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">  ul, li &#123; list-style: none; &#125;</div><div class="line">  ul &#123; overflow: hidden; &#125;</div><div class="line">  li &#123; float: left; width: 100px; &#125;</div><div class="line">  h2 &#123; background-color: #903;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">top-bar</span>&gt;</span> <span class="tag">&lt;/<span class="name">top-bar</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>email to: &#123;&#123; email &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">"view one"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">footer-bar</span>&gt;</span><span class="tag">&lt;/<span class="name">footer-bar</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> topbarTemp = <span class="string">`</span></div><div class="line">      &lt;nav&gt;</div><div class="line">        &lt;ul&gt;</div><div class="line">          &lt;li v-for="item in NavList"&gt;</div><div class="line">            &lt;router-link :to="item.url"&gt;&#123;&#123; item.name &#125;&#125;&lt;/router-link&gt;</div><div class="line">          &lt;/li&gt;</div><div class="line">        &lt;/ul&gt;</div><div class="line">      &lt;/nav&gt;</div><div class="line">    `;</div><div class="line">    <span class="comment">// 定义组件：topbar</span></div><div class="line">    Vue.component(<span class="string">'top-bar'</span>, &#123;</div><div class="line">      <span class="attr">template</span>: topbarTemp,</div><div class="line">      <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">          <span class="attr">NavList</span>: [</div><div class="line">            &#123; <span class="attr">name</span>: <span class="string">'首页'</span>, <span class="attr">url</span>: <span class="string">'/home'</span>&#125;,</div><div class="line">            &#123; <span class="attr">name</span>: <span class="string">'产品'</span>, <span class="attr">url</span>: <span class="string">'/product'</span>&#125;,</div><div class="line">            &#123; <span class="attr">name</span>: <span class="string">'服务'</span>, <span class="attr">url</span>: <span class="string">'/service'</span>&#125;,</div><div class="line">            &#123; <span class="attr">name</span>: <span class="string">'关于'</span>, <span class="attr">url</span>: <span class="string">'/about'</span>&#125;</div><div class="line">          ]</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    Vue.component(<span class="string">'footer-bar'</span>, &#123;  <span class="comment">// 定义组件 footerbar</span></div><div class="line">      template: <span class="string">`</span></div><div class="line">        &lt;footer&gt;</div><div class="line">          &lt;hr/&gt;</div><div class="line">          &lt;p&gt;版权所有@flydragon&lt;p&gt;</div><div class="line">        &lt;/footer&gt;</div><div class="line">      `</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 创建home模块</span></div><div class="line">    <span class="keyword">var</span> home = &#123;</div><div class="line">      <span class="attr">template</span>: <span class="string">`&lt;div&gt; &lt;h2&gt;&#123;&#123; msg &#125;&#125;&lt;h2&gt;&lt;/div&gt;`</span>,</div><div class="line">      <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123; <span class="attr">msg</span>: <span class="string">'this is home view'</span> &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="comment">// 创建product 模块</span></div><div class="line">    <span class="keyword">var</span> product = &#123;</div><div class="line">      <span class="attr">template</span>: <span class="string">`&lt;div&gt; &#123;&#123; msg &#125;&#125;&lt;/div&gt;`</span>,</div><div class="line">      <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123; <span class="attr">msg</span>: <span class="string">'this is product view'</span> &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 定义路由对象</span></div><div class="line">    <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">      <span class="attr">routes</span>: [</div><div class="line">        &#123; <span class="attr">path</span>: <span class="string">'/home'</span>, <span class="attr">component</span>: home &#125;,</div><div class="line">        &#123; <span class="attr">path</span>: <span class="string">'/product'</span>, <span class="attr">component</span>: product &#125;</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 初始化一个Vue实例</span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">       <span class="attr">email</span>: <span class="string">'flydragon@gmail.com'</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">router</span>: router</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="路由参数获取"><a href="#路由参数获取" class="headerlink" title="路由参数获取"></a>路由参数获取</h2><p>定义路由路径的时候，可以指定参数。参数需要通过路径进行标识：<code>/user/:id</code>就是定义了一个规则，/user开头，然后后面的就是id参数的值。<br>比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">路由规则：  /user/:id</div><div class="line">/user/9   =&gt;  id = 9</div><div class="line">/user/8   =&gt;  id = 8</div><div class="line">/user/1   =&gt;  id = 1</div></pre></td></tr></table></figure></p>
<p>然后在跳转后的vue中可以通过<code>this.$route.params.参数名</code>获取对应的参数。<br>比如代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之extend全局方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue-router/dist/vue-router.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user/9"</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/stu/malun"</span>&gt;</span>学生<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> user = &#123;</div><div class="line">      <span class="attr">template</span>: <span class="string">`</span></div><div class="line">        &lt;div&gt;user id is : &#123;&#123; $route.params.id &#125;&#125;&lt;/div&gt;</div><div class="line">      `</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> stu = &#123;</div><div class="line">      <span class="attr">template</span>: <span class="string">`</span></div><div class="line">        &lt;div&gt;</div><div class="line">          &lt;h2&gt;&#123;&#123; getName &#125;&#125;&lt;/h2&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      `,</div><div class="line">      <span class="attr">computed</span>: &#123;</div><div class="line">        <span class="attr">getName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">this</span>.$route.params.name;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">      <span class="attr">routes</span>: [</div><div class="line">        &#123; <span class="attr">path</span>: <span class="string">'/user/:id'</span>, <span class="attr">component</span>: user &#125;,</div><div class="line">        &#123; <span class="attr">path</span>: <span class="string">'/stu/:name'</span>, <span class="attr">component</span>: stu &#125;</div><div class="line">      ]</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">router</span>: router</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="js控制路由跳转"><a href="#js控制路由跳转" class="headerlink" title="js控制路由跳转"></a>js控制路由跳转</h2><p>上面我们演示的都是通过router-link进行跳转。 其实我们还可以通过js编程的方式进行路由的跳转。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 当前路由的view跳转到 /home</span></div><div class="line">router.push(<span class="string">'home'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 对象,  跳转到/home</span></div><div class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'home'</span> &#125;)</div><div class="line"></div><div class="line"><span class="comment">// 命名的路由</span></div><div class="line">router.push(&#123; <span class="attr">name</span>: <span class="string">'user'</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="number">123</span> &#125;&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 带查询参数，变成 /register?plan=private</span></div><div class="line">router.push(&#123; <span class="attr">path</span>: <span class="string">'register'</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">'private'</span> &#125;&#125;)</div></pre></td></tr></table></figure>
<h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>嵌套路由跟普通路由基本没有什么区别。但是可以让vue开发变的非常灵活。<br>官网这块写的也非常好，我就直接拷贝了（原谅我吧。）<br>实际生活中的应用界面，通常由多层嵌套的组件组合而成。同样地，URL 中各段动态路径也按某种结构对应嵌套的各层组件，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/user/foo/profile                     /user/foo/posts</div><div class="line">+------------------+                  +-----------------+</div><div class="line">| User             |                  | User            |</div><div class="line">| +--------------+ |                  | +-------------+ |</div><div class="line">| | Profile      | |  +------------&gt;  | | Posts       | |</div><div class="line">| |              | |                  | |             | |</div><div class="line">| +--------------+ |                  | +-------------+ |</div><div class="line">+------------------+                  +-----------------+</div><div class="line">借助 vue-router，使用嵌套路由配置，就可以很简单地表达这种关系。</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">const User = &#123;</div><div class="line">  template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>User &#123;&#123; $route.params.id &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>'</div><div class="line">&#125;</div><div class="line"></div><div class="line">const router = new VueRouter(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123; path: '/user/:id', component: User &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div><div class="line">这里的 <span class="tag">&lt;<span class="name">router-view</span>&gt;</span> 是最顶层的出口，渲染最高级路由匹配到的组件。同样地，一个被渲染组件同样可以包含自己的嵌套 <span class="tag">&lt;<span class="name">router-view</span>&gt;</span>。例如，在 User 组件的模板添加一个 <span class="tag">&lt;<span class="name">router-view</span>&gt;</span>：</div><div class="line"></div><div class="line">const User = &#123;</div><div class="line">  template: `</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>User &#123;&#123; $route.params.id &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  `</div><div class="line">&#125;</div><div class="line">要在嵌套的出口中渲染组件，需要在 VueRouter 的参数中使用 children 配置：</div><div class="line"></div><div class="line">const router = new VueRouter(&#123;</div><div class="line">  routes: [</div><div class="line">    &#123; path: '/user/:id', component: User,</div><div class="line">      children: [</div><div class="line">        &#123;</div><div class="line">          // 当 /user/:id/profile 匹配成功，</div><div class="line">          // UserProfile 会被渲染在 User 的 <span class="tag">&lt;<span class="name">router-view</span>&gt;</span> 中</div><div class="line">          path: 'profile',</div><div class="line">          component: UserProfile</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          // 当 /user/:id/posts 匹配成功</div><div class="line">          // UserPosts 会被渲染在 User 的 <span class="tag">&lt;<span class="name">router-view</span>&gt;</span> 中</div><div class="line">          path: 'posts',</div><div class="line">          component: UserPosts</div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>要注意，以 / 开头的嵌套路径会被当作根路径。 这让你充分的使用嵌套组件而无须设置嵌套的路径。<br>你会发现，children 配置就是像 routes 配置一样的路由配置数组，所以呢，你可以嵌套多层路由。</p>
<p>此时，基于上面的配置，当你访问 /user/foo 时，User 的出口是不会渲染任何东西，这是因为没有匹配到合适的子路由。如果你想要渲染点什么，可以提供一个 空的 子路由：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</div><div class="line">  <span class="attr">routes</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">path</span>: <span class="string">'/user/:id'</span>, <span class="attr">component</span>: User,</div><div class="line">      <span class="attr">children</span>: [</div><div class="line">        <span class="comment">// 当 /user/:id 匹配成功，</span></div><div class="line">        <span class="comment">// UserHome 会被渲染在 User 的 &lt;router-view&gt; 中</span></div><div class="line">        &#123; <span class="attr">path</span>: <span class="string">''</span>, <span class="attr">component</span>: UserHome &#125;,</div><div class="line"></div><div class="line">        <span class="comment">// ...其他子路由</span></div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实作为入门的话，暂时先掌握这些知识，后续</p>
]]></content>
    
    <summary type="html">
    
      Vue路由详解
    
    </summary>
    
      <category term="VueJS" scheme="http://yoursite.com/categories/VueJS/"/>
    
    
      <category term="Vuejs" scheme="http://yoursite.com/tags/Vuejs/"/>
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue路由" scheme="http://yoursite.com/tags/Vue%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>Vue(Vue列表渲染及条件渲染实战)</title>
    <link href="http://yoursite.com/2017/06/24/vue%E5%85%A5%E9%97%A8%E4%B9%8B%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93/"/>
    <id>http://yoursite.com/2017/06/24/vue入门之列表渲染/</id>
    <published>2017-06-24T05:17:02.000Z</published>
    <updated>2017-06-24T02:47:14.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>Vue列表渲染及条件渲染实战</code></center></p>
<hr>
<h1 id="Vue列表渲染及条件渲染实战"><a href="#Vue列表渲染及条件渲染实战" class="headerlink" title="Vue列表渲染及条件渲染实战"></a>Vue列表渲染及条件渲染实战</h1><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p>有时候我们要根据数据的情况，决定标签是否进行显示或者有其他动作。最常见的就是，表格渲染的时候，如果表格没有数据，就显示无数据。如果有数据就显示表格数据。<br>Vue帮我们提供了一个<code>v-if</code>的指令，帮助我们完成判断的模板处理。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 当ok为true的时候，输出： Yes， 否则输出： No --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">      <span class="attr">ok</span>: <span class="literal">true</span>      <span class="comment">// true,返回：Yes，   false=&gt; No</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>v-if</code>指令可以根据数据绑定的情况进行插入标签或者移除标签。<br>当然，如果熟悉js的都清楚，有if，肯定会有else。 Vue提供的是 <code>v-else</code>指令。</p>
<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><h3 id="基本v-for循环渲染标签"><a href="#基本v-for循环渲染标签" class="headerlink" title="基本v-for循环渲染标签"></a>基本v-for循环渲染标签</h3><p>模板引擎都会提供循环的支持。Vue也不例外，Vue是提供了一个<code>v-for</code>指令。基本的用法类似于foreach的用法。还是看例子最直接，上代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 每次for循环，都会创建一个tr标签。item是遍历的元素。 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"item in UserList"</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.age &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.address &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">     <span class="attr">UserList</span>: [</div><div class="line">      &#123;<span class="string">'name'</span>: <span class="string">'malun'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'address'</span>: <span class="string">'北京黑地下室'</span>&#125;,</div><div class="line">      &#123;<span class="string">'name'</span>: <span class="string">'flydragon'</span>, <span class="string">'age'</span>: <span class="number">22</span>, <span class="string">'address'</span>: <span class="string">'厦门的很多热的地方'</span>&#125;,</div><div class="line">      &#123;<span class="string">'name'</span>: <span class="string">'temp'</span>, <span class="string">'age'</span>: <span class="number">25</span>, <span class="string">'address'</span>: <span class="string">'东北松花江上'</span>&#125;</div><div class="line">     ]</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="Template循环渲染多标签"><a href="#Template循环渲染多标签" class="headerlink" title="Template循环渲染多标签"></a>Template循环渲染多标签</h3><p>上面的例子，我们演示的是 每次循环输出一个tr标签。如果我们希望每次循环生成两个tr标签呢？如果还有生成其他的标签呢？</p>
<p>Vue给我们提供了template标签，供我们用于v-for循环中进行处理。</p>
<p>上代码喽：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 通过template标签，可以一次循环，输出两个li标签 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="表格显示的综合案例"><a href="#表格显示的综合案例" class="headerlink" title="表格显示的综合案例"></a>表格显示的综合案例</h2><p>下面是一个综合的案例，每秒钟往表格中添加一条数据。<br>本案例综合使用了v-if 和 v-for循环综合案例。</p>
<h3 id="关于v-for对应的数组的更新"><a href="#关于v-for对应的数组的更新" class="headerlink" title="关于v-for对应的数组的更新"></a>关于v-for对应的数组的更新</h3><p>由于Vue的机制就是检测数据的变化，自动跟新HTML。数组的变化，Vue之检测部分函数，检测的函数执行时才会触发视图更新。这些方法如下：</p>
<ul>
<li>push()</li>
<li>pop()</li>
<li>shift()</li>
<li>unshift()</li>
<li>splice()</li>
<li>sort()</li>
<li>reverse()</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之动态显示表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">      <span class="comment">&lt;!-- 如果列表有数据，直接输出表格数据，没有数据提示用户没有数据 --&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-if</span>=<span class="string">"UserList.length &gt; 0"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"item in UserList"</span> &gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.age &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.address &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">v-else</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"3"</span>&gt;</span>没有数据奥！<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">       <span class="attr">UserList</span>: []</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 每秒钟插入一条数据。</span></div><div class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      app.UserList.push(&#123;<span class="string">'name'</span>: <span class="string">'malun'</span>, <span class="string">'age'</span>: <span class="number">18</span>, <span class="string">'address'</span>: <span class="string">'北京黑地下室'</span>&#125;);</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="总结列表和条件绑定"><a href="#总结列表和条件绑定" class="headerlink" title="总结列表和条件绑定"></a>总结列表和条件绑定</h2><p>列表的使用其实本质还是js的衍生使用，对于有js开发基础的没有什么难度。关键是多写几个案例就会详细通了。</p>
]]></content>
    
    <summary type="html">
    
      Vue列表渲染及条件渲染实战
    
    </summary>
    
      <category term="VueJS" scheme="http://yoursite.com/categories/VueJS/"/>
    
    
      <category term="Vuejs" scheme="http://yoursite.com/tags/Vuejs/"/>
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue列表渲染及条件渲染" scheme="http://yoursite.com/tags/Vue%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93%E5%8F%8A%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>Vue(Vue实例详解与生命周期)</title>
    <link href="http://yoursite.com/2017/06/23/vue%E5%85%A5%E9%97%A8%E4%B9%8BVue%E5%AE%9E%E4%BE%8B%E4%B8%8E%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2017/06/23/vue入门之Vue实例与生命周期/</id>
    <published>2017-06-23T05:17:02.000Z</published>
    <updated>2017-06-24T02:46:58.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>Vue实例详解与生命周期</code></center></p>
<hr>
<h1 id="Vue实例详解与生命周期"><a href="#Vue实例详解与生命周期" class="headerlink" title="Vue实例详解与生命周期"></a>Vue实例详解与生命周期</h1><p>Vue的实例是Vue框架的入口，其实也就是前端的ViewModel，它包含了页面中的业务逻辑处理、数据模型等，当然它也有自己的一系列的生命周期的事件钩子，辅助我们进行对整个Vue实例生成、编译、挂载、销毁等过程进行js控制。</p>
<h2 id="Vue实例初始化的选项配置对象详解"><a href="#Vue实例初始化的选项配置对象详解" class="headerlink" title="Vue实例初始化的选项配置对象详解"></a>Vue实例初始化的选项配置对象详解</h2><p>前面我们已经用了很多次 <code>new Vue({...})</code>的代码，而且Vue初始化的选项都已经用了<code>data</code>、<code>methods</code>、<code>el</code>、<code>computed</code>等,估计您看到这里时，应该已经都明白了他们的作用，我们就详细讲解一下他们的使用情况。更详细的请参考<a href="https://cn.vuejs.org/v2/api/#data" target="_blank" rel="external">官网内容</a></p>
<h3 id="Vue实例的data对象"><a href="#Vue实例的data对象" class="headerlink" title="Vue实例的data对象"></a>Vue实例的data对象</h3><ul>
<li>介绍</li>
</ul>
<p>Vue的实例的数据对象data 我们已经用了很多了，数据绑定离不开data里面的数据。也是Vue的核心属性。<br>它是Vue绑定数据到HTML标签的数据源泉，另外Vue框架会自动监视data里面的数据变化，自动更新数据到HTML标签上去。本质原理是：Vue会自动将data里面的数据进行递归抓换成getter和setter，然后就可以自动更新HTML标签了，当然用getter和setter所以老的浏览器Vue支持的不够好。</p>
<ul>
<li><p>data对象的类型：</p>
<ul>
<li>类型是Object或者Function。</li>
<li>如果是组件对象中，data必须是Function类型。【后面学了组件后就明白了，暂时对组件先放放。】</li>
</ul>
<ul>
<li>实例：</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建普通的Vue实例</span></div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">data</span>: data</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 组件定义【后面会详细讲的】</span></div><div class="line"><span class="comment">// Vue.extend() 中 data 必须是函数</span></div><div class="line"><span class="keyword">var</span> Component = Vue.extend(&#123;</div><div class="line">  <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   <span class="comment">//这里必须是函数！！！！</span></div><div class="line">    <span class="keyword">return</span> &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Vue实例的computed"><a href="#Vue实例的computed" class="headerlink" title="Vue实例的computed"></a>Vue实例的computed</h3><ul>
<li>介绍</li>
</ul>
<p>Vue的计算属性（computed)的属性会自动混入Vue的实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例。这就很强大了，然后计算属性中定义的函数里面可以直接使用指向了vue实例的this，非常方便的啊。</p>
<ul>
<li>类型</li>
</ul>
<p><code>{ 键：函数}</code><br><code>{ [key: string]: Function | { get: Function, set: Function } }</code><br>当然，可以省略setter,如果省略了setter，那么值就可以是普通函数，但是必须有返回值。</p>
<ul>
<li>官方的实例<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var vm = new Vue(&#123;</div><div class="line">  data: &#123; a: 1 &#125;,</div><div class="line">  computed: &#123;</div><div class="line">    // 仅读取，值只须为函数</div><div class="line">    aDouble: function () &#123;</div><div class="line">      return this.a * 2</div><div class="line">    &#125;,</div><div class="line">    // 读取和设置</div><div class="line">    aPlus: &#123;</div><div class="line">      get: function () &#123;</div><div class="line">        return this.a + 1</div><div class="line">      &#125;,</div><div class="line">      set: function (v) &#123;</div><div class="line">        this.a = v - 1</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">vm.aPlus   // -&gt; 2</div><div class="line">vm.aPlus = 3</div><div class="line">vm.a       // -&gt; 2</div><div class="line">vm.aDouble // -&gt; 4</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h3><ul>
<li><p>类型: { [key: string]: Function }</p>
</li>
<li><p>详细:</p>
</li>
</ul>
<p>methods 将被混入到 Vue 实例中。可以直接通过 VM 实例访问这些方法，或者在指令表达式中使用。方法中的 this 自动绑定为 Vue 实例。</p>
<p>注意，不应该使用箭头函数来定义 method 函数 (例如 plus: () =&gt; this.a++)。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.a 将是 undefined。</p>
<ul>
<li>示例:</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">data</span>: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;,</div><div class="line">  <span class="attr">methods</span>: &#123;</div><div class="line">    <span class="attr">plus</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.a++</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">vm.plus()</div><div class="line">vm.a <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><ul>
<li>类型</li>
</ul>
<p><code>{ [key: string]: string | Function | Object }</code></p>
<ul>
<li>详细:</li>
</ul>
<p>一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个属性。</p>
<ul>
<li>示例:</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">a</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">b</span>: <span class="number">2</span>,</div><div class="line">    <span class="attr">c</span>: <span class="number">3</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">watch</span>: &#123;</div><div class="line">    <span class="comment">// 监控a变量变化的时候，自动执行此函数</span></div><div class="line">    a: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'new: %s, old: %s'</span>, val, oldVal)</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 深度 watcher</span></div><div class="line">    c: &#123;</div><div class="line">      <span class="attr">handler</span>: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;,</div><div class="line">      <span class="attr">deep</span>: <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">vm.a = <span class="number">2</span> <span class="comment">// -&gt; new: 2, old: 1</span></div><div class="line"><span class="comment">//注意，不应该使用箭头函数来定义 watcher 函数 (例如 searchQuery: newValue =&gt; this.updateAutocomplete(newValue))。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.updateAutocomplete 将是 undefined。</span></div></pre></td></tr></table></figure>
<p>参考综合案例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之数据监控<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; number &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"btnGetNumber"</span> <span class="attr">value</span>=<span class="string">"增加"</span> <span class="attr">v-on:click</span>=<span class="string">"getNumber()"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">number</span>: <span class="number">1</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="comment">// 事件响应方法的逻辑代码</span></div><div class="line">        getNumber: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">          <span class="keyword">this</span>.number += <span class="number">1</span>;   <span class="comment">// 不管是内联方法调用，还是绑定事件处理器两种方式执行事件响应方法的时候 this都是指向 app</span></div><div class="line">        &#125;</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">watch</span>: &#123;</div><div class="line">        <span class="comment">// 监控number的变化，并自动执行下面的函数</span></div><div class="line">        number: <span class="function"><span class="keyword">function</span> (<span class="params">val, oldVal</span>) </span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'val:'</span> + val + <span class="string">' - oldVal: '</span> + oldVal);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="设置el的详解"><a href="#设置el的详解" class="headerlink" title="设置el的详解"></a>设置el的详解</h3><ul>
<li>类型</li>
</ul>
<p><code>string | HTMLElement</code></p>
<p>限制： 只在由 new 创建的实例中遵守。</p>
<ul>
<li>详细：</li>
</ul>
<p>提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标,也就是说Vue绑定数据到哪里去找。可以是<code>CSS 选择器</code>，也可以是一个 <code>HTMLElement实例</code>。</p>
<p>在实例挂载之后(生命周期的内容后面会详细讲的奥)， 元素可以用 vm.$el 访问。</p>
<p>如果这个选项在实例化时有作用，实例将立即进入编译过程，否则，需要显式调用 vm.$mount() 手动开启编译。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 几乎所有例子都用到这个，所以就不再赘述</span></div><div class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">  ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="Vue实例的生命周期"><a href="#Vue实例的生命周期" class="headerlink" title="Vue实例的生命周期"></a>Vue实例的生命周期</h2><p>Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、卸载等一系列过程，我们称这是Vue的生命周期。通俗说就是Vue实例从创建到销毁的过程，就是生命周期。</p>
<p>在Vue的整个生命周期中，它提供了一系列的事件，可以让我们注册js方法，可以让我们达到控制整个过程的目的地，哇赛，如果你搞过Asp.Net WebForm的话，你会发现整个就是WebForm的翻版嘛哈哈。值得注意的是，在这些事件响应方法中的this直接指向的是vue的实例。</p>
<p>首先看看下面官网的一张生命周期的图，我做一下标注，看看整体的流程，后面我们上代码做一下效果。</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/lifecycle-%E6%A0%87%E6%B3%A8%E7%89%88%E6%9C%AC.png" alt="生命周期图"></p>
<p>Vue提供的可以注册的钩子都在上图片的红色框标注。<br>他们是：</p>
<ul>
<li><code>beforeCreate</code></li>
</ul>
<p>在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。</p>
<ul>
<li><code>created</code></li>
</ul>
<p>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p>
<ul>
<li><code>beforeMount</code></li>
</ul>
<p>在挂载开始之前被调用：相关的 render 函数首次被调用。</p>
<ul>
<li><code>mounted</code></li>
</ul>
<p>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。</p>
<ul>
<li><code>beforeUpdate</code></li>
</ul>
<p>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。<br>你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p>
<ul>
<li><code>updated</code></li>
</ul>
<p>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p>
<p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。</p>
<p>该钩子在服务器端渲染期间不被调用。</p>
<ul>
<li><code>beforeDestroy</code></li>
</ul>
<p>实例销毁之前调用。在这一步，实例仍然完全可用。</p>
<ul>
<li><code>destroyed</code></li>
</ul>
<p>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。<br>该钩子在服务器端渲染期间不被调用。</p>
<p>接下来我们做一个例子，看一下Vue中所有的生命周期怎么用的。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之生命周期<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; number &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"btnSetNumber"</span> <span class="attr">v-model</span>=<span class="string">"number"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">number</span>: <span class="number">1</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">beforeCreate</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'beforeCreate 钩子执行...'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.number)</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">cteated</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'cteated 钩子执行...'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.number)</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">beforeMount</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'beforeMount 钩子执行...'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.number)</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'mounted 钩子执行...'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.number)</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">beforeUpdate</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'beforeUpdate 钩子执行...'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.number)</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">updated</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'updated 钩子执行...'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.number)</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">beforeDestroy</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'beforeDestroy 钩子执行...'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.number)</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">destroyed</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'destroyed 钩子执行...'</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.number)</div><div class="line">      &#125;,</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>再看一个综合的实战的例子，可能涉及到ajax和组件，不过先看一下vue的生命周期的例子的用法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Axios <span class="keyword">from</span> <span class="string">'axios'</span>       <span class="comment">// 这是一个轻量级的ajax库，import是es6模块导入的语法。</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;                <span class="comment">// 这是一个vue的模块，后面讲奥。</span></div><div class="line">  name: <span class="string">'app'</span>,</div><div class="line">  <span class="attr">components</span>: &#123;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">list</span>: []</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;          <span class="comment">// 挂在完成后的生命周期钩子注册。</span></div><div class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 等待下一次更新完成后执行业务处理代码。</span></div><div class="line">      Axios.get(<span class="string">'/api/menulist'</span>, &#123;<span class="comment">// 将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新</span></div><div class="line">        params: &#123;</div><div class="line">        &#125;</div><div class="line">      &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.list = res.data</div><div class="line">      &#125;.bind(<span class="keyword">this</span>))</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Vue实例的全局配置"><a href="#Vue实例的全局配置" class="headerlink" title="Vue实例的全局配置"></a>Vue实例的全局配置</h2><p>这一块都是一些小的知识点，我就不赘述了，直接copy <a href="https://cn.vuejs.org/v2/api/#silent" target="_blank" rel="external">官网</a><br>Vue.config 是一个对象，包含 Vue 的全局配置。可以在启动应用之前修改下列属性：</p>
<ul>
<li><p>silent</p>
<ul>
<li><p>类型： boolean</p>
</li>
<li><p>默认值： false</p>
</li>
<li><p>用法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Vue.config.silent = <span class="literal">true</span></div><div class="line"><span class="comment">//取消 Vue 所有的日志与警告。</span></div></pre></td></tr></table></figure>
</li>
<li><p>optionMergeStrategies</p>
</li>
<li><p>类型： { [key: string]: Function }</p>
</li>
<li><p>默认值： {}</p>
</li>
<li><p>用法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Vue.config.optionMergeStrategies._my_option = <span class="function"><span class="keyword">function</span> (<span class="params">parent, child, vm</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> child + <span class="number">1</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> Profile = Vue.extend(&#123;</div><div class="line">  <span class="attr">_my_option</span>: <span class="number">1</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// Profile.options._my_option = 2</span></div><div class="line"><span class="comment">//自定义合并策略的选项。</span></div><div class="line"><span class="comment">//合并策略选项分别接受第一个参数作为父实例，第二个参数为子实例，Vue实例上下文被作为第三个参数传入。</span></div></pre></td></tr></table></figure>
</li>
<li><p>devtools</p>
</li>
<li><p>类型： boolean</p>
</li>
<li><p>默认值： true (生产版为 false)</p>
</li>
<li><p>用法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 务必在加载 Vue 之后，立即同步设置以下内容</span></div><div class="line">Vue.config.devtools = <span class="literal">true</span></div><div class="line"><span class="comment">//配置是否允许 vue-devtools 检查代码。开发版本默认为 true，生产版本默认为 false。生产版本设为 true 可以启用检查。</span></div></pre></td></tr></table></figure>
</li>
<li><p>errorHandler</p>
</li>
<li><p>类型： Function</p>
</li>
<li><p>默认值： 默认抛出错误</p>
</li>
<li><p>用法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Vue.config.errorHandler = <span class="function"><span class="keyword">function</span> (<span class="params">err, vm</span>) </span>&#123;</div><div class="line">  <span class="comment">// handle error</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例。</span></div><div class="line"><span class="comment">//Sentry, an error tracking service, provides official integration using this option.</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>ignoredElements</p>
<ul>
<li><p>类型: Array<string></string></p>
</li>
<li><p>默认值: []</p>
</li>
<li><p>用法:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Vue.config.ignoredElements = [</div><div class="line">  <span class="string">'my-custom-web-component'</span>, <span class="string">'another-web-component'</span></div><div class="line">]</div><div class="line">须使 Vue 忽略在 Vue 之外的自定义元素 (e.g., 使用了 Web Components APIs)。否则，它会假设你忘记注册全局组件或者拼错了组件名称，从而抛出一个关于 Unknown custom element 的警告。</div></pre></td></tr></table></figure>
</li>
<li><p>keyCodes</p>
</li>
<li><p>类型： { [key: string]: number | Array<number> }</number></p>
</li>
<li><p>默认值： {}</p>
</li>
<li><p>用法：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Vue.config.keyCodes = &#123;</div><div class="line">  <span class="attr">v</span>: <span class="number">86</span>,</div><div class="line">  <span class="attr">f1</span>: <span class="number">112</span>,</div><div class="line">  <span class="attr">mediaPlayPause</span>: <span class="number">179</span>,</div><div class="line">  <span class="attr">up</span>: [<span class="number">38</span>, <span class="number">87</span>]</div><div class="line">&#125;</div><div class="line"><span class="comment">//给 v-on 自定义键位别名。</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Vue的全局API"><a href="#Vue的全局API" class="headerlink" title="Vue的全局API"></a>Vue的全局API</h2></li>
</ul>
<p>Vue的全局API提供大量的功能，我这里就给大家罗列几个常用的结果，其他的还是参考<a href="https://cn.vuejs.org/v2/api/#全局-API" target="_blank" rel="external">官网</a>.</p>
<h3 id="Vue-nextTick"><a href="#Vue-nextTick" class="headerlink" title="Vue.nextTick"></a>Vue.nextTick</h3><p><code>语法： Vue.nextTick( [callback, context] )</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">参数：</div><div class="line">&#123;Function&#125; [callback]</div><div class="line">&#123;Object&#125; [context]</div></pre></td></tr></table></figure>
<p>用法：<br>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 修改数据</span></div><div class="line">vm.msg = <span class="string">'Hello'</span></div><div class="line"><span class="comment">// DOM 还没有更新</span></div><div class="line">Vue.nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">// DOM 更新了</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Vue-set"><a href="#Vue-set" class="headerlink" title="Vue.set"></a>Vue.set</h3><p><code>语法： Vue.set( object, key, value )</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">参数：</div><div class="line">&#123;Object&#125; object</div><div class="line">&#123;string&#125; key</div><div class="line">&#123;any&#125; value</div><div class="line">返回值： 设置的值.</div></pre></td></tr></table></figure>
<p>用法：<br>设置对象的属性。如果对象是响应式的，确保属性被创建后也是响应式的，同时触发视图更新。这个方法主要用于避开 Vue 不能检测属性被添加的限制。<br>注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。</p>
<h3 id="Vue-compile"><a href="#Vue-compile" class="headerlink" title="Vue.compile"></a>Vue.compile</h3><ul>
<li><p>语法：<br><code>Vue.compile( template )</code></p>
</li>
<li><p>参数：</p>
</li>
</ul>
<p><code>{string} template</code></p>
<ul>
<li>用法：<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在render函数中编译模板字符串。只在独立构建时有效</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> res = Vue.compile(<span class="string">'&lt;div&gt;&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;&lt;/div&gt;'</span>)</div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">msg</span>: <span class="string">'hello'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">render</span>: res.render,</div><div class="line">  <span class="attr">staticRenderFns</span>: res.staticRenderFns</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="全局API总结"><a href="#全局API总结" class="headerlink" title="全局API总结"></a>全局API总结</h3><p>其实还有几个其他的全局API，不打算在这里讲了，比如扩展组件Vue.extend 的用法、Vue.use加载插件、Vue.filter加载过滤器、Vue.directive自定义指令等<br>后面再讲其他Vue的知识点的时候，再加上这些，全局API其实就是Vue类型的静态方法，全局范围内都可以使用的，某些实例的方法本质也是调用了这些全局的，后面用到时候再说。</p>
<h2 id="Vue实例与生命周期总结"><a href="#Vue实例与生命周期总结" class="headerlink" title="Vue实例与生命周期总结"></a>Vue实例与生命周期总结</h2><p>Vue的实例封装的还是挺有艺术性的，很符合开发者的思维规范，它的生命周期也非常清晰，使用起来也非常方便。Vue确实一个好框架。</p>
]]></content>
    
    <summary type="html">
    
      Vue实例详解与生命周期
    
    </summary>
    
      <category term="VueJS" scheme="http://yoursite.com/categories/VueJS/"/>
    
    
      <category term="Vuejs" scheme="http://yoursite.com/tags/Vuejs/"/>
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue实例详解，Vue生命周期" scheme="http://yoursite.com/tags/Vue%E5%AE%9E%E4%BE%8B%E8%AF%A6%E8%A7%A3%EF%BC%8CVue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>Vue(Vue事件处理)</title>
    <link href="http://yoursite.com/2017/06/23/Vue%E5%85%A5%E9%97%A8%E4%B9%8B%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2017/06/23/Vue入门之事件绑定处理/</id>
    <published>2017-06-23T05:17:02.000Z</published>
    <updated>2017-09-06T08:20:36.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>Vue入门之事件处理</code></center></p>
<hr>
<h1 id="Vue事件处理"><a href="#Vue事件处理" class="headerlink" title="Vue事件处理"></a>Vue事件处理</h1><h2 id="监听事件的Vue处理"><a href="#监听事件的Vue处理" class="headerlink" title="监听事件的Vue处理"></a>监听事件的Vue处理</h2><p>Vue提供了协助我们为标签绑定时间的方法，当然我们可以直接用dom原生的方式去绑定事件。Vue提供的指令进行绑定也是非常方便，而且能让ViewModel更简洁，逻辑更彻底。所以还是推荐大家使用的。</p>
<p>Vue提供了<code>v-on</code>指令帮助我们进行事件的绑定。<br>基本的内联事件处理方法[官方demo]：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-1"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 为按钮绑定点击事件，执行counter += 1的任务。 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"counter += 1"</span>&gt;</span>增加 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这个按钮被点击了 &#123;&#123; counter &#125;&#125; 次。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#example-1'</span>,</div><div class="line">  <span class="attr">data</span>: &#123;</div><div class="line">    <span class="attr">counter</span>: <span class="number">0</span></div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="事件处理方法集成到Vue对象"><a href="#事件处理方法集成到Vue对象" class="headerlink" title="事件处理方法集成到Vue对象"></a>事件处理方法集成到Vue对象</h2><p>内联的方式绑定的事件，只能处理简单的事件的处理逻辑。复杂的情况还是封装到js中最方便，也不容易出错。<br>Vue对象中可以添加methods属性，开发者可以把事件处理函数的逻辑放到methods中。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之动态显示表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; number &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"btnGetNumber"</span> <span class="attr">value</span>=<span class="string">"增加[绑定事件处理器]"</span> <span class="attr">v-on:click</span>=<span class="string">"getNumber"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"btnGetNumber"</span> <span class="attr">value</span>=<span class="string">"增加[内联方法调用]"</span> <span class="attr">v-on:click</span>=<span class="string">"getNumber()"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">number</span>: <span class="number">1</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">methods</span>: &#123;</div><div class="line">        <span class="comment">// 事件响应方法的逻辑代码</span></div><div class="line">        getNumber: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">          <span class="keyword">this</span>.number += <span class="number">1</span>;   <span class="comment">// 不管是内联方法调用，还是绑定事件处理器两种方式执行事件响应方法的时候 this都是指向 app</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><p>官网上写的非常好，这块就直接用管网的吧。在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。尽管我们可以在 methods 中轻松实现这点，但更好的方式是：methods 只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。<br>为了解决这个问题， Vue.js 为 v-on 提供了 事件修饰符。通过由点(.)表示的指令后缀来调用修饰符。</p>
<ul>
<li>.stop</li>
<li>.prevent</li>
<li>.capture</li>
<li>.self</li>
<li>.once</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 阻止单击事件冒泡 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 修饰符可以串联  --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- the click event will be triggered at most once --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h2><p>在监听键盘事件时，我们经常需要监测常见的键值。 Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line">记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：</div><div class="line"><span class="comment">&lt;!-- 同上 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 缩写语法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>全部的按键别名：</p>
<ul>
<li>.enter</li>
<li>.tab</li>
<li>.delete (捕获 “删除” 和 “退格” 键)</li>
<li>.esc</li>
<li>.space</li>
<li>.up</li>
<li>.down</li>
<li>.left</li>
<li>.right</li>
<li>.ctrl</li>
<li>.alt</li>
<li>.shift</li>
<li>.meta</li>
</ul>
<h2 id="事件绑定的简写"><a href="#事件绑定的简写" class="headerlink" title="事件绑定的简写"></a>事件绑定的简写</h2><p>Vue中属性的绑定的简写直接是<code>:</code> === ‘v-bind:’<br>而事件的缩写是直接变成<code>@</code>.  也就是说：  <code>v-on:</code> === <code>@</code><br>看下面的例子：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="事件绑定总结"><a href="#事件绑定总结" class="headerlink" title="事件绑定总结"></a>事件绑定总结</h2><p>Vue为了方便大家进行开发，提供了事件的相关的封装，可以让我们方便我们用Vue对事件进行开发，尤其是v-on指令的非常方便的跟Vue对象中methods进行配合进行复杂的事件处理，非常方便。另外事件的事件修饰符和按键修饰符也可以让Vue事件这块锦上添花。</p>
]]></content>
    
    <summary type="html">
    
      Vue事件处理
    
    </summary>
    
      <category term="VueJS" scheme="http://yoursite.com/categories/VueJS/"/>
    
    
      <category term="Vuejs" scheme="http://yoursite.com/tags/Vuejs/"/>
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue事件处理" scheme="http://yoursite.com/tags/Vue%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Vue(入门及简介)</title>
    <link href="http://yoursite.com/2017/06/23/vue%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2017/06/23/vue入门简介/</id>
    <published>2017-06-23T05:17:02.000Z</published>
    <updated>2017-06-24T02:46:52.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>Vue简介及入门</code></center></p>
<hr>
<h1 id="Vue入门之概念及Helloworld"><a href="#Vue入门之概念及Helloworld" class="headerlink" title="Vue入门之概念及Helloworld"></a>Vue入门之概念及Helloworld</h1><h2 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a>Vue简介</h2><p><code>Vue</code>是一个前端的双向绑定类的框架，发音[读音 /vjuː/, 类似于 view]。新的Vue版本参考了React的部分设计，当然也有自己独特的地方，比如Vue的单文件组件开发方式都很有创新，另外Vue自身的一些绑定的语法、用法等都非常精炼，很容易上手，而且第三方的插件都非常丰富，社区非常活跃，最新的文档都有中文版本。而且Vue配合官方的和第三方的库可以实现单文件的组件化开发、SPA等现代化前端开发。<br>详情请参考<a href="https://cn.vuejs.org/" target="_blank" rel="external">Vue官网</a></p>
<h2 id="Vue的入门demo"><a href="#Vue的入门demo" class="headerlink" title="Vue的入门demo"></a>Vue的入门demo</h2><p><code>Vue</code> 可以直接把它当做一个js库使用，所以它可以很容易的接入到你的项目或者单个页面中。甚至你可以只使用它的双向绑定功能。所以它很容易上手。</p>
<p>比如：我们有一个需求，一个网页上一个Div标签，我们有一个json对象存储数据，把json对象上的数据放到Div上去。</p>
<p>接下来是步骤：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">第一步： 创建一个文件夹并创建一个html文件 比如：index.html.</div><div class="line">当如你可以选择你自己的编辑器，我就用VSCode。</div><div class="line"></div><div class="line">第二步：引入Vue库</div><div class="line">&lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</div><div class="line">当然了你可以直接下载Vue的js文件，推荐你直接用上面的cdn即可。</div><div class="line"></div><div class="line">第三步：创建一个Div，给它一个id，比如：app</div><div class="line"></div><div class="line">第四步：创建Vue的对象，并把数据绑定到上面创建好的div上去。</div></pre></td></tr></table></figure></p>
<p>最终的代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span> <span class="comment">&lt;!--第一步：创建文件夹及html文件--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之Helloworld<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--第二步：引入Vue库--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--第三步:创建一个Div--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--Vue的模板的绑定数据的方法， 类似于很多其他前端的模板，可以用两对花括号进行绑定Vue中的数据对象的属性 --&gt;</span></div><div class="line">    &#123;&#123; message &#125;&#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!--第四步：创建Vue的对象，并把数据绑定到上面创建好的div上去。--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;         <span class="comment">// 创建Vue对象。Vue的核心对象。</span></div><div class="line">      el: <span class="string">'#app'</span>,               <span class="comment">// el属性：把当前Vue对象挂载到 div标签上，#app是id选择器</span></div><div class="line">      data: &#123;                   <span class="comment">// data: 是Vue对象中绑定的数据</span></div><div class="line">        message: <span class="string">'Hello Vue!'</span>   <span class="comment">// message 自定义的数据</span></div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>最终的结果就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello Vue!</div></pre></td></tr></table></figure></p>
<h2 id="Vue的Helloworld总结"><a href="#Vue的Helloworld总结" class="headerlink" title="Vue的Helloworld总结"></a>Vue的Helloworld总结</h2><ul>
<li>Vue构造函数的：选项el属性，就是element缩写，当前Vue对象挂载到哪个标签上的语法，支持CSS选择器或者dom对象，一般用id选择器选择当前页面的标签。</li>
<li>Vue的选项：data属性是自定义数据。这里我们只是演示了一个message属性，vue会把自定义的数据可以与html的模板数据进行绑定。</li>
<li>Vue 数据绑定的方式就是用&#123;&#123;  &#125;&#125;，类似于handlebars.</li>
<li>上面这个demo就是演示了Vue的绑定数据的基本模型。注意点，标签先创建好了之后，再创建Vue对象，具体你应该懂吧。</li>
</ul>
<p><img src="http://orzuutv5f.bkt.clouddn.com/01vue-helloworld.png" alt="helloworld"></p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了Vue的入门及简单介绍
    
    </summary>
    
      <category term="VueJS" scheme="http://yoursite.com/categories/VueJS/"/>
    
    
      <category term="Vuejs" scheme="http://yoursite.com/tags/Vuejs/"/>
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue的入门简介" scheme="http://yoursite.com/tags/Vue%E7%9A%84%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/"/>
    
  </entry>
  
  <entry>
    <title>Vue(数据绑定)</title>
    <link href="http://yoursite.com/2017/06/23/vue%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    <id>http://yoursite.com/2017/06/23/vue数据绑定/</id>
    <published>2017-06-23T05:17:02.000Z</published>
    <updated>2017-06-23T11:44:30.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>Vue数据绑定</code></center></p>
<hr>
<h1 id="Vue入门之数据绑定"><a href="#Vue入门之数据绑定" class="headerlink" title="Vue入门之数据绑定"></a>Vue入门之数据绑定</h1><h2 id="什么是双向绑定？"><a href="#什么是双向绑定？" class="headerlink" title="什么是双向绑定？"></a>什么是双向绑定？</h2><p>Vue框架很核心的功能就是双向的数据绑定。<br>双向是指：HTML标签数据 绑定到 Vue对象，另外反方向数据也是绑定的。通俗点说就是，Vue对象的改变会直接影响到HTML的标签的变化，而且标签的变化也会反过来影响Vue对象的属性的变化。<br>这样以来，就彻底变革了之前Dom的开发方式，之前Dom驱动的开发方式尤其是以jQuery为主的开发时代，都是dom变化后，触发js事件，然后在事件中通过js代码取得标签的变化，再跟后台进行交互，然后根据后台返回的结果再更新HTML标签，异常的繁琐。有了Vue这种双向绑定，让开发人员只需要关心json数据的变化即可，Vue自动映射到HTML上，而且HTML的变化也会映射回js对象上，开发方式直接变革成了前端由数据驱动的<br>开发时代，远远抛弃了Dom开发主导的时代了。</p>
<p><img src="http://orzuutv5f.bkt.clouddn.com/02vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.jpg" alt="vue 双向绑定"></p>
<h2 id="Vue绑定文本"><a href="#Vue绑定文本" class="headerlink" title="Vue绑定文本"></a>Vue绑定文本</h2><p>数据绑定最常见的形式就是使用 “Mustache” 语法（双大括号）的文本插值，比如模板引擎：handlebars中就是用的&#123;&#123;  &#125;&#125;.<br>创建的Vue对象中的data属性就是用来绑定数据到HTML的。参考如下代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;         <span class="comment">// 创建Vue对象。Vue的核心对象。</span></div><div class="line">    el: <span class="string">'#app'</span>,               <span class="comment">// el属性：把当前Vue对象挂载到 div标签上，#app是id选择器</span></div><div class="line">    data: &#123;                   <span class="comment">// data: 是Vue对象中绑定的数据</span></div><div class="line">      msg: <span class="string">'Hello Vue!'</span>   <span class="comment">// message 自定义的数据</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="绑定数据中使用JavaScript表达式"><a href="#绑定数据中使用JavaScript表达式" class="headerlink" title="绑定数据中使用JavaScript表达式"></a>绑定数据中使用JavaScript表达式</h2><p>对于所有的数据绑定， Vue.js 都提供了完全的 JavaScript 表达式支持。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg + ' - ' + name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;         <span class="comment">// 创建Vue对象。Vue的核心对象。</span></div><div class="line">    el: <span class="string">'#app'</span>,               <span class="comment">// el属性：把当前Vue对象挂载到 div标签上，#app是id选择器</span></div><div class="line">    data: &#123;                   <span class="comment">// data: 是Vue对象中绑定的数据</span></div><div class="line">      msg: <span class="string">'Hi'</span>,              <span class="comment">// message 自定义的数据</span></div><div class="line">      name: <span class="string">'flydragon'</span>       <span class="comment">// name自定义的属性，vue可以多个自定义属性，属性类型也可是复杂类型</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi - flydragon</div></pre></td></tr></table></figure></p>
<p>当然Vue还可以支持表达中的任何计算、函数处理等。参考下面的综合点的案例。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之数据绑定-表达式运算<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    &#123;&#123; msg + ' - ' + name &#125;&#125;</div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">      &#123;&#123; isOk ? '123' : '456' &#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的年龄是： &#123;&#123; age *2 &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;         <span class="comment">// 创建Vue对象。Vue的核心对象。</span></div><div class="line">    el: <span class="string">'#app'</span>,               <span class="comment">// el属性：把当前Vue对象挂载到 div标签上，#app是id选择器</span></div><div class="line">    data: &#123;                   <span class="comment">// data: 是Vue对象中绑定的数据</span></div><div class="line">      msg: <span class="string">'Hi'</span>,              <span class="comment">// message 自定义的数据</span></div><div class="line">      name: <span class="string">'flydragon'</span>,</div><div class="line">      <span class="attr">isOk</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">age</span>: <span class="number">18</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Vue属性绑定"><a href="#Vue属性绑定" class="headerlink" title="Vue属性绑定"></a>Vue属性绑定</h2><p>Vue中不能直接使用&#123;&#123;expression &#125;&#125; 语法进行绑定html的标签，而是用它特有的v-bind指令（就是一种写法，先按照格式走，具体指令是什么可以后续再了解）。</p>
<p>绑定的语法结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;标签 v-bind:属性名=&quot;要绑定的Vue对象的data里的属性名&quot;&gt;&lt;/标签&gt;</div><div class="line">例如:</div><div class="line">&lt;span v-bind:id=&quot;menuId&quot;&gt;&#123;&#123; menuName &#125;&#125;&lt;/span&gt;</div></pre></td></tr></table></figure></p>
<p>参考如下代码案例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之数据绑定--属性绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"MenuContaineId"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">v-bind:class</span>=<span class="string">"MenuClass"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">v-bind:class</span>=<span class="string">"MenuClass"</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">v-bind:class</span>=<span class="string">"MenuClass"</span>&gt;</span>服务<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">v-bind:class</span>=<span class="string">"MenuClass"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;                   <span class="comment">// data: 是Vue对象中绑定的数据</span></div><div class="line">        MenuClass: <span class="string">'top-menu'</span>,</div><div class="line">        <span class="attr">MenuContaineId</span>: <span class="string">'sitemenu'</span></div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="输出纯HTML"><a href="#输出纯HTML" class="headerlink" title="输出纯HTML"></a>输出纯HTML</h2><p>由于Vue对于输出绑定的内容做了提前encode，保障在绑定到页面上显示的时候不至于被xss攻击。但某些场景下，我们确保后台数据是安全的，那么我们就要在网页中显示原生的HTML标签。Vue提供了<code>v-html</code>指令。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"MenuContaineId"</span> <span class="attr">v-html</span>=<span class="string">"MenuBody"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;                   <span class="comment">// data: 是Vue对象中绑定的数据</span></div><div class="line">      MenuContaineId: <span class="string">'menu'</span>,</div><div class="line">      <span class="attr">MenuBody</span>: <span class="string">'&lt;p&gt;这里是菜单的内容&lt;/p&gt;'</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"menu"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是菜单的内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h2><p>对于普通的属性的绑定，只能用上面的讲的绑定属性的方式。而Vue专门加强了class和style的属性的绑定。可以有复杂的对象绑定、数组绑定样式和类。</p>
<h3 id="绑定样式对象"><a href="#绑定样式对象" class="headerlink" title="绑定样式对象"></a>绑定样式对象</h3><p>经常我们需要对样式进行切换，比如：div的显示和隐藏，某些标签active等。Vue提供的对象绑定样式的方式就很容做这些事情。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">代码：</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">解释：</div><div class="line">当 isActive为 true时， div就会具有了active样式类，如果 isActive为false，那么div就去掉active样式类。</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之绑定样式类<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">  .active &#123;</div><div class="line">    background-color: #ccc;</div><div class="line">  &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"MenuContaineId"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span></div><div class="line">      绑定颜色类</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;                   <span class="comment">// data: 是Vue对象中绑定的数据</span></div><div class="line">        MenuContaineId: <span class="string">'menu'</span>,</div><div class="line">        <span class="attr">isActive</span>: <span class="literal">true</span></div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="混合普通的HTML标签样式类及绑定样式对象"><a href="#混合普通的HTML标签样式类及绑定样式对象" class="headerlink" title="混合普通的HTML标签样式类及绑定样式对象"></a>混合普通的HTML标签样式类及绑定样式对象</h3><p>v-bind:class 指令可以与普通的 class 属性共存。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static"</span></span></div><div class="line">     <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError &#125;"</span>&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;                   <span class="comment">// data: 是Vue对象中绑定的数据</span></div><div class="line">      isActive: <span class="literal">true</span>,</div><div class="line">      <span class="attr">hasError</span>: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static active"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="绑定data中的样式对象"><a href="#绑定data中的样式对象" class="headerlink" title="绑定data中的样式对象"></a>绑定data中的样式对象</h3><p>直接在html属性中的双引号内写对象，还是很不爽，也没有智能提示，很容易写错。<br>Vue可以让我们直接把绑定的class字符串指向data的一个对象，这样就非常方便了，既可以有智能提示，又可以很复杂进行编辑，不用担心烦人的<code>&quot;&quot;</code>了。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static"</span></span></div><div class="line">     <span class="attr">v-bind:class</span>=<span class="string">"classObject"</span>&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">    <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">      <span class="attr">classObject</span>: &#123;</div><div class="line">        <span class="attr">active</span>: <span class="literal">true</span>,</div><div class="line">        <span class="string">'text-danger'</span>: <span class="literal">false</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static active"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="绑定样式数组"><a href="#绑定样式数组" class="headerlink" title="绑定样式数组"></a>绑定样式数组</h3><p>其实绑定数组，就是绑定样式对象的延续，看官网的例子代码吧。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span></div><div class="line"></div><div class="line">data: &#123;</div><div class="line">  activeClass: 'active',</div><div class="line">  errorClass: 'text-danger'</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当然还有很多其他很有趣的支持，就不赘述了。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">例如:</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive ? activeClass : '', errorClass]"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[&#123; active: isActive &#125;, errorClass]"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="内联样式绑定"><a href="#内联样式绑定" class="headerlink" title="内联样式绑定"></a>内联样式绑定</h3><p>内联样式的绑定，非常类似于样式类的操作。v-bind:style 的对象语法十分直观——看着非常像 CSS ，其实它是一个 JavaScript 对象。 CSS属性名可以用驼峰式（camelCase）或短横分隔命名（kebab-case）。</p>
<p>看个例子：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之htmlraw<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123;fontSize: size + 'px', backgroundColor: bgcolor, width: width&#125;"</span>&gt;</span></div><div class="line">      vue 入门系列教程</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">size</span>: <span class="number">19</span>,</div><div class="line">        <span class="attr">width</span>: <span class="number">200</span>,</div><div class="line">        <span class="attr">bgcolor</span>: <span class="string">'red'</span></div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>自动添加前缀<br>当 v-bind:style 使用需要特定前缀的 CSS 属性时，如 transform ，Vue.js 会自动侦测并添加相应的前缀。</p>
<h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>在做数据的绑定的时候,数据要进行处理之后才能展示到html页面上，虽然vue提供了非常好的表达式绑定的方法，但是只能应对低强度的需求。比如： 把一个日期按照规定格式进行输出，可能就需要我们对日期对象做一些格式化的出来，表达式可能就捉襟见肘了。</p>
<p>Vue对象提供的computed属性，可以让我们开发者在里面可以放置一些方法，协助我们绑定数据操作，这些方法可以跟data中的属性一样用，注意这些方法用的时候不要加<code>()</code>。<br>例子来了：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之htmlraw<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- computed里面的函数可以直接当成data里面的属性用，非常方便，注意没有括号！！！--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>生日<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; getBirthday &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; address &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">birthday</span>: <span class="number">914228510514</span>,     <span class="comment">// 这是一个日期对象的值：1998年11月1日</span></div><div class="line">        age: <span class="number">19</span>,</div><div class="line">        <span class="attr">address</span>: <span class="string">'北京昌平区龙泽飞龙'</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">computed</span>: &#123;</div><div class="line">        <span class="comment">// 把日期换成 常见规格格式的字符串。</span></div><div class="line">        getBirthday: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">this</span>.birthday);</div><div class="line">          <span class="keyword">return</span> m.getFullYear() + <span class="string">'年'</span> + m.getMonth() +<span class="string">'月'</span>+ m.getDay()+<span class="string">'日'</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="绑定的数据过滤器"><a href="#绑定的数据过滤器" class="headerlink" title="绑定的数据过滤器"></a>绑定的数据过滤器</h2><p>过滤器本质就是数据在呈现之前先进行过滤和筛选。官网上写的不错，我就不再赘述，下面是官网的描述。</p>
<p>Vue.js 允许你自定义过滤器，被用作一些常见的文本格式化。过滤器应该被添加在 mustache 插值的尾部，由“管道符”指示：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; message | capitalize &#125;&#125;</div><div class="line"><span class="comment">&lt;!-- in mustaches --&gt;</span></div><div class="line">&#123;&#123; message | capitalize &#125;&#125;</div><div class="line"><span class="comment">&lt;!-- in v-bind --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"rawId | formatId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">Vue 2.x 中，过滤器只能在 mustache 绑定和 v-bind 表达式（从 2.1.0 开始支持）中使用，因为过滤器设计目的就是用于文本转换。为了在其他指令中实现更复杂的数据变换，你应该使用计算属性。</div><div class="line"></div><div class="line">过滤器函数总接受表达式的值作为第一个参数。</div><div class="line">new Vue(&#123;</div><div class="line">  // ...</div><div class="line">  filters: &#123;</div><div class="line">    capitalize: function (value) &#123;</div><div class="line">      if (!value) return ''</div><div class="line">      value = value.toString()</div><div class="line">      return value.charAt(0).toUpperCase() + value.slice(1)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">过滤器可以串联：</div><div class="line">&#123;&#123; message | filterA | filterB &#125;&#125;</div><div class="line">过滤器是 JavaScript 函数，因此可以接受参数：</div><div class="line">&#123;&#123; message | filterA('arg1', arg2) &#125;&#125;</div><div class="line">这里，字符串 'arg1' 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数。</div></pre></td></tr></table></figure></p>
<h2 id="核心：自动响应对象的变化到HTML标签"><a href="#核心：自动响应对象的变化到HTML标签" class="headerlink" title="核心：自动响应对象的变化到HTML标签"></a>核心：自动响应对象的变化到HTML标签</h2><p>上面的例子都是 数据对象是写死在创建的Vue对像上，那如果数据（data）发生改变时会怎样呢？<br>让我们用chrome把上面例子的页面打开，并打开发者工具控制台,输入：<code>app.age = 20</code> 会有什么情况发生呢？</p>
<hr>
<p><img src="http://orzuutv5f.bkt.clouddn.com/03vue%E5%93%8D%E5%BA%94.png" alt="响应"></p>
<p>在页面中添加一个按钮，动态的增加年龄：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之htmlraw<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- computed里面的函数可以直接当成data里面的属性用，非常方便，注意没有括号！！！--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>生日<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; getBirthday &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>地址<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; address &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="comment">&lt;!-- 添加下面这行代码，动态增加 年龄，页面会有怎样的变化呢？？ --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"app.age+=1;"</span> &gt;</span>加加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">birthday</span>: <span class="number">914228510514</span>,     <span class="comment">// 这是一个日期对象的值：1998年11月1日</span></div><div class="line">        age: <span class="number">19</span>,</div><div class="line">        <span class="attr">address</span>: <span class="string">'北京昌平区龙泽飞龙'</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">computed</span>: &#123;</div><div class="line">        <span class="comment">// 把日期换成 常见规格格式的字符串。</span></div><div class="line">        getBirthday: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">this</span>.birthday);</div><div class="line">          <span class="keyword">return</span> m.getFullYear() + <span class="string">'年'</span> + m.getMonth() +<span class="string">'月'</span>+ m.getDay()+<span class="string">'日'</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><p>上面的例子我们大多讲的是单向的 js对象向 HTML数据进行绑定，那HTML怎样向js进行反馈数据呢？<br>HTML中只有表达能接受用户的输入，最简单的演示双向绑定的就是文本框了。</p>
<p>Vue提供了一个新的指令：v-model进行双向数据的绑定，注意不是v-bind。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之htmlraw<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- v-model可以直接指向data中的属性，双向绑定就建立了 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"txt"</span> <span class="attr">v-model</span>=<span class="string">"msg"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>您输入的信息是：&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">msg</span>: <span class="string">'双向数据绑定的例子'</span></div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>最终的结果就是：你改变input文本框的内容的时候，p标签中的内容会跟着进行改变，哇是不是很神奇呢…</p>
<p>关于其他表单的绑定的语法我就不赘述了，还是参考官网吧，我这里大部分例子也是来自<a href="https://cn.vuejs.org/v2/guide/forms.html#基础用法" target="_blank" rel="external">官网</a>。</p>
<h2 id="数据绑定总结"><a href="#数据绑定总结" class="headerlink" title="数据绑定总结"></a>数据绑定总结</h2><p>vue提供了大量的绑定的语法和方法，非常方便我们进行数据的绑定，尤其它是双向的数据绑定，极大的减少了我们dom操作的麻烦程度。可能你越来越喜欢它了吧…</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了Vue中的数据绑定机制
    
    </summary>
    
      <category term="VueJS" scheme="http://yoursite.com/categories/VueJS/"/>
    
    
      <category term="Vuejs" scheme="http://yoursite.com/tags/Vuejs/"/>
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue的数据绑定" scheme="http://yoursite.com/tags/Vue%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>Vue(Vue入门之组件化开发)</title>
    <link href="http://yoursite.com/2017/06/23/Vue%E5%85%A5%E9%97%A8%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    <id>http://yoursite.com/2017/06/23/Vue入门之组件化/</id>
    <published>2017-06-23T05:17:02.000Z</published>
    <updated>2017-06-24T06:21:14.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>Vue入门之组件化开发</code></center></p>
<hr>
<h1 id="Vue入门之组件化开发"><a href="#Vue入门之组件化开发" class="headerlink" title="Vue入门之组件化开发"></a>Vue入门之组件化开发</h1><p>组件其实就是一个拥有样式、动画、js逻辑、HTML结构的综合块。前端组件化确实让大的前端团队更高效的开发前端项目。而作为前端比较流行的框架之一，Vue的组件和也做的非常彻底，而且有自己的特色。尤其是她单文件组件开发的方式更是非常方便，而且第三方工具支持也非常丰富，社区也非常活跃，第三方组件也呈井喷之势。当然学习和使用Vue的组件也是我们的最重要的目标。</p>
<h2 id="全局扩展方法Vue-extend"><a href="#全局扩展方法Vue-extend" class="headerlink" title="全局扩展方法Vue.extend"></a>全局扩展方法<code>Vue.extend</code></h2><p>Vue提供了一个全局的API，<code>Vue.extend</code>可以帮助我们对Vue实例进行扩展，扩展完了之后，就可以用此扩展对象创建新的Vue实例了。<br>类似于继承的方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">语法：Vue.extend( options )</div><div class="line"></div><div class="line">参数：</div><div class="line"></div><div class="line">&#123;Object&#125; options</div><div class="line">用法：</div><div class="line"></div><div class="line">使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象[后面会细讲]。</div><div class="line"></div><div class="line">data 选项是特例，需要注意 - 在 Vue.extend() 中它必须是函数</div></pre></td></tr></table></figure></p>
<p>下面是一个官网demo：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"mount-point"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">// 创建构造器</span></div><div class="line"><span class="keyword">var</span> Profile = Vue.extend(&#123;</div><div class="line">  <span class="comment">// 新的对象的模板，所有子实例都会拥有此模板</span></div><div class="line">  template: <span class="string">'&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;'</span>,</div><div class="line">  <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;   <span class="comment">// 创建的Vue实例时，data可以是Object 也可以是Function，但是在扩展</span></div><div class="line">    <span class="keyword">return</span> &#123;            <span class="comment">// 的时候，data必须是一个函数，而且要返回值奥。</span></div><div class="line">      firstName: <span class="string">'Walter'</span>,</div><div class="line">      <span class="attr">lastName</span>: <span class="string">'White'</span>,</div><div class="line">      <span class="attr">alias</span>: <span class="string">'Heisenberg'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">// 创建 Profile 实例，并挂载到一个元素上。</div><div class="line">new Profile().$mount('#mount-point')</div><div class="line">// .$mount() 方法跟设置 el属性效果是一致的。</div><div class="line"></div><div class="line">结果如下：</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Walter White aka Heisenberg<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>综合案例代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之extend全局方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> myVue = Vue.extend(&#123;</div><div class="line">      <span class="attr">template</span>: <span class="string">'&lt;div&gt;&#123;&#123; name &#125;&#125; - &#123;&#123; age &#125;&#125; - &#123;&#123; mail &#125;&#125;&lt;/div&gt;'</span>,</div><div class="line">      <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">          <span class="attr">name</span>: <span class="string">'malun'</span>,</div><div class="line">          <span class="attr">age</span>: <span class="string">'19'</span>,</div><div class="line">          <span class="attr">mail</span>: <span class="string">'flydragonml@gmail.com'</span></div><div class="line">        &#125;;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> myVue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span></div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="创建组件和注册组件"><a href="#创建组件和注册组件" class="headerlink" title="创建组件和注册组件"></a>创建组件和注册组件</h2><p>当然上面的方式只是能让我们继承Vue实例做一些扩展的动作。看Vue中如何创建一个组件并注册使用。</p>
<p>Vue提供了一个全局注册组件的方法：Vue.component。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">语法： Vue.component( id, [definition] )</div><div class="line"></div><div class="line">参数：</div><div class="line">  &#123;string&#125; id    组件的名字，可以当HTML标签用，注意组件的名字都是小写，而且最好有横线和字母组合。</div><div class="line">  &#123;Function | Object&#125; [definition]   组件的设置</div><div class="line"></div><div class="line">用法：</div><div class="line">注册或获取全局组件。注册还会自动使用给定的id设置组件的名称</div><div class="line"></div><div class="line">// 注册组件，传入一个扩展过的构造器</div><div class="line">Vue.component(&apos;my-component&apos;, Vue.extend(&#123; /* ... */ &#125;))</div><div class="line">// 注册组件，传入一个选项对象（自动调用 Vue.extend）</div><div class="line">Vue.component(&apos;my-component&apos;, &#123; /* ... */ &#125;)</div><div class="line">// 获取注册的组件（始终返回构造器）</div><div class="line">var MyComponent = Vue.component(&apos;my-component&apos;)</div></pre></td></tr></table></figure>
<p>简单demo：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--组件直接跟普通的标签一样的使用。--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注册一个组件</span></div><div class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</div><div class="line">  <span class="comment">// 模板选项设置当前组件，最终输出的html模板。注意：有且只有一个根元素。</span></div><div class="line">  template: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">// 创建根实例</span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#example'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>那么我们注册一个组件自动帮我生成 label和radiobutton组合。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue入门之extend全局方法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--组件名直接可以当标签使用。--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">radio-tag</span> <span class="attr">rid</span>=<span class="string">"rBas"</span> <span class="attr">txt</span>=<span class="string">"篮球"</span> <span class="attr">val</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">radio-tag</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--组件的属性也可以使用Vue的绑定的语法，下面是动态绑定数据给子组件--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">radio-tag</span> <span class="attr">:rid</span>=<span class="string">"demoId"</span> <span class="attr">:txt</span>=<span class="string">"demoText"</span> <span class="attr">:val</span>=<span class="string">"demoVal"</span>&gt;</span><span class="tag">&lt;/<span class="name">radio-tag</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="comment">// 定义组件模板，模板必须有且只有一个根元素。</span></div><div class="line">    <span class="keyword">var</span> temp = <span class="string">'&lt;div&gt;&lt;label v-bind:for="rid"&gt;&#123;&#123; txt &#125;&#125;&lt;/label&gt;&lt;input :id="rid" type="radio" v-bind:value="val"&gt;&lt;/div&gt;'</span>;</div><div class="line">    <span class="comment">// 注册一个全局的组件</span></div><div class="line">    Vue.component(<span class="string">'radio-tag'</span>, &#123;       <span class="comment">// 组件的名字不能有大写字母，跟React的曲别啊。另外组件名最好是小写字母加横线组合。</span></div><div class="line">      template: temp,</div><div class="line">      <span class="attr">props</span>: [<span class="string">'rid'</span>, <span class="string">'txt'</span>, <span class="string">'val'</span>],   <span class="comment">// 设置组件的属性有哪些，定义标签的属性一致。</span></div><div class="line">      data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;             <span class="comment">// 注意属性名都得是小写，不然会不认的。</span></div><div class="line">        <span class="keyword">return</span> &#123;                      <span class="comment">// 在组件的定义中data必须是函数，而且必须有返回值。</span></div><div class="line">          age: <span class="number">19</span>,                    <span class="comment">// 此地方的 age 和 emial都是演示，并么有有到。</span></div><div class="line">          email: <span class="string">'flydragonml@gmail.com'</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    <span class="comment">// 初始化一个Vue实例</span></div><div class="line">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</div><div class="line">      <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">      <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">demoId</span>: <span class="string">'ft'</span>,</div><div class="line">        <span class="attr">demoText</span>: <span class="string">'足球'</span>,</div><div class="line">        <span class="attr">demoVal</span>: <span class="number">2</span></div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>注意结果点</p>
<ul>
<li>组件的名字都必须是小写【<a href="https://cn.vuejs.org/v2/guide/components.html#组件命名约定" target="_blank" rel="external">其实是非必须，但是为了不麻烦就强制吧</a>】！！！而且建议是小写字母和横线的组合比如： my-radiobtn</li>
<li>注册组件的时候，可以传入一个选项对象进行配置。其中<code>props</code>是设置当前组件的属性，属性也都必须小写。属性是连接父容器和子组件的桥梁。</li>
<li>注意：属性名和组件的名字都要小写啊，不然vue不会认的。</li>
<li>编写组件代码最好配合Vue的chrome插件：<a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="external">vue-devtool</a></li>
<li>组件可以返还自己的数据，但是必须是函数。data必须是Function</li>
</ul>
<h2 id="局部注册组件"><a href="#局部注册组件" class="headerlink" title="局部注册组件"></a>局部注册组件</h2><p>全局注册组件就是使用全局API <code>Vue.componet(id, {....})</code>就行了，当然我们有时候需要注册一个局部模块的自己用的组件。那么就可以用下面的方式了。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Child = &#123;</div><div class="line">  <span class="attr">template</span>: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  components: &#123;</div><div class="line">    <span class="comment">// &lt;my-component&gt; 将只在父模板可用</span></div><div class="line">    <span class="string">'my-component'</span>: Child</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="组件的slot"><a href="#组件的slot" class="headerlink" title="组件的slot"></a>组件的slot</h2><p>使用组件的时候，经常需要在父组件中为子组件中插入一些标签等。当然其实可以通过属性等操作，但是比较麻烦，直接写标签还是方便很多。<br>那么Vue提供了slot协助子组件对父容器写入的标签进行管理。</p>
<p>当父容器写了额外的内容时， 如果子组件恰好有一个slot标签，那边子容器的slot标签会被父容器写入的内容替换掉。</p>
<p>比如下面的例子：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang="en"&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset="UTF-8"&gt;</div><div class="line">  &lt;title&gt;Vue入门之extend全局方法&lt;/title&gt;</div><div class="line">  &lt;script src="https://unpkg.com/vue/dist/vue.js"&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;div id="app"&gt;</div><div class="line">    &lt;!--父容器输入标签--&gt;</div><div class="line">    &lt;my-slot&gt;</div><div class="line">      &lt;h3&gt;这里是父容器写入的&lt;/h3&gt;</div><div class="line">    &lt;/my-slot&gt;</div><div class="line"></div><div class="line">    &lt;!--父容器绑定数据到子容器的slot,这里的作用域是父容器的啊。--&gt;</div><div class="line">    &lt;my-slot&gt;&#123;&#123; email &#125;&#125;&lt;/my-slot&gt;</div><div class="line"></div><div class="line">    &lt;!--父容器什么都不传内容--&gt;</div><div class="line">    &lt;my-slot&gt;&lt;/my-slot&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;script&gt;</div><div class="line">    // 反引号：可以定义多行字符串。</div><div class="line">    var temp = `</div><div class="line">      &lt;div&gt;</div><div class="line">        &lt;h1&gt;这里是子组件&lt;/h1&gt;</div><div class="line">        &lt;hr&gt;</div><div class="line">        &lt;slot&gt;slot标签会被父容器写的额外的内容替换掉，如果父容器没有写入任何东西，此标签将保留！&lt;/slot&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    `;</div><div class="line">    Vue.component('MySlot', &#123;          // 如果定义的组件为MySlot，那么用组件的时候：&lt;my-slot&gt;&lt;/my-slot&gt;</div><div class="line">      template: temp,</div><div class="line">    &#125;);</div><div class="line">    // 初始化一个Vue实例</div><div class="line">    var app = new Vue(&#123;</div><div class="line">      el: '#app',</div><div class="line">      data: &#123;</div><div class="line">       email: 'flydragon@gmail.com'</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>最终结果：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这里是父容器写入的<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span> flydragon@gmail.com</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里是子组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span> slot标签会被父容器写的额外的内容替换掉，如果父容器没有写入任何东西，此标签将删除！</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="单文件组件的使用方式介绍"><a href="#单文件组件的使用方式介绍" class="headerlink" title="单文件组件的使用方式介绍"></a>单文件组件的使用方式介绍</h2><p>通过上面我们定义组件的方式，就已经感觉很不爽了，尤其是模板的定义，而且样式怎么处理也没有很好的进行规整。<br>Vue可以通过Webpack等第三方工具实现单文件的开发的方式。当然这里会牵扯到很多es6的语法、第三方工具实现前端模块化等很多知识，<br>我们大概看一眼指导Vue的组件可以直接写一个文件中，其他地方就可以直接导入这个模块了。后面做项目的时候我还会再讲一下怎么用。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-dark navbar-fixed-top"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3 sidebar"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span> &gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; path: item.url &#125;"</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid content"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="comment">// 这里怎么回事</span></div><div class="line"><span class="keyword">import</span> Axios <span class="keyword">from</span> <span class="string">'axios'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'app'</span>,</div><div class="line">  <span class="attr">components</span>: &#123;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">data</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">list</span>: []</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">mounted</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;          <span class="comment">// 挂载完成后</span></div><div class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      Axios.get(<span class="string">'/api/menulist'</span>, &#123;</div><div class="line">        <span class="attr">params</span>: &#123;</div><div class="line">        &#125;</div><div class="line">      &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.list = res.data</div><div class="line">      &#125;.bind(<span class="keyword">this</span>))</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">ul, li &#123;</div><div class="line">  list-style: none;</div><div class="line">&#125;</div><div class="line">.router-link-active &#123;</div><div class="line">  background-color: #f6f6f6;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.navbar &#123;</div><div class="line">  height: 50px;</div><div class="line">  background-color: #303030;</div><div class="line">&#125;</div><div class="line">.content &#123;</div><div class="line">  margin-top: 50px;</div><div class="line">  padding-left: 210px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.sidebar &#123;</div><div class="line">  background-color: #f5f5f5;</div><div class="line">  border-right: 1px solid #eee;</div><div class="line">  width: 200px;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@media (min-width: 768px) &#123;</div><div class="line">  .sidebar &#123;</div><div class="line">    position: fixed;</div><div class="line">    top: 51px;</div><div class="line">    bottom: 0;</div><div class="line">    left: 0;</div><div class="line">    z-index: 1000;</div><div class="line">    display: block;</div><div class="line">    padding: 20px;</div><div class="line">    overflow-x: hidden;</div><div class="line">    overflow-y: auto; /* Scrollable contents if viewport is shorter than content. */</div><div class="line">    background-color: #f5f5f5;</div><div class="line">    border-right: 1px solid #eee;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>单文件书写组件的方式必须要配合webpack之类的工具才行，所以这里暂时不讲解如何做，后面到项目阶段的时候再详细讲解。<br>不过你可以参考：<a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="external">Vue官网单文件组件</a></p>
<h2 id="组件总结"><a href="#组件总结" class="headerlink" title="组件总结"></a>组件总结</h2><p>Vue的组件化还是做的比较彻底的。不像Angular1.0中的模块那么鸡肋。组件化确实让前端模块化开发更加容易实现，<br>Vue的单文件开发组件的方式也是Vue的一大创新，也发非常好用。</p>
]]></content>
    
    <summary type="html">
    
      Vue入门之组件化开发
    
    </summary>
    
      <category term="VueJS" scheme="http://yoursite.com/categories/VueJS/"/>
    
    
      <category term="Vuejs" scheme="http://yoursite.com/tags/Vuejs/"/>
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Vue组件化" scheme="http://yoursite.com/tags/Vue%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>CSS3的介绍</title>
    <link href="http://yoursite.com/2017/06/03/css3/"/>
    <id>http://yoursite.com/2017/06/03/css3/</id>
    <published>2017-06-03T05:34:02.000Z</published>
    <updated>2017-06-03T05:36:16.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px">CSS3</center></p>
<hr>
<h2 id="摘要："><a href="#摘要：" class="headerlink" title="摘要："></a>摘要：</h2><p>直到今天，伴随着 Web2.0 技术的流行，以前的 CSS2 标准和相关技术似乎早已经不能够满足不了日益增长的开发需求：人们需要实现更加美观、用户体验更好的HTML界面。CSS3，这个新一代的标准由此诞生。CSS3为了满足现有的对于 Web UI 的开发需求，它提供了一系列强大的功能和新特性，如许多新的 CSS 属性（文字，布局，颜色等等），以及各种 CSS 特效，甚至还支持 CSS 动画、元素的变形。这些 CSS 新特性在现阶段来说都是非常强大和完善的，您只需要加入简单的的几行 CSS 代码便可以实现出一系列令人眼前一亮的炫酷效果，这比我们之前用 JavaScript 去模拟实现这样的效果要好得多，不仅降低了开发复杂程度，代码变得易维护，在性能上也得到突飞猛进的进步。下面将主要来介绍 CSS3 的新特性以及一些使用上的方法和技巧。</p>
<h2 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h2><p>CSS即层叠样式表（Cascading StyleSheet）。 在HTML网页制作过程中采用层叠样式表技术，可以有效地对HTMl页面的布局、颜色、背景、字体和其它效果实现更加精确的控制。 只要对相应的代码做一些简单的修改或添加，就可以使同一页面的不同区域，或者页数不同的网页的格式和外观。</p>
<p>CSS3是CSS技术的升级版本，CSS3语言开发是朝着模块化方向发展的。以前的CSS2规范作为一个模块实在是太庞大而且比较复杂，所以，把它拆解为一个个小的模块，更多新的模块也被同时加入进来。这些模块包括：超链接方式 、语言模块 、边框和背景 、文字特效、盒子模型、列表模块、、多栏布局等模块。</p>
<p>CSS3是在CSS的接触上增加了很多新的特性，而且CSS3与低版本的CSS并不冲突。</p>
<p>CSS3新特性涉及范围非常广泛，这里挑选一些被浏览器支持较为完美、更具实用性的几个新特性。</p>
<p>1.强大的CSS3选择器<br>2.抛弃图片的视觉效果<br>3.背景的变革<br>4.盒模型变化<br>5.阴影效果<br>6.多列布局与弹性盒模型布局<br>7.Web字体和Web Font图标<br>8.颜色和透明度<br>9.圆角与边框的新法<br>10.盒容器的变形<br>11.CSS3过渡与动画交互效果<br>12.媒体特性与Responsive布局</p>
<h2 id="使用CSS3有什么好处"><a href="#使用CSS3有什么好处" class="headerlink" title="使用CSS3有什么好处"></a>使用CSS3有什么好处</h2><p>与CSS比起来，使用CSS3有什么好处呢？最明显的就是CSS3的使用能让页面看起来非常炫酷，而且操作手法简单，使网站设计更加具有美感，但是它的好处远远不止有这些。在绝大多数的情况下， 使用CSS3不仅有利于开发与维护，而且还能提高网站的整体性能。与此同时，CSS3的使用还可以增加网站的可读性、可访问性、可用性，使制作的网站能适配更多的设备，甚至还可以优化网站SEO操作，同时提升网站的搜索排名结果。下面介绍CSS3特有的好处。</p>
<p>1.减少网站的开发成本与维护成本<br>2.很大程度的提高页面性能</p>
<h2 id="CSS3的现状"><a href="#CSS3的现状" class="headerlink" title="CSS3的现状"></a>CSS3的现状</h2><p>网页制作中使用CSS3会带来非常多的好处，目前国内外使用CSS3特性制作网站的案例越来越多，特别是一些优秀的个人站点和项目，更是将其使用得出神入化。</p>
<h2 id="CSS3的未来"><a href="#CSS3的未来" class="headerlink" title="CSS3的未来"></a>CSS3的未来</h2><p>CSS3技术无疑对Web前端开发带来质的进步。虽然目前CSS3还没有完全普及到各个浏览器，但对于我们积极地去学习和使用并不矛盾，学习和掌握CSS3必是大势所趋。CSS3将会是引导我们进入编写网页精彩世界的先驱技术。前端开发人员能够通过CSS3更轻松地创建功能强大、易于维护网站。<br>随着旧版浏览器所占市场份额逐渐减少，学习CSS3技术将更有优势和价值。目前来说这是作为一位优秀前端开发人员所必须掌握的技术之一，也是前端开发人员的大势所趋。<br>当然，如果想学习一门新技术不能盲目的跟风，需要理性思考，但是这种理性思考并不表示对新技术的畏畏缩缩，同时也应该知道学习新技术过程中可能遇到的风险和困难。只有这样，才能更好地学习和使用CSS3技术。</p>
<h2 id="CSS3的兼容性问题"><a href="#CSS3的兼容性问题" class="headerlink" title="CSS3的兼容性问题"></a>CSS3的兼容性问题</h2><p>幸运的是，CSS3特性大部分浏览器都已经有了很好的支持度。各大主流浏览器对CSS3的支持越来越完善，那个曾经让多少前端开发人员心碎的IE浏览器也开始慢慢使用CSS3标准行列。当然，即使CSS3标准制定完成，现代浏览器要普及到大部分用户也是一定是个相当漫长的过程。如果你现在就打算使用CSS3来美化你的站点，那么就有必要对各大主流浏览器对其新技术的支持情况有一个全面的了解。</p>
<p>CSS3在各个浏览器下需要添加私有前缀<br>常用浏览器    内核             私有前缀<br>Chrome     webkit           -weibkit-<em><br>firefox      moz              -moz-</em><br>opera(老版)    o                -o-<em><br>IE           ms               -ms-</em></p>
<h3 id="为什么会有私有前缀"><a href="#为什么会有私有前缀" class="headerlink" title="为什么会有私有前缀:"></a>为什么会有私有前缀:</h3><p>Chrome低版本  为了早早的支持还没有发布正式版本的CSS3的属性 所以在属性前加了一个自己浏览器认识的标志</p>
<h2 id="如何在工作学习中运用CSS3"><a href="#如何在工作学习中运用CSS3" class="headerlink" title="如何在工作学习中运用CSS3"></a>如何在工作学习中运用CSS3</h2><p>1.统一环境 (chrome firefox)<br>2.放下兼容性 (1.加私有前缀  2.去js中寻找方法)</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>上面的内容介绍了什么是CSS3、CSS3的发展状况、新特性，以及浏览器对CSS3的支持情况；学习CSS3的好处有很多，它能让你始终处于web网页制作技术的前沿，增加你的职业技能和竞争力，还会帮助你缩短与顶级设计师或开发者的距离。</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了CSS3的简单介绍
    
    </summary>
    
      <category term="CSS3" scheme="http://yoursite.com/categories/CSS3/"/>
    
    
      <category term="CSS3" scheme="http://yoursite.com/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>前端构建工具gulp入门教程</title>
    <link href="http://yoursite.com/2017/04/26/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7gulp%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2017/04/26/前端构建工具gulp入门教程/</id>
    <published>2017-04-26T15:42:26.000Z</published>
    <updated>2017-09-07T02:00:52.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文部分"><a href="#正文部分" class="headerlink" title="正文部分"></a><code>正文部分</code></h1><h2 id="第一步：安装Node"><a href="#第一步：安装Node" class="headerlink" title="第一步：安装Node"></a>第一步：安装Node</h2><p>&#160; &#160; &#160; &#160;首先，最基本也最重要的是，我们需要搭建<code>node</code>环境。访问 <a href="http://nodejs.org" target="_blank" rel="external">http://nodejs.org</a> ，然后点击大大的绿色的 <code>install</code> 按钮，下载完成后直接运行程序，就一切准备就绪。 npm 会随着安装包一起安装，稍后会用到它</p>
<h2 id="第二步：使用命令行"><a href="#第二步：使用命令行" class="headerlink" title="第二步：使用命令行"></a>第二步：使用命令行</h2><p>&#160; &#160; &#160; &#160;也许现在你还不是很了解什么是命令行——OSX中的终端（Terminal），windows中的命令提示符（Command Prompt），但很快你就会知道。它看起来没那么简单，但一旦掌握了它的窍门，就可以很方便的执行很多命令行程序，比如Sass，Yeoman和Git等，这些都是非常有用的工具。</p>
<p>如果你很熟悉命令行，直接跳到步骤四。<br>为了确保Node已经正确安装，我们执行几个简单的命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node -v</div></pre></td></tr></table></figure>
<p>回车（Enter），如果正确安装的话，你会看到所安装的<code>Node</code>的版本号，<br>接下来看看<code>npm</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm -v</div></pre></td></tr></table></figure></p>
<p>这同样能得到<code>npm</code>的版本号。</p>
<p>如果这两行命令没有得到返回，可能node就没有安装正确，尝试重启下命令行工具，如果还不行的话，只能回到第一步进行重装。</p>
<h2 id="第三步：定位到项目"><a href="#第三步：定位到项目" class="headerlink" title="第三步：定位到项目"></a>第三步：定位到项目</h2><p>&#160; &#160; &#160; &#160;现在，我们已经大致了解了命令行并且知道如何简单使用它，接下来只需要两个简单的命令就能定位到文件目录并看看目录里都有些什么文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd  定位到目录</div><div class="line">ls  列出文件列表</div></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;建议多敲敲这两个命令，了解文件系统并知道文件都在哪里。<br>习惯使用了这两个命令后，就要进入我们的项目目录，这个目录各不相同，举个例子，这是我进入我项目目录的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /Applications/XAMPP/xamppfiles/htdocs/my-project</div></pre></td></tr></table></figure>
<p>成功进入项目目录后，我们开始安装<code>gulp</code>。</p>
<h2 id="第四步：安装gulp"><a href="#第四步：安装gulp" class="headerlink" title="第四步：安装gulp"></a>第四步：安装gulp</h2><p>&#160; &#160; &#160; &#160;我们已经知道如何使用命令行，现在尝试点新的东西，认识<code>npm</code>然后安装<code>gulp</code>。</p>
<p>&#160; &#160; &#160; &#160;<code>NPM</code>是基于命令行的<code>node</code>包管理工具，它可以将<code>node</code>的程序模块安装到项目中，在它的 官网 中可以查看和搜索所有可用的程序模块。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g gulp</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;<code>sudo</code>是以管理员身份执行命令，一般会要求输入电脑密码<br>npm是安装node模块的工具，执行install命令</p>
<p>&#160; &#160; &#160; &#160;<code>-g</code>表示在全局环境安装，以便任何项目都能使用它</p>
<p>&#160; &#160; &#160; &#160;最后，<code>gulp</code>是将要安装的node模块的名字<br>运行时注意查看命令行有没有错误信息，安装完成后，你可以使用下面的命令查看gulp的版本号以确保<code>gulp</code>已经被正确安装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp -v</div></pre></td></tr></table></figure>
<p>接下来，我们需要将gulp安装到项目本地</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install —-save-dev gulp</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;这里，我们使用 <code>—-save-dev</code> 来更新package.json文件，更新 devDependencies 值，以表明项目需要依赖gulp。</p>
<p>&#160; &#160; &#160; &#160;Dependencies 可以向其他参与项目的人指明项目在开发环境和生产环境中的node模块依懒关系，想要更加深入的了解它可以看看 package.json文档 。</p>
<h2 id="第五步：运行gulp"><a href="#第五步：运行gulp" class="headerlink" title="第五步：运行gulp"></a>第五步：运行gulp</h2><p>&#160; &#160; &#160; &#160;安装好<code>gulp</code>后我们需要告诉它要为我们执行哪些任务，首先，我们自己需要弄清楚项目需要哪些任务。</p>
<p>检查<code>Javascript</code><br>编译<code>Sass</code>（或Less之类的）文件<br>合并<code>Javascript</code><br>压缩并重命名合并后的<code>Javascript</code><br>安装依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-jshint gulp-sass gulp-concat gulp-uglify gulp-rename --save-dev</div></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;提醒下，如果以上命令提示权限错误，需要添加 sudo 再次尝试。<br>新建<code>gulpfile</code>文件</p>
<p>&#160; &#160; &#160; &#160;现在，组件都安装完毕，我们需要新建<code>gulpfile</code>文件以指定gulp需要为我们完成什么任务。</p>
<p>&#160; &#160; &#160; &#160;<code>gulp</code>只有五个方法： task ， run ， watch ， src ，和 dest ，在项目根目录新建一个js文件并命名为 <code>gulpfile.js</code> ，把下面的代码粘贴进去：</p>
<h3 id="gulpfile-js"><a href="#gulpfile-js" class="headerlink" title="gulpfile.js"></a><code>gulpfile.js</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 引入 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>); </div><div class="line"></div><div class="line"><span class="comment">// 引入组件</span></div><div class="line"><span class="keyword">var</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</div><div class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</div><div class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 检查脚本</span></div><div class="line">gulp.task(<span class="string">'lint'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./js/*.js'</span>)</div><div class="line">        .pipe(jshint())</div><div class="line">        .pipe(jshint.reporter(<span class="string">'default'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 编译Sass</span></div><div class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./scss/*.scss'</span>)</div><div class="line">        .pipe(sass())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./css'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 合并，压缩文件</span></div><div class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./js/*.js'</span>)</div><div class="line">        .pipe(concat(<span class="string">'all.js'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>))</div><div class="line">        .pipe(rename(<span class="string">'all.min.js'</span>))</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 默认任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    gulp.run(<span class="string">'lint'</span>, <span class="string">'sass'</span>, <span class="string">'scripts'</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 监听文件变化</span></div><div class="line">    gulp.watch(<span class="string">'./js/*.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        gulp.run(<span class="string">'lint'</span>, <span class="string">'sass'</span>, <span class="string">'scripts'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="分段解释代码。"><a href="#分段解释代码。" class="headerlink" title="分段解释代码。"></a>分段解释代码。</h2><h3 id="引入组件"><a href="#引入组件" class="headerlink" title="引入组件"></a>引入组件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>); </div><div class="line"></div><div class="line"><span class="keyword">var</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</div><div class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</div><div class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;这一步，我们引入了核心的gulp和其他依赖组件，接下来，分开创建lint, sass, scripts 和 default这四个不同的任务。</p>
<h4 id="Lint任务"><a href="#Lint任务" class="headerlink" title="Lint任务"></a><code>Lint</code>任务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'lint'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./js/*.js'</span>)</div><div class="line">        .pipe(jshint())</div><div class="line">        .pipe(jshint.reporter(<span class="string">'default'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;<code>Link</code>任务会检查 js/ 目录下得js文件有没有报错或警告。</p>
<h4 id="Sass任务"><a href="#Sass任务" class="headerlink" title="Sass任务"></a><code>Sass</code>任务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./scss/*.scss'</span>)</div><div class="line">        .pipe(sass())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./css'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;<code>Sass</code>任务会编译 scss/ 目录下的scss文件，并把编译完成的css文件保存到 /css 目录中。</p>
<h4 id="Scripts-任务"><a href="#Scripts-任务" class="headerlink" title="Scripts 任务"></a><code>Scripts</code> 任务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'./js/*.js'</span>)</div><div class="line">        .pipe(concat(<span class="string">'all.js'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>))</div><div class="line">        .pipe(rename(<span class="string">'all.min.js'</span>))</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;<code>scripts</code>任务会合并 js/ 目录下得所有得js文件并输出到 dist/ 目录，然后gulp会重命名、压缩合并的文件，也输出到 dist/ 目录。</p>
<h4 id="default任务"><a href="#default任务" class="headerlink" title="default任务"></a><code>default</code>任务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//监视src下的文件如果发生改变，重新执行打包任务</span></div><div class="line">    gulp.watch(<span class="string">'./src/**/*.*'</span>, [<span class="string">'lint'</span>, <span class="string">'sass'</span>, <span class="string">'scripts'</span>]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;这时，我们创建了一个基于其他任务的<code>default</code>任务。使用 .watch() 方法去监听指定目录的文件变化，当有文件变化时，会运行回调定义的其他任务。</p>
<p>现在，回到命令行，可以直接运行<code>gulp</code>任务了。</p>
<h3 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a><code>gulp</code></h3><p>这将执行定义的default任务，换言之，这和以下的命令式同一个意思</p>
<h3 id="gulp-default"><a href="#gulp-default" class="headerlink" title="gulp default"></a><code>gulp default</code></h3><p>当然，我们可以运行在gulpfile.js中定义的任意任务，比如，现在运行sass任务：</p>
<h3 id="gulp-sass"><a href="#gulp-sass" class="headerlink" title="gulp sass"></a><code>gulp sass</code></h3><p>(Kimi: 哇塞，酷比了哎~)</p>
<h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>现在已经做到了设置gulp任务然后运行他们，现在再回顾下之前学习的。</p>
<p>学习了安装Node环境<br>学习了简单使用命令行<br>学习了用命令行进入项目目录<br>学习了使用npm和安装gulp<br>学习了如何运行gulp任务<br>另外，有一些参考资源供进一步学习：<a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">http://www.gulpjs.com.cn/</a></p>
]]></content>
    
    <summary type="html">
    
      本文假设你之前没有用过任何任务脚本（task runner）和命令行工具，一步步教你上手Gulp。不要怕，它其实很简单，我会分为五步向你介绍gulp并帮助你完成一些惊人的事情。那就直接开始吧
    
    </summary>
    
      <category term="构建工具" scheme="http://yoursite.com/categories/%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="前端构建工具" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
    
      <category term="打包压缩工具" scheme="http://yoursite.com/tags/%E6%89%93%E5%8C%85%E5%8E%8B%E7%BC%A9%E5%B7%A5%E5%85%B7/"/>
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>angularjs(四)</title>
    <link href="http://yoursite.com/2017/04/25/angular-4/"/>
    <id>http://yoursite.com/2017/04/25/angular-4/</id>
    <published>2017-04-25T05:17:02.000Z</published>
    <updated>2017-05-14T14:15:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>过滤器</code></center></p>
<hr>
<h2 id="1-过滤器"><a href="#1-过滤器" class="headerlink" title="1.过滤器"></a>1.过滤器</h2><p>&#160; &#160; &#160; &#160;过滤器<code>（filter）</code>正如其名，作用就是接收一个输入，通过某个规则进行处理，然后返回处理后的结果。主要用在数据的格式化上，例如获取一个数组中的子集，对数组中的元素进行排序等。过滤器通常是伴随标记来使用的，将你model中的数据格式化为需要的格式。表单的控制功能主要涉及到数据验证以及表单控件的增强。ng内置了一些过滤器，它们是：</p>
<p>currency(货币)、date(日期)、filter(子串匹配)、json(格式化json对象)、limitTo(限制个数)、lowercase(小写)、uppercase(大写)、number(数字)、orderBy(排序)。</p>
<h3 id="过滤器使用方式"><a href="#过滤器使用方式" class="headerlink" title="过滤器使用方式"></a>过滤器使用方式</h3><p>&#160; &#160; &#160; &#160;总共九种。除此之外还可以自定义过滤器，这个就强大了，可以满足任何要求的数据处理。Filter还是很简单的，需要明白的是内置的<code>filter</code>如何使用，以及自己如何定义一个<code>filter</code>。</p>
<h4 id="filter的两种使用方法："><a href="#filter的两种使用方法：" class="headerlink" title="filter的两种使用方法："></a>filter的两种使用方法：</h4><h5 id="1-在模板中使用filter"><a href="#1-在模板中使用filter" class="headerlink" title="1. 在模板中使用filter"></a>1. 在模板中使用filter</h5><p>我们可以直接在双括号中使用<code>filter</code>，跟在表达式后面用 | 分割，语法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; expression | filter &#125;&#125;</div></pre></td></tr></table></figure>
<p>也可以多个<code>filter</code>连用，上一个filter的输出将作为下一个filter的输入：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; expression | filter1 | filter2 | ... &#125;&#125;</div></pre></td></tr></table></figure>
<p>filter可以接收参数，参数用 : 进行分割，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; expression | filter:argument1:argument2:... &#125;&#125;</div></pre></td></tr></table></figure>
<p>除了对双括号中的数据进行格式化，我们还可以在指令中使用filter，例如先对数组array进行过滤处理，然后再循环输出：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">ng-repeat</span>=<span class="string">"a in array | filter "</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="2-在controller和service中使用filter"><a href="#2-在controller和service中使用filter" class="headerlink" title="2. 在controller和service中使用filter"></a>2. 在controller和service中使用filter</h5><p>&#160; &#160; &#160; &#160;我们的js代码中也可以使用过滤器，方式就是我们熟悉的依赖注入，例如我要在controller中使用currency过滤器，只需将它注入到该controller中即可，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'testC'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,currencyFilter</span>)</span>&#123;</div><div class="line">    $scope.num = currencyFilter(<span class="number">123534</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　</p>
<p>在模板中使用就可以直接输出$123,534.00了！在服务中使用filter也是同样的道理。</p>
<p>&#160; &#160; &#160; &#160;如果你要在controller中使用多个filter，并不需要一个一个注入吗，ng提供了一个$filter服务可以来调用所需的filter，你只需注入一个$filter就够了，使用方法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'testC'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,$filter</span>)</span>&#123;</div><div class="line">    $scope.num = $filter(<span class="string">'currency'</span>)(<span class="number">123534</span>);　　</div><div class="line">    $scope.date = $filter(<span class="string">'date'</span>)(<span class="keyword">new</span> <span class="built_in">Date</span>());  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以达到同样的效果。好处是你可以方便使用不同的filter了。</p>
<h2 id="3-ng的内置过滤器"><a href="#3-ng的内置过滤器" class="headerlink" title="3. ng的内置过滤器"></a>3. ng的内置过滤器</h2><p>&#160; &#160; &#160; &#160;ng内置了九种过滤器，使用方法都非常简单，看文档即懂。不过为了以后不去翻它的文档，我在这里还是做一个详细的记录。<br>&#160; &#160; &#160; &#160;currency(货币)、date(日期)、filter(子串匹配)、json(格式化json对象)、limitTo(限制个数)、lowercase(小写)、uppercase(大写)、number(数字)、orderBy(排序)</p>
<h3 id="1-currency-货币处理"><a href="#1-currency-货币处理" class="headerlink" title="1. currency (货币处理)"></a>1. currency (货币处理)</h3><p>&#160; &#160; &#160; &#160;使用currency可以将数字格式化为货币，默认是美元符号，你可以自己传入所需的符号，例如我传入人民币：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;num | currency : <span class="string">'￥'</span>&#125;&#125;</div></pre></td></tr></table></figure>
<h3 id="2-date-日期格式化"><a href="#2-date-日期格式化" class="headerlink" title="2. date (日期格式化)"></a>2. date (日期格式化)</h3><p>&#160; &#160; &#160; &#160;原生的js对日期的格式化能力有限，ng提供的date过滤器基本可以满足一般的格式化要求。用法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;date | date : <span class="string">'yyyy-MM-dd hh:mm:ss EEEE'</span>&#125;&#125;</div></pre></td></tr></table></figure>
<p>　<br>&#160; &#160; &#160; &#160;参数用来指定所要的格式，y M d h m s E 分别表示 年 月 日 时 分 秒 星期，你可以自由组合它们。也可以使用不同的个数来限制格式化的位数。另外参数也可以使用特定的描述性字符串，例如“shortTime”将会把时间格式为12:05 pm这样的。ng提供了八种描述性的字符串，个人觉得这些有点多余，我完全可以根据自己的意愿组合出想要的格式，不愿意去记这么多单词~</p>
<h3 id="3-filter-匹配子串"><a href="#3-filter-匹配子串" class="headerlink" title="3. filter(匹配子串)"></a>3. filter(匹配子串)</h3><p>&#160; &#160; &#160; &#160;这个名叫filter的filter。用来处理一个数组，然后可以过滤出含有某个子串的元素，作为一个子数组来返回。可以是字符串数组，也可以是对象数组。如果是对象数组，可以匹配属性的值。它接收一个参数，用来定义子串的匹配规则。下面举个例子说明一下参数的用法，我用现在特别火的几个孩子定义了一个数组：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$scope.childrenArray = [</div><div class="line">        &#123;<span class="attr">name</span>:<span class="string">'kimi'</span>,<span class="attr">age</span>:<span class="number">3</span>&#125;,</div><div class="line">        &#123;<span class="attr">name</span>:<span class="string">'cindy'</span>,<span class="attr">age</span>:<span class="number">4</span>&#125;,</div><div class="line">        &#123;<span class="attr">name</span>:<span class="string">'anglar'</span>,<span class="attr">age</span>:<span class="number">4</span>&#125;,</div><div class="line">        &#123;<span class="attr">name</span>:<span class="string">'shitou'</span>,<span class="attr">age</span>:<span class="number">6</span>&#125;,</div><div class="line">        &#123;<span class="attr">name</span>:<span class="string">'tiantian'</span>,<span class="attr">age</span>:<span class="number">5</span>&#125;</div><div class="line">];</div><div class="line"></div><div class="line">    $scope.func = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.age&gt;<span class="number">4</span>;&#125;&#123;&#123; childrenArray | filter : <span class="string">'a'</span> &#125;&#125; <span class="comment">//匹配属性值中含有a的</span></div><div class="line">    &#123;&#123; childrenArray | filter : <span class="number">4</span> &#125;&#125;  <span class="comment">//匹配属性值中含有4的</span></div><div class="line">    &#123;&#123; childrenArray | filter : &#123;<span class="attr">name</span> : <span class="string">'i'</span>&#125; &#125;&#125; <span class="comment">//参数是对象，匹配name属性中含有i的</span></div><div class="line">    &#123;&#123;childrenArray | filter : func &#125;&#125;  <span class="comment">//参数是函数，指定返回age&gt;4的</span></div></pre></td></tr></table></figure>
<h3 id="4-json-格式化json对象"><a href="#4-json-格式化json对象" class="headerlink" title="4. json(格式化json对象)"></a>4. json(格式化json对象)</h3><p>&#160; &#160; &#160; &#160;json过滤器可以把一个js对象格式化为json字符串，没有参数。这东西有什么用呢，我一般也不会在页面上输出一个json串啊，官网说它可以用来进行调试，嗯，是个不错的选择。或者，也可以用在js中使用，作用就和我们熟悉的JSON.stringify()一样。用法超级简单：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; jsonTest | json&#125;&#125;</div></pre></td></tr></table></figure>
<h3 id="5-limitTo-限制数组长度或字符串长度"><a href="#5-limitTo-限制数组长度或字符串长度" class="headerlink" title="5. limitTo(限制数组长度或字符串长度)"></a>5. limitTo(限制数组长度或字符串长度)</h3><p>&#160; &#160; &#160; &#160;limitTo过滤器用来截取数组或字符串，接收一个参数用来指定截取的长度，如果参数是负值，则从数组尾部开始截取。个人觉得这个filter有点鸡肋，首先只能从数组或字符串的开头/尾部进行截取，其次，js原生的函数就可以代替它了，看看怎么用吧：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; childrenArray | limitTo : <span class="number">2</span> &#125;&#125;  <span class="comment">//将会显示数组中的前两项</span></div></pre></td></tr></table></figure>
<p>　　</p>
<h3 id="6-lowercase-小写"><a href="#6-lowercase-小写" class="headerlink" title="6. lowercase(小写)"></a>6. lowercase(小写)</h3><p>&#160; &#160; &#160; &#160;把数据转化为全部小写。太简单了，不多解释。同样是很鸡肋的一个filter，没有参数，只能把整个字符串变为小写，不能指定字母。怎么用我都懒得写了。</p>
<h3 id="7-uppercase-大写"><a href="#7-uppercase-大写" class="headerlink" title="7. uppercase(大写)"></a>7. uppercase(大写)</h3><p>同上。</p>
<h3 id="8-number-格式化数字"><a href="#8-number-格式化数字" class="headerlink" title="8. number(格式化数字)"></a>8. number(格式化数字)</h3><p>&#160; &#160; &#160; &#160;number过滤器可以为一个数字加上千位分割，像这样，123,456,789。同时接收一个参数，可以指定float类型保留几位小数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; num | number : <span class="number">2</span> &#125;&#125;</div></pre></td></tr></table></figure>
<p>　　</p>
<h3 id="9-orderBy-排序"><a href="#9-orderBy-排序" class="headerlink" title="9. orderBy(排序)"></a>9. orderBy(排序)</h3><p>&#160; &#160; &#160; &#160;orderBy过滤器可以将一个数组中的元素进行排序，接收一个参数来指定排序规则，参数可以是一个字符串，表示以该属性名称进行排序。可以是一个函数，定义排序属性。还可以是一个数组，表示依次按数组中的属性值进行排序（若按第一项比较的值相等，再按第二项比较），还是拿上面的孩子数组举例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;&#123;&#123; childrenArray | orderBy : 'age' &#125;&#125;&lt;/div&gt;      //按age属性值进行排序，若是-age，则倒序</div><div class="line">&lt;div&gt;&#123;&#123; childrenArray | orderBy : orderFunc &#125;&#125;&lt;/div&gt;   //按照函数的返回值进行排序</div><div class="line">&lt;div&gt;&#123;&#123; childrenArray | orderBy : ['age','name'] &#125;&#125;&lt;/div&gt;  //如果age相同，按照name进行排序　　内置的过滤器介绍</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;完了，写的我都快睡着了。。。正如你所看到的，ng内置的过滤器也并不是万能的，事实上好多都比较鸡肋。更个性化的需求就需要我们来定义自己的过滤器了，下面来看看如何自定义过滤器。</p>
<h2 id="3-自定义过滤器及示例"><a href="#3-自定义过滤器及示例" class="headerlink" title="3.自定义过滤器及示例"></a>3.自定义过滤器及示例</h2><p>&#160; &#160; &#160; &#160;filter的自定义方式也很简单，使用module的filter方法，返回一个函数，该函数接收<br>输入值，并返回处理后的结果。话不多说，我们来写一个看看。比如我需要一个过滤器，它可以返回一个数组中下标为奇数的元素，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">app.filter(<span class="string">'odditems'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">inputArray</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> array = [];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;inputArray.length;i++)&#123;</div><div class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>!==<span class="number">0</span>)&#123;</div><div class="line">                array.push(inputArray[i]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> array;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;格式就是这样，你的处理逻辑就写在内部的那个闭包函数中。你也可以让自己的过滤器接收参数，参数就定义在return的那个函数中，作为第二个参数，或者更多个参数也可以。</p>
<p>&#160; &#160; &#160; &#160;格式就是这样，你的处理逻辑就写在内部的那个闭包函数中。你也可以让自己的过滤器接收参数，参数就定义在return的那个函数中，作为第二个参数，或者更多个参数也可以。<br>自定义过滤器实例（例04）:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* View html */</span></div><div class="line">First name：&lt;input ng-model=<span class="string">"user.firstName"</span>/&gt;<span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></div><div class="line">Last  name：&lt;input ng-model=<span class="string">"user.lastName"</span>/&gt; <span class="xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></div><div class="line">First name：&#123;&#123;user.firstName&#125;&#125;      Last  name：&#123;&#123;user.lastName&#125;&#125; &lt;br/&gt;</div><div class="line">Fullname：&#123;&#123;user | flFullname&#125;&#125;&lt;br/&gt;</div><div class="line">Fullname：&#123;&#123;user | flFullname:<span class="string">"－"</span>&#125;&#125;&lt;br/&gt;</div><div class="line">Fullname：&#123;&#123;user | flFullname:<span class="string">"•"</span> | uppercase &#125;&#125;</div><div class="line"><span class="comment">/* Controller js */</span></div><div class="line">demoApp.filter(<span class="string">"flFullname"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">user, sep</span>) </span>&#123;</div><div class="line">        sep = sep || <span class="string">" "</span>;</div><div class="line">        user = user || &#123;&#125;;</div><div class="line">        fullName = <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span>(user.firstName)&#123;fullName += user.firstName;&#125;</div><div class="line">        <span class="keyword">if</span>(user.lastName)&#123;fullName = fullName + sep + user.lastName;&#125;</div><div class="line">        <span class="keyword">if</span>(fullName &amp;&amp; fullName.length&gt;<span class="number">0</span>)&#123;<span class="keyword">return</span> fullName;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;<span class="keyword">return</span> <span class="string">""</span>;&#125;</div><div class="line">    &#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了AngularJS中的内置过滤器的功能，以及如何自定义自己的过滤器
    
    </summary>
    
      <category term="AngularJS" scheme="http://yoursite.com/categories/AngularJS/"/>
    
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="angularjs" scheme="http://yoursite.com/tags/angularjs/"/>
    
      <category term="angular过滤器" scheme="http://yoursite.com/tags/angular%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>angularjs(五)</title>
    <link href="http://yoursite.com/2017/04/25/angular-5/"/>
    <id>http://yoursite.com/2017/04/25/angular-5/</id>
    <published>2017-04-25T05:17:02.000Z</published>
    <updated>2017-05-14T14:15:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>过滤器</code></center></p>
<hr>
<h2 id="指令-directive"><a href="#指令-directive" class="headerlink" title="指令(directive)"></a>指令(directive)</h2><p>&#160; &#160; &#160; &#160;通过使用模板，我们可以把model和controller中的数据组装起来呈现给浏览器，还可以通过数据绑定，实时更新视图，让我们的页面变成动态的。</p>
<p>模板中可以使用的东西包括以下四种：</p>
<ol>
<li><code>指令</code>(directive)：ng提供的或者自定义的标签和属性，用来增强HTML表现力；</li>
<li><code>标记</code>(markup)：即双大括号，可将数据单向绑定到HTML中；</li>
<li><code>过滤器</code>(filter)：用来格式化输出数据；</li>
<li><code>表单控制</code>：用来增强表单的验证功能。</li>
</ol>
<p>&#160; &#160; &#160; &#160;其中，指令无疑是使用量最大的，ng内置了很多指令用来控制模板，如ng-repeat，ng-class，也有很多指令来帮你完成业务逻辑，如ng-controller,ng-model。</p>
<p>指令的几种使用方式如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">l 作为标签：<span class="tag">&lt;<span class="name">my-dir</span>&gt;</span><span class="tag">&lt;/<span class="name">my-dir</span>&gt;</span></div><div class="line">l 作为属性：<span class="tag">&lt;<span class="name">span</span> <span class="attr">my-dir</span>=<span class="string">"exp"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">l 作为注释：<span class="comment">&lt;!-- directive: my-dir exp --&gt;</span></div><div class="line">l 作为类名：<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"my-dir: exp;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其实常用的就是作为标签和属性。</p>
<h2 id="1-样式相关的指令"><a href="#1-样式相关的指令" class="headerlink" title="1.样式相关的指令"></a>1.样式相关的指令</h2><p>&#160; &#160; &#160; &#160;既然模板就是普通的HTML，那我首要关心的就是样式的控制，元素的定位、字体、背景色等等如何可以灵活控制。下面来看看常用的样式控制指令。</p>
<h3 id="1-1-ng-class"><a href="#1-1-ng-class" class="headerlink" title="1.1  ng-class"></a>1.1  ng-class</h3><p>&#160; &#160; &#160; &#160;ng-class用来给元素绑定类名，其表达式的返回值可以是以下三种：</p>
<ol>
<li><code>类名字符串，可以用空格分割多个类名，如’redtext boldtext’；_</code></li>
<li><code>类名数组，数组中的每一项都会层叠起来生效；_</code></li>
<li><code>一个名值对应的map，其键值为类名，值为boolean类型，当值为true时，该类会被加在元素上。_</code></li>
</ol>
<p>&#160; &#160; &#160; &#160;下面来看一个使用map的例子：<br><em>ng-class测试</em><br>红色 加粗 删除线 </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map:&#123;<span class="attr">redtext</span>:&#123;&#123;red&#125;&#125;, <span class="attr">boldtext</span>:&#123;&#123;bold&#125;&#125;, <span class="attr">striketext</span>:&#123;&#123;strike&#125;&#125;&#125;</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;如果你想拼接一个类名出来，可以使用插值表达式，如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">”&#123;&#123;style&#125;&#125;text”</span>&gt;</span>字体样式测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在controller中指定style的值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　$scope.style = ‘red’;</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;注意我用了<code>class</code>而不是ng-class，这是不可以对换的，官方的文档也未做说明，姑且认为这是ng的语法规则吧。<br>&#160; &#160; &#160; &#160;与ng-class相近的，ng还提供了ng-class-odd、ng-class-even两个指令，用来配合ng-repeat分别在奇数列和偶数列使用对应的类。这个用来在表格中实现隔行换色再方便不过了。</p>
<h3 id="1-2-ng-style"><a href="#1-2-ng-style" class="headerlink" title="1.2 ng-style"></a>1.2 ng-style</h3><p>&#160; &#160; &#160; &#160;ng-style用来绑定元素的css样式，其表达式的返回值为一个js对象，键为css样式名，值为该样式对应的合法取值。用法比较简单：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-style</span>=<span class="string">"&#123;color:'red'&#125;"</span>&gt;</span>ng-style测试<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div ng-style="style"&gt;ng-style测试&lt;/div&gt;</div><div class="line">$scope.style = &#123;color:'red'&#125;;</div></pre></td></tr></table></figure>
<h3 id="1-3-ng-show，ng-hide"><a href="#1-3-ng-show，ng-hide" class="headerlink" title="1.3  ng-show，ng-hide"></a>1.3  ng-show，ng-hide</h3><p>&#160; &#160; &#160; &#160;对于比较常用的元素显隐控制，ng也做了封装，ng-show和ng-hide的值为boolean类型的表达式，当值为true时，对应的show或hide生效。框架会用display:block和display:none来控制元素的显隐。</p>
<h2 id="2-表单控件功能相关指令"><a href="#2-表单控件功能相关指令" class="headerlink" title="2.表单控件功能相关指令"></a>2.表单控件功能相关指令</h2><ul>
<li>对于常用的表单控件功能，ng也做了封装，方便灵活控制。</li>
<li>ng-checked控制radio和checkbox的选中状态</li>
<li>ng-selected控制下拉框的选中状态</li>
<li>ng-disabled控制失效状态</li>
<li>ng-multiple控制多选</li>
<li>ng-readonly控制只读状态</li>
<li>以上指令的取值均为boolean类型，当值为true时相关状态生效，道理比较简单就不多做解释。注意： 上面的这些只是单向绑定，即只是从数据到模板，不能反作用于数据。要双向绑定，还是要使用 ng-model 。</li>
</ul>
<h2 id="3-事件绑定相关指令"><a href="#3-事件绑定相关指令" class="headerlink" title="3.事件绑定相关指令"></a>3.事件绑定相关指令</h2><p>&#160; &#160; &#160; &#160;事件绑定是javascrpt中比较重要的一部分内容，ng对此也做了详细的封装，正如我们之前使用过的ng-click一样，事件的指令如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-    ng-click</div><div class="line">　-　ng-change</div><div class="line">　-　ng-dblclick</div><div class="line">　-　ng-mousedown</div><div class="line">　-　ng-mouseenter</div><div class="line">　-　ng-mouseleave</div><div class="line">　-　ng-mousemove</div><div class="line">　-　ng-mouseover</div><div class="line">　-　ng-mouseup</div><div class="line">　-　ng-submit</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;事件绑定指令的取值为函数，并且需要加上括号，例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-change</span>=<span class="string">”change($event)”</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在<code>controller</code>中定义如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$scope.change = <span class="function"><span class="keyword">function</span>(<span class="params">$event</span>)</span>&#123;</div><div class="line">         alert($event.target);</div><div class="line">         <span class="comment">//……………………</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　<br>&#160; &#160; &#160; &#160;在模板中可以用变量<code>$event</code>将事件对象传递到<code>controller</code>中。<br>对于ng的这种设计，一些人有所质疑，视图与事件绑定混在一起到底好不好？我们不是要讲究视图与逻辑分离吗？如此一来，把事件的绑定又变回了内联的，岂不是历史的倒退。我也一样对此表示不解，因为不写onclick已经很多年。。。但既然已经存在了，我们不妨往合理的方向上想一想，或许ng的设计者压根就不想让模板成为单纯的视图层，本来就是想增强HTML，让它有一点业务能力。这么想的话似乎也能想通，好吧，先欺骗一下自己吧~</p>
<h3 id="特殊的ng-src和ng-href"><a href="#特殊的ng-src和ng-href" class="headerlink" title="特殊的ng-src和ng-href"></a>特殊的ng-src和ng-href</h3><p>在说明这两个指令的特殊之前，需要先了解一下ng的启动及执行过程，如下图：</p>
<p>1) 浏览器加载静态HTML文件并解析为DOM；<br>2) 浏览器加载angular.js文件；<br>3) angular监听DOMContentLoaded 事件，监听到时开始启动；<br>4) angular寻找ng-app指令，确定作用范围；<br>5) 找到app中定义的Module使用$injector服务进行依赖注入；<br>6) 根据$injector服务创建$compile服务用于编译；<br>7) $compile服务编译DOM中的指令、过滤器等；<br>8) 使用ng-init指令，将作用域中的变量进行替换；<br>9) 最后生成了我们在最终视图。<br>&#160; &#160; &#160; &#160;可以看到，ng框架是在DOMcontent加载完毕后才开始发挥作用。假如我们模板中有一张图片如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">　　<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://m.cnblogs.com/142260/”&#123;&#123;imgUrl&#125;&#125;” /&gt;</span></span></div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;那么在页面开始加载到ng编译完成之前，页面上会一直显示一张错误的图片，因为路径{&nbsp;{imgUrl}&nbsp;}还未被替换。</p>
<p>&#160; &#160; &#160; &#160;为了避免这种情况，我们使用ng-src指令，这样在路径被正确得到之前就不会显示找不到图片。同理，h标签的href属性也需要换成ng-href，这样页面上就不会先出现一个地址错误的链接。</p>
<p>&#160; &#160; &#160; &#160;顺着这个思路再多想一点，我们在模板中使用{&nbsp;{}}显示数据时，在ng编译完成之前页面上岂不是会显示出大括号及里面的表达式？确实是这样。为了避免这个，ng中有一个与{&nbsp;{}}等同的指令:ng-bind，同样用于单向绑定，在页面刚加载的时候就不会显示出对用户无用的数据了。尽管这样你可能不但没舒心反而更纠结了，{&nbsp;{}}那么好用易理解，还不能用了不成？好消息是我们依然可以使用。因为我编写的是单页面应用，页面只会在加载index.html的时</p>
<p>&#160; &#160; &#160; &#160;候出这个问题，只需在index.html中的模板中换成ng-bind就行。其他的模板是我们动态加载的，就可以放心使用{&nbsp;{}}了。</p>
<h3 id="4-自定义指令示例"><a href="#4-自定义指令示例" class="headerlink" title="4.自定义指令示例"></a>4.自定义指令示例</h3><p>&#160; &#160; &#160; &#160;下面我们来解析下指令的例子。</p>
<ol>
<li>首先，我们定义一个名为userInfo的指令：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">demoApp.directive(<span class="string">'userInfo'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span> : <span class="string">'E'</span>,</div><div class="line">        <span class="attr">templateUrl</span> : <span class="string">'userInfoTemplate.html'</span>,</div><div class="line">        <span class="attr">replace</span> : <span class="literal">true</span>,</div><div class="line">        <span class="attr">transclude</span> : <span class="literal">true</span>,</div><div class="line">        <span class="attr">scope</span> : &#123;</div><div class="line">            <span class="attr">mytitle</span> : <span class="string">'=etitle'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">link</span> : <span class="function"><span class="keyword">function</span>(<span class="params">scope,element,attrs</span>)</span>&#123;</div><div class="line">            scope.showText = <span class="literal">false</span>;</div><div class="line">            scope.toggleText = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                scope.showText = ! scope.showText;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><code>Restrict</code>为’E’：用作标签；</li>
<li><code>replace</code>为true：用模板替换当前标签；</li>
<li><code>transclude</code>为true：将当前元素的内容转移到模板中；</li>
<li><code>scope</code> 为 {mytitle : ‘=etitle’}：定义一个名为mytitle的MODEL，其值指向当前元素的etitle属性；templateUrl为’userInfoTemplate.html’：模板内容为ng-template定义ID为userInfoTemplate.html的内容；</li>
<li><code>link</code>：指定所包含的行为。link属性值为一个函数,这个函数有五个参数:scope,iEle,iAttrs,ctrl,linker</li>
</ul>
<ol>
<li>userInfoTemplate.html模板为：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"userInfoTemplate.html"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mybox"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mytitle"</span> <span class="attr">style</span>=<span class="string">"cursor: pointer;"</span> <span class="attr">ng-click</span>=<span class="string">"toggleText()"</span>&gt;</span></div><div class="line">            &#123; &#123;mytitle&#125; &#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-transclude</span> <span class="attr">ng-show</span>=<span class="string">"showText"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>将当前元素的内容添加到有ng-transclude属性的这个DIV下，默认是隐藏的。</p>
<ol>
<li>Controller信息：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">demoApp.controller(<span class="string">"test7Controller"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</div><div class="line">    $scope.title = <span class="string">'个人简介'</span>;</div><div class="line">    $scope.text = <span class="string">'大家好，我正在研究AngularJs，欢迎大家与我交流。'</span>;</div><div class="line">    $scope.updateInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    $scope.title = <span class="string">'个人信息'</span>;</div><div class="line">    $scope.text = <span class="string">'大家好，今天天气真好！'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>指令使用方式（View信息）为：</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">user-info</span> <span class="attr">etitle</span>=<span class="string">"title"</span>&gt;</span>&#123; &#123;text&#125; &#125;<span class="tag">&lt;/<span class="name">user-info</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Etitle指向Controller中的$scope.title。注意命名方式：指令名为<code>userInfo</code>，对应的标签为<code>user-info</code>。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>指令是angular里面核心的功能，日常的学习和开发中也是使用不同指令去完成各种不同的需求，尤其<code>自定义指令</code>尤使用的频率极高，应该好好的掌握！</p>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了AngularJS中的指令的概念，以及常用的指令
    
    </summary>
    
      <category term="AngularJS" scheme="http://yoursite.com/categories/AngularJS/"/>
    
    
      <category term="angularjs" scheme="http://yoursite.com/tags/angularjs/"/>
    
      <category term="前端框架，angular指令" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%EF%BC%8Cangular%E6%8C%87%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>angular(六)</title>
    <link href="http://yoursite.com/2017/04/25/angular_6/"/>
    <id>http://yoursite.com/2017/04/25/angular_6/</id>
    <published>2017-04-25T05:17:02.000Z</published>
    <updated>2017-05-14T14:15:46.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>
<h1 id="正文开始"><a href="#正文开始" class="headerlink" title="正文开始"></a>正文开始</h1><p><center style="font-size: 30px"><code>服务</code></center></p>
<hr>
<h2 id="服务（service）"><a href="#服务（service）" class="headerlink" title="服务（service）"></a>服务（service）</h2><h3 id="服务介绍"><a href="#服务介绍" class="headerlink" title="服务介绍"></a>服务介绍</h3><p>&#160; &#160; &#160; &#160;服务这个概念其实并不陌生，在其他语言中如Java便有这样的概念，其作用就是对外提供某个特定的功能，如消息服务，文件压缩服务等，是一个独立的模块。ng的服务是这样定义的：</p>
<ul>
<li>Angular services are singletons objects or functions that carry out specific tasks common to web apps.</li>
</ul>
<p>它是一个单例对象或函数，对外提供特定的功能。<br>首先是一个单例，即无论这个服务被注入到任何地方，对象始终只有一个实例。<br>其次这与我们自己定义一个function然后在其他地方调用不同，因为服务被定义在一个模块中，所以其使用范围是可以被我们管理的。ng的避免全局变量污染意识非常强。</p>
<p>&#160; &#160; &#160; &#160;ng提供了很多内置的服务，可以到API中查看[<a href="http://docs.angularjs.org/api/。" target="_blank" rel="external">http://docs.angularjs.org/api/。</a>]<br>知道了概念，我们来拉一个service出来溜溜，看看到底是个什么用法。　<br>　<br>&#160; &#160; &#160; &#160;我们在controller中直接声明$location服务，这依靠ng的依赖注入机制。$location提供地址栏相关的服务，我们在此只是简单的获取当前的地址。</p>
<p>&#160; &#160; &#160; &#160;服务的使用是如此简单，我们可以把服务注入到controller、指令或者是其他服务中。</p>
<h3 id="自定义服务"><a href="#自定义服务" class="headerlink" title="自定义服务"></a>自定义服务</h3><p>&#160; &#160; &#160; &#160;如同指令一样，系统内置的服务以$开头，我们也可以自己定义一个服务。定义服务的方式有如下几种：</p>
<ul>
<li>使用系统内置的$provide服务；</li>
<li>使用Module的factory方法；</li>
<li>使用Module的service方法。</li>
</ul>
<p>&#160; &#160; &#160; &#160;下面通过一个小例子来分别试验一下。我们定义一个名为remoteData服务，它可以从远程获取数据，这也是我们在程序中经常使用的功能。不过我这里没有远程服务器，就写死一点数据模拟一下。<br>//使用$provide来定义</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用$provide来定义</span></div><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'MyApp'</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params">$provide</span>) </span>&#123;</div><div class="line">    $provide.factory(<span class="string">'remoteData'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="keyword">var</span> data = &#123;<span class="attr">name</span>:<span class="string">'n'</span>,<span class="attr">value</span>:<span class="string">'v'</span>&#125;;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//使用factory方法</span></div><div class="line">app.factory(<span class="string">'remoteData'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> data = &#123;<span class="attr">name</span>:<span class="string">'n'</span>,<span class="attr">value</span>:<span class="string">'v'</span>&#125;;</div><div class="line">    <span class="keyword">return</span> data;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//使用service方法</span></div><div class="line">app.service(<span class="string">'remoteData'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'n'</span>;</div><div class="line">    <span class="keyword">this</span>.value = <span class="string">'v'</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;Module的factory和$provide的factory方法是一模一样的，从官网文档看它们其实就是一回事。至于Module内部是如何调用的，我此处并不打算深究，我只要知道怎么用就好了。</p>
<p>&#160; &#160; &#160; &#160;再看Module的service方法，它没有return任何东西，是因为service方法本身返回一个构造器，系统会自动使用new关键字来创建出一个对象。所以我们看到在构造器函数内可以使用this，这样调用该服务的地方便可以直接通过remoteData.name来访问数据了。</p>
<h3 id="管理服务的依赖关系"><a href="#管理服务的依赖关系" class="headerlink" title="管理服务的依赖关系"></a>管理服务的依赖关系</h3><p>&#160; &#160; &#160; &#160;服务与服务中间可以有依赖关系，例如我们这里定义一个名为validate的服务，它的作用是验证数据是否合法，它需要依赖我们从远程获取数据的服务remoteData。代码如下：</p>
<p> &#160; &#160; &#160; &#160;在factory的参数中，我们可以直接传入服务remoteData，ng的依赖注入机制便帮我们做好了其他工作。不过一定要保证这个参数的名称与服务名称一致，ng是根据名称来识别的。若参数的名次与服务名称不一致，你就必须显示的声明一下，方式如下：</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> app.factory(<span class="string">'validate'</span>,[<span class="string">'remoteData'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">remoteDataService</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(remoteDataService.name==<span class="string">'n'</span>)&#123;</div><div class="line">            alert(<span class="string">'验证通过'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>  &#160; &#160; &#160; &#160;我们在controller中注入服务也是同样的道理，使用的名称需要与服务名称一致才可以正确注入。否则，你必须使用$inject来手动指定注入的服务。比如：</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">testC</span>(<span class="params">scope,rd</span>)</span>&#123;</div><div class="line">    scope.getData = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'name：'</span>+rd.name+<span class="string">'   value：'</span>+rd.value);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">testC.$inject = [<span class="string">'$scope'</span>,<span class="string">'remoteData'</span>];</div></pre></td></tr></table></figure>
<p>   &#160; &#160; &#160; &#160;在controller中注入服务，也可以在定义controller时使用数组作为第二个参数，在此处<br>把服务注入进去，这样在函数体中使用不一致的服务名称也是可以的，不过要确保注入的顺序是一致的，如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'testC'</span>,[<span class="string">'$scope'</span>,<span class="string">'remoteData'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope,rd</span>)</span>&#123;</div><div class="line">    $scope.getData = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'name：'</span>+rd.name+<span class="string">'   value：'</span>+rd.value);</div><div class="line">    &#125;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<h3 id="自定义服务示例"><a href="#自定义服务示例" class="headerlink" title="自定义服务示例"></a>自定义服务示例</h3><p>&#160; &#160; &#160; &#160;接下来让我们看下例子（例08 自定义服务）代码，自定义userService服务：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">demoApp.factory(<span class="string">'userService'</span>, [<span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$http</span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> doGetUser = <span class="function"><span class="keyword">function</span>(<span class="params">userId, path</span>) </span>&#123;</div><div class="line"><span class="comment">//return $http(&#123;</span></div><div class="line"><span class="comment">//method: 'JSONP',</span></div><div class="line"><span class="comment">//url: path</span></div><div class="line"><span class="comment">//&#125;);</span></div><div class="line"><span class="comment">/*手动指定数据*/</span></div><div class="line"><span class="keyword">var</span> data = &#123;<span class="attr">userId</span>:<span class="string">"woshishui"</span>,<span class="attr">userName</span>:<span class="string">"我是谁"</span>,<span class="attr">userInfo</span>:<span class="string">"我是谁！我是谁！"</span>&#125;;;</div><div class="line"><span class="keyword">if</span>(userId==<span class="string">'zhangsan'</span>)&#123;</div><div class="line">data = &#123;<span class="attr">userId</span>:<span class="string">"zhangsan"</span>,<span class="attr">userName</span>:<span class="string">"张三"</span>,<span class="attr">userInfo</span>:<span class="string">"我是张三，我为自己"</span>&#125;;</div><div class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(userId==<span class="string">'lisi'</span>)&#123;</div><div class="line">data = &#123;<span class="attr">userId</span>:<span class="string">"lisi"</span>,<span class="attr">userName</span>:<span class="string">"李四"</span>,<span class="attr">userInfo</span>:<span class="string">"我是李四，我为卿狂！"</span>&#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> data;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line"><span class="comment">/*userService对外暴露的函数，可有多个*/</span></div><div class="line">getUser: <span class="function"><span class="keyword">function</span>(<span class="params">userId</span>) </span>&#123; </div><div class="line"><span class="keyword">return</span> doGetUser(userId, <span class="string">'../xxx/xxx.action'</span>); </div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;我们创建了一个只有一个方法的userService，getUser为这个服务从后台获取用户信息的函数，并且对外暴露。当然，由于这是一个静态的例子，无法访问后台，那么我们便制定其返回的数据。</p>
<p>&#160; &#160; &#160; &#160;然后我们把这个服务添加到我们的controller中。我们建立一个controller并加载（或者注入）userService作为运行时依赖，我们把service的名字作为参数传递给controller 函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">demoApp.controller(<span class="string">"test8Controller"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope,userService</span>)</span>&#123;</div><div class="line"><span class="comment">/*文章信息*/</span></div><div class="line">$scope.articles = [&#123;</div><div class="line"><span class="attr">title</span> : <span class="string">"爱飞像风"</span>,</div><div class="line"><span class="attr">userId</span> : <span class="string">"zhangsan"</span>,</div><div class="line"><span class="attr">userName</span> : <span class="string">"张三"</span></div><div class="line">&#125;,&#123;</div><div class="line"><span class="attr">title</span> : <span class="string">"无法停止的雨"</span>,</div><div class="line"><span class="attr">userId</span> : <span class="string">"lisi"</span>,</div><div class="line"><span class="attr">userName</span> : <span class="string">"李四"</span></div><div class="line">&#125;];</div><div class="line">$scope.showUserInfo = <span class="literal">false</span>;<span class="comment">//显示作者详细信息开关</span></div><div class="line">$scope.currentUser = &#123;&#125;; <span class="comment">//当前选中的作者</span></div><div class="line">$scope.getUserInfo = <span class="function"><span class="keyword">function</span>(<span class="params">userId</span>)</span>&#123;</div><div class="line">$scope.currentUser = userService.getUser(userId);</div><div class="line"><span class="comment">//调用 userService的getUser函数</span></div><div class="line">$scope.showUserInfo = <span class="literal">true</span>;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//定时器：隐藏作者详细信息</span></div><div class="line">$scope.showUserInfo = <span class="literal">false</span>;</div><div class="line">&#125;,<span class="number">3000</span>);</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;我们的userService注入到我们的test8Controller后，我们就可以像使用其他服务（我们前面提到的$http服务）一样的使用userService了。</p>
<p>相关的HTML代码如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/* View HTML*/</div><div class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"article_ in articles"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">&#123;&#123;article_.title&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(0);"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">......</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-show</span>=<span class="string">"showUserInfo"</span>&gt;</span></div><div class="line">用户ID：&#123;&#123;currentUser.userId&#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">用户名：&#123;&#123;currentUser.userName&#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line">用户简介：&#123;&#123;currentUser.userInfo&#125;&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      本文主要介绍了angular中的服务
    
    </summary>
    
      <category term="AngularJS" scheme="http://yoursite.com/categories/AngularJS/"/>
    
    
      <category term="前端框架" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="angularjs" scheme="http://yoursite.com/tags/angularjs/"/>
    
      <category term="angular服务" scheme="http://yoursite.com/tags/angular%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
</feed>
